#!/etc/Tivoli/bin/perl

# modified
#@(#) login_policy.pl 1.1 7/9/02
# --- Start of Tivoli comments ---
# The following are the command line arguments passed to this script
# from the Gateway.
#
# $1 - The label of the endpoint machine
# $2 - The object reference of the endpoint machine
# $3 - The architecture type of the endpoint machine
# $4 - The object reference of the gateway that the endpoint logged into
# $5 - The ip/ipx address of the endpoint logging in (refer to parameter
#      $9 to determine the protocol of the endpoint).
# $6 - region
# $7 - dispatcher
# $8 - version
# $9 - The inventory id of the endpoint logging in.
# $10 - The protocol of the endpoint logging in.
#         TCPIP   -> TCP/IP
#         IPX     -> IPX/SPX

# --- End of Tivoli comments ---
# -----------------------------------------------------------------------
#  FILENAME: login_policy
#  PURPOSE: Perform login validation for an endpoint
#  DESCRIPTION: 
#       An endpoint contacts its assigned gateway when the endpoint service
#       starts.  The gateway runs this program in respones to that contact.
#       It verifies the endpoint is using it primary gateway and attempts to
#       migrate it if necessary.  The program also performs special prcessing
#       required by the Inventory scanning routines.
#  INPUT PARAMETERS: Data from endpoint
#  INPUT FILES:
#  OUTPUT FILES: login_policy.lst, login_policy.debug, WOL.log
#  RETURNS:
# -----------------------------------------------------------------------
#

# CONFIGURATION PARAMETERS

$DEBUG           = 1;
$LOG             = 1;

$ultv            = "/usr/local/Tivoli/var";
$logdir          = "$ultv/log";
$dir_log         = "$logdir/policy_ep";
$file_log        = "$dir_log/login_policy.log";
$file_debug      = "$dir_log/login_policy.debug";
$file_wol        = "$dir_log/WOL.log";
$dir_autoinv_win = "c:/tivoli/logs/endpoint_login";
$dir_autoinv_aix = "$logdir/autoinv";
$file_tmrname    = "$ultv/tmp/tmrname";
$file_hostname   = "$ultv/tmp/hostname";
$exit_status     = 0;
$exit_msg        = 0;
$login_status    = "normal";  # Normal login
$bindir          = "/usr/local/Tivoli/bin/aix4-r1/bin";


if( $DEBUG || $LOG ) {
    if( ! -d $dir_log ) { `mkdir -p -m775 $dir_log` }
    $date = `date +%Y%m%d-%H%M%S`;
    chop $date;
}

if( $DEBUG ) {
    open( DBG, ">>$file_debug" );
    print DBG "=" x 15, " $date ", "=" x 15, "\n";
}

if( ! -d $dir_autoinv_aix ) { `mkdir -p -m775 $dir_autoinv_aix` }

# Get the region 
open( TMR, "$file_tmrname" ); $reg = <TMR>; close TMR;
unless( $reg ) {
    $reg = `$bindir/wtmrname`;
    open( TMR, ">$file_tmrname" ); print TMR "$reg"; close TMR;
}
chop $reg;
$reg =~ s/^(\S+)\.pr$/$1/;

$dpm_upgrade = "$reg.upgrade-endpoints.dpm";


# Assign the command line arguments to variables
( $epname, $epoid, $eparch, $gatewayoid, $epipaddr, $epregion, $epdispatch, $epversion, $epinvid, $epprotocol) = @ARGV;


# Check the agent and possibly upgrade to new version of TMA
# Alternate method to upgrade.sh
# upgrade.sh makes several objcalls to come up with
# installdir which is /usr/local/Tivoli/bin everywhere
$epupginffile = "/usr/local/Tivoli/bin/lcf_bundle.41100/bin/$eparch/upgrade/EPUPG.INF";
$latestepver = 0;
open( EPUPG, "$epupginffile" );
while( <EPUPG> ) { if( /current_version=(\d+)/ ) { $latestepver = $1 } }
close( EPUPG );


if( $epversion < $latestepver ) {
    `$bindir/wsub @ProfileManager:$dpm_upgrade @Endpoint:$epname`;
    $exit_msg    = "successful";
    $exit_status = 0;
}


# Automated Scanning section
&get_timestamp;
&write_endpoint_logins_to_file;


if( $LOG ) {  # Write all info on one line
    $epoid_short = $epoid;
    $epoid_short =~ s/(\S+)#\S+#/$1/;
    $gwoid_short = $gatewayoid;
    $gwoid_short =~ s/(\S+)#\S+#/$1/;
    open( LOGGER, ">>$file_log");
    print LOGGER "$date $epname $epoid_short $eparch $gwoid_short $epipaddr $epregion $epdispatch $epversion $epprotocol $login_status $exit_status $exit_msg\n"; 
    close LOGGER;
}   # end LOG

if( $DEBUG ) {  # More verbose
    print DBG <<"DBUG_OUT";

ENDPOINT PARAMETERS
      epname: $epname
       epoid: $epoid
      eparch: $eparch
  gatewayoid: $gatewayoid
    epipaddr: $epipaddr
    epregion: $epregion
  epdispatch: $epdispatch
   epversion: $epversion
     epinvid: $epinvid
  epprotocol: $epprotocol

STATUS
epver latest: $latestepver
Login status: $login_status
   Exit code: $exit_status
Exit message: $exit_msg

DBUG_OUT
    close DBG;
}   # end DEBUG


# Return exit status to endpoint manager
exit( $exit_status );


sub write_endpoint_logins_to_file {
# NOTE: The directory location of the $endpointlogin file must
# have write privilege for user "nobody" on UNIX and Full Control
# for "Everyone" on NT.

    unless( -f $file_hostname ) { `hostname > $file_hostname` }
    open( HOST, "$file_hostname" );
    $hostname = <HOST>;
    close HOST;
    chop $hostname;

    if( "$ENV{INTERP}" eq "w32-ix86" ) {
        $dir_autoinv = $dir_autoinv_win;
    } else {
        $dir_autoinv = $dir_autoinv_aix;
    }
    $endpointlogin = "$dir_autoinv/${hostname}_endpoint_log.log-$datestamp";

    open( EPLOG, ">>$endpointlogin" );
    print EPLOG "$login_time $epname $epoid $eparch $gatewayoid $epipaddr $epregion $epdispatch $epversion\n";
    close EPLOG;
}


sub get_timestamp {
    ( $sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdat ) = localtime(time);
    $min        = &pad_num_with_zero( $min );
    $hour       = &pad_num_with_zero( $hour );
    $mday       = &pad_num_with_zero( $mday );
    $mon        = $mon+1;
    $mon        = &pad_num_with_zero( $mon );
    $year       = substr( $year, 1, 2 );
    $datestamp  = "$mon$mday$year";
    $login_time = "$hour:$min";
}

sub pad_num_with_zero {
    $mon        = &pad_num_with_zero( $mon );
    $year       = substr( $year, 1, 2 );
    $datestamp  = "$mon$mday$year";
    $login_time = "$hour:$min";
}

sub pad_num_with_zero {
# Put a zero in front of a number if it is less than 10
    $num = $_[0]+0;
    if( $num < 10 ) { $num = "0" . $num }
    return ( $num );
}

