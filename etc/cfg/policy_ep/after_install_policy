#!/etc/Tivoli/bin/perl

# modified
#@(#) after_install_policy.pl 1.1 12/5/02
# --- Start of Tivoli comments ---
# The following are the command line arguments passed to this script
# from the Endpoint Manager.
#
# $1 - The label of the endpoint machine
# $2 - The object reference of the endpoint machine
# $3 - The architecture type of the endpoint machine
# $4 - The object reference of the gateway that the endpoint logged into
# $5 - The ip/ipx address of the endpoint logging in (refer to parameter 
#      $10 to determine the protocol of the endpoint).
# $6 - region
# $7 - dispatcher
# $8 - version
# $9 - The inventory id of the endpoint logging in.
# $10 - The protocol of the endpoint logging in.
#         TCPIP   -> TCP/IP
#         IPX     -> IPX/SPX
#
# The environment variable LCF_LOGIN_STATUS is also set by the epmgr.
# A value of 2 indicates the endpoint is isolated. That is, it was unable
# to contact its assigned gateway. Isolated endpoints are automatically
# migrated to another gateway unless the select_gateway_policy terminates
# with a non-zero exit status. Other LCF_LOGIN_STATUS values are:
# 0  Initial login   (allow_install_policy, select_gateway_policy, after_install_policy)
# 2  Isolated login  (select_gateway_policy)
# 3  Migratory login (select_gateway_policy)
# 7  Orphaned login  (allow_install_policy, select_gateway_policy, after_install_policy)
#
# Also note that during the execution of allow_install and select_gateway
# policy scripts, the endpoint does not yet formally exist. For this reason,
# the endpoint object reference will have a value of OBJECT_NIL and the
# object dispatcher number will be 0. The endpoint label will have the value
# suggested by the endpoint (or the user value lcfd -n) but is not guaranteed
# to become the final endpoint label. It will become the final endpoint label
# if this value is not already taken by another endpoint.
# -----------------------------------------------------------------------
#  FILENAME: AfterInstall.pl 
#  PURPOSE: Links endpoint to policy region and subscribes it to a profile 
#     manager(s)
#  DESCRIPTION: 
#     Called after select_gateway_policy, this program can work with
#     a defined endpoint.  The endpoint will be placed in a policy region
#     in the Tivoli branch of the structure.
#     The endpoint will be placed in a file that list all endpoints as ther are 
#     added to the TMR. 
#  INPUT PARAMETERS: data from endpoint manager
#  INPUT FILES:
#  OUTPUT FILES: after_install.log, after_install.debug
#  RETURNS:
# -----------------------------------------------------------------------
# 

# CONFIGURATION PARAMETERS

$DEBUG           = 1;
$LOG             = 1;

$ultv            = "/usr/local/Tivoli/var";
$logdir          = "$ultv/log";
$dir_log         = "$logdir/policy_ep";
$file_cfg        = "/usr/local/Tivoli/etc/cfg/after_install.cfg";
$file_log        = "$dir_log/after_install.log";
$file_debug      = "$dir_log/after_install.debug";
$file_tmrname    = "$ultv/tmp/tmrname";
$exit_status     = 0;
$exit_msg        = 0;
$bindir          = "/usr/local/Tivoli/bin/aix4-r1/bin";


if( $DEBUG || $LOG ) {
    if( ! -d $dir_log ) { `mkdir -p -m775 $dir_log` }
    $date = `date +%Y%m%d-%H%M%S`;
    chop $date;
}

if( $DEBUG ) {
    open( DBG, ">>$file_debug" );
    print DBG "=" x 15, " $date ", "=" x 15, "\n";
}


# Get the region
open( TMR, "$file_tmrname" ); $reg = <TMR>; close TMR;
unless( $reg ) {
    $reg = `$bindir/wtmrname`;
    open( TMR, ">$file_tmrname" ); print TMR "$reg"; close TMR;
}
chop $reg;
$reg =~ s/^(\S+)\.pr$/$1/;

$dpm_unknown  = "$reg.unknown-endpoints.dpm";


# Assign command line args to variables
( $epname, $epoid, $eparch, $gatewayoid, $epipaddr, $epregion, $epdispatch, $epversion, $epinvid, $epprotocol) = @ARGV;


# split the endpoints address into an array
@EpIpSplit = split( /[\.,+]/, $epipaddr );
# find the profile managers that the endpoint should be subscribed
@profile_managers = ();
open( CFG, "<$file_cfg" );
while( <CFG> ) {
    next if( /^#/ || /^\s+$/ );
    ( $subnet, $interp, $pm ) = split( /\s+/ );
    $subnet =~ /\s*([^\.\s]*)\.([^\.\s]*)\.([^\.\s]*)\.([^\.\s]*)/;
    if( &match_octet( $1, $EpIpSplit[0] ) ) {
        if( &match_octet( $2, $EpIpSplit[1] ) ) {
            if( &match_octet( $3, $EpIpSplit[2] ) ) {
                if( &match_octet( $4, $EpIpSplit[3] ) ) {
                    if( $interp eq $eparch ) {
                        push( @profile_managers, $pm );
                        print DBG "DBG: PM: $pm\n" if $DEBUG;

                    }
                }
            }
        }
   }
}
close( CFG );


# Assign to the unknown profile manager if no match is made
if( ! @profile_managers ) {
    push( @profile_managers, $dpm_unknown );
}


for $pm ( @profile_managers ) {
    print "$pm\n";
    $oid = `$bindir/wlookup -or ProfileManager $pm`;
    chop $oid;
    $pr_parent = `$bindir/idlattr -tg $oid pro_name string`;
    chop $pr_parent;
    $pr_parent =~ s/\"(\S+)\"/$1/;
    `$bindir/wln \@Endpoint:$epname \@PolicyRegion:$pr_parent`;
    if ( $epname =~ /^lt/ ) { $pm =~ s/.dsk-/.lt-/ } # Use after_install.cfg instead
    `$bindir/wsub \@ProfileManager:$pm \@Endpoint:$epname`;
}
$exit_msg    = "success";
$exit_status = "0";


# set login_status
if( $ENV{'LCF_LOGIN_STATUS'} == 0 ) {
    $login_status = "initial";
} elsif( $ENV{'LCF_LOGIN_STATUS'} == 2 ) {
    $login_status = "isolated";
} elsif( $ENV{'LCF_LOGIN_STATUS'} == 3 ) {
    $login_status = "migration";
} elsif( $ENV{'LCF_LOGIN_STATUS'} == 7 ) {
    $login_status = "orphaned";
} else {
    $login_status = "undefined";
}


if( $LOG ) {  # Write all info on one line
    $epoid_short = $epoid;
    $epoid_short =~ s/(\S+)#\S+#/$1/;
    $gwoid_short = $gatewayoid;
    $gwoid_short =~ s/(\S+)#\S+#/$1/;
    $pms = join( ",", @profile_managers );
    open( LOGGER, ">>$file_log");
    print LOGGER "$date $epname $epoid_short $eparch $gwoid_short $epipaddr $epregion $epdispatch $epversion $epinvid $epprotocol $login_status $exit_status $exit_msg $pms\n";
    close LOGGER;
}   # end LOG

if( $DEBUG ) {  # More verbose
    print DBG <<"DBUG_OUT";

ENDPOINT PARAMETERS
      epname: $epname
       epoid: $epoid
      eparch: $eparch
  gatewayoid: $gatewayoid
    epipaddr: $epipaddr
    epregion: $epregion
  epdispatch: $epdispatch
   epversion: $epversion
     epinvid: $epinvid
  epprotocol: $epprotocol

STATUS
Login status: $login_status
   Exit code: $exit_status
Exit message: $exit_msg
  Policy reg: $pr_parent
   Prof mgrs: @profile_managers

DBUG_OUT
    close DBG;
}   # end DEBUG


# Return status to endpoint manager
exit( $exit_status );


# sub routine to compare ip addresses
sub match_octet{
	local($pattern, $octet) = @_;
	$pattern eq $octet && return 1;
	$pattern eq "*" && return 1;
   	$pattern =~ /(\d*)-(\d*)/;
	$1 <= $octet && $octet <= $2 && return 1;
	return 0;
}

