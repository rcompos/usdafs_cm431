#!/etc/Tivoli/bin/perl

# Comment was automatically added by TME 3.7 patch
#
# TME 3.7 provides new input parameters for this script:
# $9 - The inventory id of the endpoint logging in.
# $10 - The protocol of the endpoint logging in.
# For detailed description refer to Framework Reference Manual.

#
# The following are the command line arguments passed to this script
# from the Endpoint Manager.
#
# $1 - The label of the endpoint machine
# $2 - The object reference of the endpoint machine
# $3 - The architecture type of the endpoint machine
# $4 - The object reference of the gateway that the endpoint logged into
# $5 - The ip/ipx address of the endpoint logging in (refer to parameter 
#      $10 to determine the protocol of the endpoint).
# $6 - region
# $7 - dispatcher
# $8 - version
# $9 - The inventory id of the endpoint logging in.
#
# The following command line argument will be passed to this script
# from the Endpoint Manager, when compiled with the MULTIPROTO flag turned on
#
# $10 - The protocol of the endpoint logging in.
#         TCPIP   -> TCP/IP
#         IPX     -> IPX/SPX
#
# The normal exit code of 0 from the allow_install_policy will allow the 
# endpoint's initial login to proceed.  (If the label of this endpoint is
# in use, though, this login won't complete.)
# 
# An exit code of 10 also will allow this login to proceed and, if this 
# endpoint's label matches the label of an existing endpoint, a unique label 
# will be created for this endpoint.
#
# An exit code of 6 will cause this login to be ignored.
#
# Exiting the allow_install_policy with any other non-zero exit status will 
# stop this endpoint's initial (or orphaned) login.
#
# The environment variable LCF_LOGIN_STATUS is also set by the epmgr.
# A value of 2 indicates the endpoint is isolated. That is, it was unable
# to contact its assigned gateway. Isolated endpoints are automatically
# migrated to another gateway unless the select_gateway_policy terminates
# with a non-zero exit status. Other LCF_LOGIN_STATUS values are:
# 0  Initial login   (allow_install_policy, select_gateway_policy, after_install_policy)
# 1  Normal login    (login_policy) 
# 2  Isolated login  (select_gateway_policy)
# 3  Migratory login (select_gateway_policy)
# 7  Orphaned login  (allow_install_policy, select_gateway_policy, after_install_policy)
#
# The allow_install_policy will have these environment variables set if
# there is already an existing endpoint with the same label as the endpoint
# which is attempting to login:
# LCF_DUPL_OBJECT   object id of existing endpoint
# LCF_DUPL_ADDRESS  network address of existing endpoint
# LCF_DUPL_LOGIN    timestamp of existing endpoint's first normal login
# LCF_DUPL_GATEWAY  object id of existing endpoint's gateway
# LCF_DUPL_INV_ID   inventory id of existing endpoint
# LCF_DUPL_INTERP   interp (architecture type) of existing endpoint
# The initial login will fail for an endpoint whose label matches the label
# of an existing endpoint, unless allow_install_policy is exited with code 10.
#
# Also note that during the execution of allow_install and select_gateway
# policy scripts, the endpoint does not yet formally exist. For this reason,
# the endpoint object reference will have a value of OBJECT_NIL and the
# object dispatcher number will be 0. The endpoint label will have the value
# suggested by the endpoint (or the user value lcfd -n) but is not guaranteed
# to become the final endpoint label. It will become the final endpoint label
# if this value is not already taken by another endpoint.
# --- End of Tivoli comments ---
# -----------------------------------------------------------------------
#  FILENAME: allow_install_policy
#            
#  PURPOSE: 
#      Decides if an endpoint can exist in the TMR
#
#  DESCRIPTION: 
#      Using epmgr.cfg this program looks for an entry matching the subnet
#      of the calling endpoint.   If it is found and the install flag is
#      'y', then the endpoint is installable in the TMR.
#      Checks to see if Endpoint name already exist.  If so install stops and 
#       Endpoint name is logged to error file.
# 
#  INPUT PARAMETERS:
#      data from Tivoli intercepting gateway
# 
#  INPUT FILES:
#      epmgr.cfg
#
#  OUTPUT FILES:
#      allow_install.lst
#      allow_install.debug - if debugging is turned on
# 
#  RETURNS:
#      0 - Successful completion -- endpoint is installable
#      1 - endpoint is rejected
#      6 - causes login to be ignored
#     10 - allows duplicate endpoint to continue login/creation process
# -----------------------------------------------------------------------
# 

# CONFIGURATION PARAMETERS 

$DEBUG        = 1;
$LOG          = 1;

$dir_log      = "/usr/local/Tivoli/var/log/policy_ep";
$file_cfg     = "/usr/local/Tivoli/etc/cfg/epmgr.cfg";
$file_log     = "$dir_log/allow_install.log";
$file_debug   = "$dir_log/allow_install.debug";
%seen         = ();
$exit_status  = 0;
$exit_msg     = 0;


if( $DEBUG || $LOG ) {
    if( ! -d $dir_log ) { `mkdir -p -m775 $dir_log` }
    $date = `date +%Y%m%d-%H%M%S`;
    chop $date;
}

if( $DEBUG ) {
    open( DBG, ">>$file_debug" );
    print DBG "=" x 15, " $date ", "=" x 15, "\n";
}


# Assign command line args to more readable variables
( $epname, $epoid, $eparch, $gatewayoid, $epipaddr, $epregion, $epdispatch, $epversion, $epinvid, $epprotocol ) = @ARGV;


# split the ip address that the endpoint reports for comparrison
@all_gw = ();
@EpIpSplit = split( /[\.,+]/, $epipaddr );
open( CFG, "<$file_cfg" );
while( <CFG> ) {
    next if( /^#/ || /^\s+$/ );
    ( $subnet, $gateway, $instflag, @comments ) = split( /\s+/ );
    $subnet =~ /\s*([^\.\s]*)\.([^\.\s]*)\.([^\.\s]*)\.([^\.\s]*)/;
    @gateway_field = split( /,/, $gateway );
    if( &match_octet( $1, $EpIpSplit[0] ) ) {
        if( &match_octet( $2, $EpIpSplit[1] ) ) {
            if( &match_octet( $3, $EpIpSplit[2] ) ) {
                if( &match_octet( $4, $EpIpSplit[3] ) ) {
                    push( @all_gw, @gateway_field );
                }
            }
        }
    }
}
close( CFG );

for( @all_gw ) { push( @assigned_gateways, $_ ) unless $seen{ $_ }++ }


# if there are no gateways found set exit status to 90
if( ! @assigned_gateways ) {
    $exit_msg    ="no_gateway";
    $exit_status = 90;
}


# check to see if the install flag for the gateway is turned on
# if it is procced normally, if in is set to n, or turned off
# set the exit status to 89
if( $instflag =~ /n/i ) {
    $exit_msg    = "install_flag";
    $exit_status = 89;
}


# not check the duplicate environment variables.
# to allow the duplicate to be created with a unique
# name, label.dispatcher, set exit_status to 6 to ignore
# the login if needed in the future
if( $ENV{'LCF_DUPL_OBJECT'} ) {
    $exit_msg    = "duplicate";
    $exit_status = 10;
}


# set login_status
if( $ENV{'LCF_LOGIN_STATUS'} == 0 ) {
    $login_status = "initial";
} elsif($ENV{'LCF_LOGIN_STATUS'} == 2 ) {
    $login_status = "isolated";
} elsif($ENV{'LCF_LOGIN_STATUS'} == 3 ) {
    $login_status = "migration";
} elsif($ENV{'LCF_LOGIN_STATUS'} == 7 ) {
    $login_status = "orphaned";
} else {
    $login_status = "undefined";
}


$gw_assigned = join( ",", @assigned_gateways );

# Record results of allow_install to list file
if( $LOG ){  # Write all info on one line
    $epoid_short = $epoid;
    $epoid_short =~ s/(\S+)#\S+#/$1/;
    $gwoid_short = $gatewayoid;
    $gwoid_short =~ s/(\S+)#\S+#/$1/;
    open( LOGGER, ">>$file_log");
    #print LOGGER "$epname|$epoid|$eparch|$gatewayoid|$epipaddr|$epregion|$epdispatch|$epversion|$epinvid|$epprotocol|$login_status|$exit_msg|$exit_status|$gw|$date\n";
    print LOGGER "$date $epname $epoid_short $eparch $gwoid_short $epipaddr $epregion $epdispatch $epversion $epinvid $epprotocol $login_status $exit_msg $exit_status $gw_assigned\n";
    close LOGGER;
}   # end LOG


if( $DEBUG ) {  # More verbose
    open( DBG, ">>$file_debug" );
    print DBG <<"DBUG_OUT";

ENDPOINT PARAMETERS
      epname: $epname
       epoid: $epoid
      eparch: $eparch
  gatewayoid: $gatewayoid
    epipaddr: $epipaddr
    epregion: $epregion
  epdispatch: $epdispatch
   epversion: $epversion
     epinvid: $epinvid
  epprotocol: $epprotocol

STATUS
Login status: $login_status
   Exit code: $exit_status
Exit message: $exit_msg
 GW assigned: $gw_assigned

DBUG_OUT
    close DBG;
}   # end DEBUG


# Return status to endpoint manager
exit( $exit_status );


sub match_octet{
# sub routine to compare ip addresses
    local($pattern, $octet) = @_;
    $pattern eq $octet && return 1;
    $pattern eq "*" && return 1;
    $pattern =~ /(\d*)-(\d*)/;
    $1 <= $octet && $octet <= $2 && return 1;
    return 0;
}

