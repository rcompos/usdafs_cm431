#!/usr/bin/perl
# $Header: $
#
# Create task dstar
# in task library rX.tools.tl 
#

#use diagnostics;
use strict;
use Getopt::Std;

unshift( @INC, "/usr/local/Tivoli/etc/script/lib" );
require "tool.pl";
require "tooltiv.pl";

select( ( select( STDERR ), $| = 1 )[0] );
select( ( select( STDOUT ), $| = 1 )[0] );

my %opt;
getopts( 'dfhlu', \%opt );
if( $opt{ h } ) { usage() };
$main::dbug  = $opt{ d } ? 1 : 0;
my $dbug     = $main::dbug;
my $list     = $opt{ l } ? 1 : 0;
my $force    = $opt{ f } ? 1 : 0;
my $uninst   = $opt{ u } ? 1 : 0;
my $action   = $opt{ u } ? "UNINSTALL" : "INSTALL";
$main::xs    = 0; print $main::xs if $dbug;
my $spc      = 4;

my $self     = vhx( "objcall 0.0.0 self", 3, 1 );
$self =~ /^(\S+)\.(\S+)\.\S+$/;
my $num_reg  = $1;
my $disp     = $2;
unless( $disp == 1 ) { print "Must be on TMR server!\n"; exit 1 }

my $oid = vhx( "objcall $self get_host_location", 3, 1 );
my $mn = vhx( "idlcall $oid _get_label", 3, 1 );
$mn =~ s/^"(\S+)"$/$1/;

my $tl_name         = "tools";
my $dir_tiv         = "/usr/local/Tivoli";
my $dir_etc         = "$dir_tiv/etc";
my $dir_cfg         = "$dir_etc/cfg";
my $dir_script      = "$dir_etc/script";
my $dir_script_task = "$dir_script/task_$tl_name";
my $dir_log         = "/usr/local/Tivoli/var/log/task_$tl_name";
my $reg             = get_region();
my $pr              = "$reg.framework.maint.pr";
my $reg_up          = "$reg.framework.pr";
my $tasklib         = "$reg.$tl_name.tl";
my $job_id          = 0;

#my $date_stamp      = vhx( "date '+%m/%d/%Y'", 3, 1 );  chomp $date_stamp;
unless( -d $dir_log || $uninst ) { vhx( "mkdir -p -m755 $dir_log" ) }

my( $tname, $tdesc, $time, $task_arg, $job_arg, $sched_arg );
my $job_sub = $uninst ? \&delete_all :\&create_all;

title( "$action task in task library $tl_name", 10, 0 );
confirm( $force ) unless $list;
print "\n";

title( "DEBUG", 40, 5 ) if $dbug;

print "\nChecking policy region: $pr\n";
if( vhx( "wlookup -r PolicyRegion $pr", 3, 2 ) ) {
    print "Found: $pr\n";
} else {
    unless( $uninst ) { 
        print "Policy region not found! $pr\n";
        print "wcrtpr -s \@PolicyRegion:$reg_up -m TaskLibrary -m QueryLibrary -m ProfileManager -m ManagedNode $pr\n" if $list;
        vhx( "wcrtpr -s \@PolicyRegion:$reg_up -m TaskLibrary -m QueryLibrary -m ProfileManager -m ManagedNode $pr", 0, 1 ) unless $list;
    }
}
print "\n";

unless( $uninst ) {
    my $tl_flag = 0;
    my @pr_list = vhx( "wgetpr \@PolicyRegion:$pr", 3, 1 );
    for( @pr_list ) { $tl_flag = 1 if /TaskLibrary/ }
    unless( $tl_flag ) {
        print "$pr does not have managed resource TaskLibrary\n";
        print "wsetpr TaskLibrary \@PolicyRegion:$pr\n" if $list;
        vhx( "wsetpr TaskLibrary \@PolicyRegion:$pr", 0, 1 ) unless $list;
    }
    print "wsetpr -v BasicTaskLibrary -E TaskLibrary \@PolicyRegion:$pr\n" if $list;
    vhx( "wsetpr -v BasicTaskLibrary -E TaskLibrary \@PolicyRegion:$pr", 0, 1 ) unless $list;
}

unless( vhx( "wlookup -r TaskLibrary $tasklib", 3, 2 ) ) {
    print "TaskLibrary $tasklib does not exist!\n";
    if( $uninst ) {
        print "Done.\n";
        exit 0;
    } else {
        print "wcrttlib $tasklib $pr\n" if $list;
        vhx( "wcrttlib $tasklib $pr", 0, 1 ) unless $list;
    }
} else {
    print "Found: $tasklib\n";
}


### Begin task definitions ###

$tname = "dstar";
$tdesc = "Execute command line arguments on endpoint.";
$task_arg  = qq{ -t "$reg.$tname.task" -l $tasklib -g \\\$root_group -u \\\$root_user -r super -c "$tdesc" -i default $mn $dir_script_task/$tname.sh };

&$job_sub( $tname, $tasklib, $task_arg );

### End task definitions ###


if( $uninst ) {
    print "wdel \@TaskLibrary:$tasklib\n" if $list;
    vhx( "wdel \@TaskLibrary:$tasklib", 0, 2 ) unless $list;
};

print "\n$0 complete.\n\n";


############################
#        end corpus        #
############################


sub delete_all {
    my $tname      = shift;
    my $tl         = shift;
    my $task_arg   = shift;
    my $job_arg    = shift; 
    my $sched_arg  = shift;

    my $task       = "$reg.$tname.task";
    my $job        = "$reg.$tname.job";

    print "\nDelete: $tname\n";
    my @task_lib   = vhx( "wlstlib $tl", 3, 2 );
    if( @task_lib ) {
        if( $sched_arg && ( my @jobs_running = grep { /^\s*\d+\s+$tname\s+/ } vhx( "wgetsched", 3, 2 ) ) ) {
            if( $#jobs_running > 0 ) {
                print " " x $spc, "WARNING: Multiple $tname jobs running: ", $#jobs_running + 1, "\n";
            }
            my $arg;
            my $id_nums;
            for( @jobs_running ) {
                if( /^\s*(\d+)\s+/ ) {
                    $arg .= "-s $1 ";
                    $id_nums .= "$1 ";
                } else {
                    print " " x $spc, "WARNING: Error parsing wgetsched output!\n$_\n";
                }
            }
            print " " x $spc, "Removing scheduled job(s): $id_nums\n";
            print "wdelsched $arg\n" if $list;
            vhx( "wdelsched $arg", 0, 2 ) unless $list;
        } 

    } else {
        print " " x $spc, "Task library doesn\'t exist: $tl\n";
        return 0;
    }

    if( $job_arg && grep { /$job/ } @task_lib ) {  
        print " " x $spc, "Removing job: $job\n";
        print "wdeljob $job $tl\n" if $list;
        vhx( "wdeljob $job $tl", 0, 2 ) unless $list;
    }

    if( grep { /$task/ } @task_lib ) {  
        print " " x $spc, "Removing task: $task\n";
        print "wdeltask $task $tl\n" if $list;
        vhx( "wdeltask $task $tl", 0, 2 ) unless $list;
    }

}   # end sub delete_all


sub create_all {
#
# Create task, job and scheduled job 
#
    my $tname      = shift;
    my $tl         = shift;
    my $task_arg   = shift;
    my $job_arg    = shift; 
    my $sched_arg  = shift;

    my $task       = "$reg.$tname.task";
    my $job        = "$reg.$tname.job";

    print "\nCreate: $tname\n";
    my @task_lib   = vhx( "wlstlib $tl", 3, 2 );
    if( grep { /$task/ } @task_lib ) {  
        print " " x $spc, "Updating task: $task\n";
        print "wsettask $task_arg\n" if $list;
        vhx( "wsettask $task_arg", 0, 0 ) unless $list;
    } else {
        print " " x $spc, "Creating task: $task\n";
        print "wcrttask $task_arg\n" if $list;
        vhx( "wcrttask $task_arg", 0, 0 ) unless $list;
    }

 if( $job_arg ) {
    if( grep { /$job/ } @task_lib ) {  
        print " " x $spc, "Updating job: $job\n";
        print "wsetjob $job_arg\n" if $list;
        vhx( "wsetjob $job_arg", 0, 0 ) unless $list;
    } else {
        print " " x $spc, "Creating job: $job\n";
        print "wcrtjob $job_arg\n" if $list;
        vhx( "wcrtjob $job_arg", 0, 0 ) unless $list;
    }
  }

  if( $sched_arg ) {
    if( my @jobs_running = grep { /^\s*\d+\s+$tname\s+/ } vhx( "wgetsched", 3, 2 ) ) {
        if( $#jobs_running == 0 ) {
            $jobs_running[0] =~ /^\s*(\d+)\s+/;
            print " " x $spc, "Editing scheduled job: id: $1\n";
            print "wedsched $sched_arg $1\n" if $list;
            vhx( "wedsched $sched_arg $1", 0, 2 ) unless $list;
        } elsif( $#jobs_running > 0 ) {
            print " " x $spc, "WARNING: Multiple $tname jobs running: ", $#jobs_running + 1, "\n";
            my $arg;
            my $id_nums;
            for( @jobs_running ) {
                if( /^\s*(\d+)\s+/ ) {
                    $arg .= "-s $1 ";
                    $id_nums .= "$1 ";
                } else {
                    print " " x $spc, "WARNING: Error parsing wgetsched output!\n$_\n";
                }
            }
            print " " x $spc, "Removing scheduled job: id: $id_nums\n";
            print "wdelsched $arg\n" if $list;
            vhx( "wdelsched $arg", 0, 2 ) unless $list;
            print " " x $spc, "Scheduling job:\n";
            print "wschedjob -L $tl -n $job $sched_arg\n" if $list;
            vhx( "wschedjob -L $tl -n $job $sched_arg", 0, 0 ) unless $list; 
        }
    } else {
        print " " x $spc, "Scheduling job:\n";
        print "wschedjob -L $tl -n $job $sched_arg\n" if $list;
        vhx( "wschedjob -L $tl -n $job $sched_arg", 0, 0 ) unless $list; 
    }
  }

}   # end sub create_all


sub usage {
    print "$_\n" for( @_ );
    print STDERR <<"USAGE";
Usage: $0 [-dhflu]

Desc:  Create task, job and schedule jobs

       -f  Force
       -d  Debuggin mode
       -h  Help
       -l  List actions without performing them
       -u  Uninstall all jobs and tasks

USAGE
   exit 0;
}

