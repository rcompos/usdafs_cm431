--
--
-- Licensed Materials - Property of IBM
--
-- 5698-INV
--
-- (C) Copyright IBM Corp. 2002, 2005 All Rights Reserved
--
-- US Government Users Restricted Rights - Use, duplication or
-- disclosure restricted by GSA ADP Schedule Contract with
-- IBM Corp
--
--
--
-- This script is to upgrade a CM 4.2.3 installation.
-- Use inv_ora_schema.sql script for a fresh install.
--

-- spool inv_ora_schema_423_FP01.log;
spool fs_inv_ora_schema_423_FP01.log;

ALTER TABLE COMPUTER ADD OS_KERNEL_MODE VARCHAR2(32);

drop view COMPUTER_VIEW;
create view COMPUTER_VIEW
as
select
    COMPUTER.COMPUTER_SYS_ID,
    to_char(COMPUTER.COMPUTER_SCANTIME,'YYYY.MM.DD HH24:MI:SS') as COMPUTER_SCANTIME,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.COMPUTER_MODEL,
    COMPUTER.COMPUTER_BOOT_TIME,
    COMPUTER.COMPUTER_ALIAS,
    COMPUTER.SYS_SER_NUM,
    COMPUTER.OS_NAME,
    COMPUTER.OS_KERNEL_MODE,
    COMPUTER.OS_TYPE,
    COMPUTER.OS_MAJOR_VERS,
    COMPUTER.OS_MINOR_VERS,
    COMPUTER.OS_SUB_VERS,
    COMPUTER.OS_INST_DATE,
    COMPUTER.REGISTERED_OWNER,
    COMPUTER.REGISTERED_ORG,
    COMPUTER.KEYBOARD_TYPE,
    COMPUTER.FUNCTION_KEYS,
    COMPUTER.TZ_LOCALE,
    COMPUTER.TZ_NAME,
    COMPUTER.TZ_DAYLIGHT_NAME,
    COMPUTER.ON_SAVINGS_TIME,
    COMPUTER.TZ_SECONDS,
    COMPUTER.TIME_DIRECTION,
    to_char(COMPUTER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    COMPUTER
;

alter table T_NATIV_SWARE modify (PACKAGE_NAME varchar2(128));

-- 422_423 start: comment the block if you move from 422
CREATE TABLE TMP_INST_SMBIOS_DATA (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       SMBIOS_ID            VARCHAR2(32)  NOT NULL,
       BIOS_DATE            VARCHAR2(16),
       SYS_SER_NUM          VARCHAR2(64),
       SYS_UUID             VARCHAR2(36),
       BOARD_SER_NUM        VARCHAR2(64),
       CASE_SER_NUM         VARCHAR2(64),
       CASE_ASSET_TAG       VARCHAR2(64),
       POWERON_PASSWORD     VARCHAR2(64),
       RECORD_TIME          DATE
); 

CREATE TABLE TMP1_INST_SMBIOS_DATA (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       RECORD_TIME          DATE
); 


insert into TMP1_INST_SMBIOS_DATA(
       COMPUTER_SYS_ID,
       RECORD_TIME)
       select COMPUTER_SYS_ID,
       max(RECORD_TIME)
       from INST_SMBIOS_DATA
group by COMPUTER_SYS_ID
;

insert into TMP_INST_SMBIOS_DATA(
       COMPUTER_SYS_ID,
       SMBIOS_ID,
       BIOS_DATE,
       SYS_SER_NUM,
       SYS_UUID,
       BOARD_SER_NUM,
       CASE_SER_NUM,
       CASE_ASSET_TAG,
       POWERON_PASSWORD,
       RECORD_TIME)
       select A.COMPUTER_SYS_ID,
       A.SMBIOS_ID,
       A.BIOS_DATE,
       A.SYS_SER_NUM,
       A.SYS_UUID,
       A.BOARD_SER_NUM,
       A.CASE_SER_NUM,
       A.CASE_ASSET_TAG,
       A.POWERON_PASSWORD,
       A.RECORD_TIME
       from INST_SMBIOS_DATA A,tmp1_inst_smbios_data B
       where A.computer_sys_id=B.computer_sys_id and A.record_time=B.record_time
;

DROP TABLE INST_SMBIOS_DATA;
CREATE TABLE INST_SMBIOS_DATA (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       SMBIOS_ID            VARCHAR2(32)  NOT NULL,
       BIOS_DATE            VARCHAR2(16),
       SYS_SER_NUM          VARCHAR2(64),
       SYS_UUID             VARCHAR2(36),
       BOARD_SER_NUM        VARCHAR2(64),
       CASE_SER_NUM         VARCHAR2(64),
       CASE_ASSET_TAG       VARCHAR2(64),
       POWERON_PASSWORD     VARCHAR2(64),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTSMBIOSDATA_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT INSTSMBIOSDATA_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT SMBIOS_FK FOREIGN KEY(SMBIOS_ID)
           REFERENCES SMBIOS_SYS_DATA(SMBIOS_ID))
;
CREATE OR REPLACE TRIGGER INSTSMBIOSDATA_TR
       BEFORE UPDATE ON INST_SMBIOS_DATA
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

insert INTO INST_SMBIOS_DATA(
       COMPUTER_SYS_ID,
       SMBIOS_ID,
       BIOS_DATE,
       SYS_SER_NUM,
       SYS_UUID,
       BOARD_SER_NUM,
       CASE_SER_NUM,
       CASE_ASSET_TAG,
       POWERON_PASSWORD,
       RECORD_TIME)
       select COMPUTER_SYS_ID,
       SMBIOS_ID,
       BIOS_DATE,
       SYS_SER_NUM,
       SYS_UUID,
       BOARD_SER_NUM,
       CASE_SER_NUM,
       CASE_ASSET_TAG,
       POWERON_PASSWORD,
       RECORD_TIME
from TMP_INST_SMBIOS_DATA
;

DROP TABLE TMP_INST_SMBIOS_DATA; 
DROP TABLE TMP1_INST_SMBIOS_DATA; 

drop view SMBIOS_DATA_VIEW;
create view SMBIOS_DATA_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SMBIOS_SYS_DATA.BIOS_VENDOR,
    SMBIOS_SYS_DATA.BIOS_VERS,
    SMBIOS_SYS_DATA.BIOS_SIZE,
    INST_SMBIOS_DATA.BIOS_DATE,
    SMBIOS_SYS_DATA.SYS_MANUFACTURER,
    SMBIOS_SYS_DATA.SYS_PRODUCT_NAME,
    SMBIOS_SYS_DATA.SYS_VERS,
    INST_SMBIOS_DATA.SYS_SER_NUM,
    INST_SMBIOS_DATA.SYS_UUID,
    SMBIOS_SYS_DATA.BOARD_MANUFACTURER,
    SMBIOS_SYS_DATA.BOARD_PRODUCT,
    SMBIOS_SYS_DATA.BOARD_VERS,
    INST_SMBIOS_DATA.BOARD_SER_NUM,
    SMBIOS_SYS_DATA.CASE_MANUFACTURER,
    SMBIOS_SYS_DATA.CASE_TYPE,
    SMBIOS_SYS_DATA.CASE_VERS,
    INST_SMBIOS_DATA.CASE_SER_NUM,
    INST_SMBIOS_DATA.CASE_ASSET_TAG,
    INST_SMBIOS_DATA.POWERON_PASSWORD,
    to_char(INST_SMBIOS_DATA.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_SMBIOS_DATA,SMBIOS_SYS_DATA,COMPUTER
where
    INST_SMBIOS_DATA.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_SMBIOS_DATA.SMBIOS_ID = SMBIOS_SYS_DATA.SMBIOS_ID
;
-- 422_423 stop: comment the block if you move from 422

create or replace view MEM_MODULES_TOTAL
as
select
    COMPUTER.COMPUTER_SYS_ID,
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.OS_NAME,
    count(*) as NUM_MEM_SLOTS,
    sum(MODULE_SIZE_MB) as TOTAL_INST_MEM,
    sum(MAX_MODULE_SIZE_MB) as MAX_SUPPORTED_MEM
from
    COMPUTER,MEM_MODULES
where
    COMPUTER.COMPUTER_SYS_ID = MEM_MODULES.COMPUTER_SYS_ID
group by
    COMPUTER.COMPUTER_SYS_ID,COMPUTER.TME_OBJECT_LABEL,COMPUTER.TME_OBJECT_ID,COMPUTER.OS_NAME
;

----------------------------------
-- PATCH MANAGEMENT TABLES --
----------------------------------

drop table PM_PRODUCT_INFO CASCADE CONSTRAINTS;
create table PM_PRODUCT_INFO (
  COMPUTER_SYS_ID   varchar2(64)  not null,
  PRODUCT_CODE      varchar2(4)   not null,
  PROD_MAJOR_VER    varchar2(4)   not null,
  PROD_MINOR_VER    varchar2(4)   not null,
  PROD_LANG         varchar2(16)  not null,
  OS_BASE_NAME      varchar2(16)  not null,
  OS_ARCHITECTURE   varchar2(16)  not null,
  OS_TYPE           varchar2(16),
  OS_SUBTYPE        varchar2(16),
  OS_SP_MAJOR_VER   varchar2(4),
  OS_SP_MINOR_VER   varchar2(4),
  RECORD_TIME          DATE          DEFAULT SYSDATE,
  constraint PMPROD_PK primary key(COMPUTER_SYS_ID, PRODUCT_CODE, PROD_LANG),
  constraint PMPROD_FK foreign key(COMPUTER_SYS_ID) references COMPUTER(COMPUTER_SYS_ID)
);

CREATE OR REPLACE TRIGGER PMPROD_TR
       BEFORE UPDATE ON PM_PRODUCT_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/     

drop table PM_PATCH_INFO CASCADE CONSTRAINTS;
create table PM_PATCH_INFO (
  COMPUTER_SYS_ID   varchar2(64)  not null,
  ID                varchar2(128),
  PRODUCT           varchar2(255) not null,
  BULLETIN          varchar2(32)  not null,
  QNUM              varchar2(32)  not null,
  GUID              varchar2(64)  not null,
  UPDATEID          varchar2(64)  not null,
  REBOOTBEHAVIOR    varchar2(20)  not null,
  REASON            varchar2(255) not null,
  STATUS            varchar2(64)  not null,
  PRODUCT_CODE      varchar2(4)   not null,
  RECORD_TIME          DATE          DEFAULT SYSDATE,
  constraint PMPATCH_PK primary key(COMPUTER_SYS_ID, GUID),
  constraint PMPATCH_FK foreign key(COMPUTER_SYS_ID) references COMPUTER(COMPUTER_SYS_ID)
);

CREATE OR REPLACE TRIGGER PMPATCH_TR
       BEFORE UPDATE ON PM_PATCH_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/       

DROP TABLE PM_PATCH_PKG CASCADE CONSTRAINTS;
CREATE TABLE PM_PATCH_PKG(
  SWARE_NAME           varchar2(128)  not null,
  SWARE_VERS           varchar2(64)   not null,
  REGION_ID            varchar2(20)   not null,
  PRODUCT_CODE         varchar2(4)    not null,
  QNUM                 varchar2(32)   not null,
  GUID                 varchar2(64)   not null,
  CONSTRAINT PMPATCHPKG_PK PRIMARY KEY(GUID, SWARE_NAME, REGION_ID))
;

CREATE OR REPLACE TRIGGER PATCHPKG_TR
    AFTER DELETE ON SD_PACKAGES
    FOR EACH ROW
    BEGIN
        DELETE FROM PM_PATCH_PKG WHERE 
        :OLD.SWARE_NAME = PM_PATCH_PKG.SWARE_NAME and
        :OLD.REGION_ID = PM_PATCH_PKG.REGION_ID and
        not exists (SELECT 1 FROM 
            SD_INST WHERE SD_INST.SWARE_NAME = PM_PATCH_PKG.SWARE_NAME and
            SD_INST.REGION_ID = PM_PATCH_PKG.REGION_ID and
                SD_INST.STATE != '-----');
    END;
/

----------------------------------
-- PATCH MANAGEMENT VIEWS --
----------------------------------

create or replace view
  PM_PATCHES_VIEW
as
select 
  PM_PATCH_INFO.COMPUTER_SYS_ID,
  PM_PATCH_INFO.QNUM,
  PM_PATCH_INFO.GUID,
  PM_PATCH_INFO.UPDATEID,
  PM_PATCH_INFO.REBOOTBEHAVIOR,
  PM_PATCH_INFO.BULLETIN,
  PM_PATCH_INFO.PRODUCT,
  PM_PATCH_INFO.STATUS,
  PM_PATCH_INFO.REASON,
  PM_PRODUCT_INFO.PRODUCT_CODE,
  PM_PRODUCT_INFO.PROD_MAJOR_VER,
  PM_PRODUCT_INFO.PROD_MINOR_VER,
  PM_PRODUCT_INFO.PROD_LANG,
  PM_PRODUCT_INFO.OS_BASE_NAME,
  PM_PRODUCT_INFO.OS_ARCHITECTURE,
  PM_PRODUCT_INFO.OS_TYPE,
  PM_PRODUCT_INFO.OS_SUBTYPE,
  PM_PRODUCT_INFO.OS_SP_MAJOR_VER,
  PM_PRODUCT_INFO.OS_SP_MINOR_VER
from
  PM_PATCH_INFO,
  PM_PRODUCT_INFO
where
  (
    (
      PM_PATCH_INFO.COMPUTER_SYS_ID = PM_PRODUCT_INFO.COMPUTER_SYS_ID
    )
  and
    (
      PM_PATCH_INFO.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE
    )
  );

create or replace view
  SP_PATCHES_VIEW
as
select 
  PM_PATCH_INFO.COMPUTER_SYS_ID,
  PM_PATCH_INFO.QNUM,
  PM_PATCH_INFO.GUID,
  PM_PATCH_INFO.UPDATEID,
  PM_PATCH_INFO.REBOOTBEHAVIOR,
  PM_PATCH_INFO.BULLETIN,
  PM_PATCH_INFO.PRODUCT,
  PM_PATCH_INFO.STATUS,
  PM_PATCH_INFO.REASON,
  SD_PACKAGES.SWARE_NAME,
  SD_PACKAGES.SWARE_VERS,
  SD_PACKAGES.TME_SWARE_OID,
  SD_PACKAGES.SWARE_SRC_HOST,
  SD_PACKAGES.SWARE_SRC_PATH,
  SD_PACKAGES.REGION_ID,
  PM_PRODUCT_INFO.PRODUCT_CODE,
  PM_PRODUCT_INFO.PROD_MAJOR_VER,
  PM_PRODUCT_INFO.PROD_MINOR_VER,
  PM_PRODUCT_INFO.PROD_LANG,
  PM_PRODUCT_INFO.OS_BASE_NAME,
  PM_PRODUCT_INFO.OS_ARCHITECTURE,
  PM_PRODUCT_INFO.OS_TYPE,
  PM_PRODUCT_INFO.OS_SUBTYPE,
  PM_PRODUCT_INFO.OS_SP_MAJOR_VER,
  PM_PRODUCT_INFO.OS_SP_MINOR_VER
from
  PM_PATCH_INFO 
     JOIN PM_PRODUCT_INFO ON
        PM_PATCH_INFO.COMPUTER_SYS_ID = PM_PRODUCT_INFO.COMPUTER_SYS_ID and
        PM_PATCH_INFO.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE
      LEFT OUTER JOIN PM_PATCH_PKG ON
            PM_PATCH_PKG.GUID = PM_PATCH_INFO.GUID and
            PM_PATCH_PKG.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE 
        LEFT OUTER JOIN SD_PACKAGES ON 
            PM_PATCH_PKG.SWARE_NAME = SD_PACKAGES.SWARE_NAME AND
                PM_PATCH_PKG.REGION_ID = SD_PACKAGES.REGION_ID
;

create or replace view EP_PATCHES_VIEW
as
select 
  PM_PATCH_INFO.COMPUTER_SYS_ID,
  PM_PATCH_INFO.QNUM,
  PM_PATCH_INFO.GUID,
  PM_PATCH_INFO.UPDATEID,
  PM_PATCH_INFO.REBOOTBEHAVIOR,
  PM_PATCH_INFO.BULLETIN,
  PM_PATCH_INFO.PRODUCT,
  PM_PATCH_INFO.STATUS,
  PM_PATCH_INFO.REASON,
  COMPUTER.TME_OBJECT_ID,
  COMPUTER.TME_OBJECT_LABEL,
  SD_PACKAGES.SWARE_NAME,
  SD_PACKAGES.SWARE_VERS,
  SD_PACKAGES.REGION_ID,
  SD_INST.STATE,
  PM_PRODUCT_INFO.PRODUCT_CODE,
  PM_PRODUCT_INFO.PROD_MAJOR_VER,
  PM_PRODUCT_INFO.PROD_MINOR_VER,
  PM_PRODUCT_INFO.PROD_LANG,
  PM_PRODUCT_INFO.OS_BASE_NAME,
  PM_PRODUCT_INFO.OS_ARCHITECTURE,
  PM_PRODUCT_INFO.OS_TYPE,
  PM_PRODUCT_INFO.OS_SUBTYPE,
  PM_PRODUCT_INFO.OS_SP_MAJOR_VER,
  PM_PRODUCT_INFO.OS_SP_MINOR_VER
from
  PM_PATCH_INFO 
      JOIN PM_PRODUCT_INFO ON
        PM_PATCH_INFO.COMPUTER_SYS_ID = PM_PRODUCT_INFO.COMPUTER_SYS_ID and
        PM_PATCH_INFO.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE
      JOIN COMPUTER ON
        PM_PRODUCT_INFO.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
      LEFT OUTER JOIN PM_PATCH_PKG ON
            PM_PATCH_PKG.GUID = PM_PATCH_INFO.GUID and
            PM_PATCH_PKG.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE 
        LEFT OUTER JOIN SD_PACKAGES ON 
            (PM_PATCH_PKG.SWARE_NAME = SD_PACKAGES.SWARE_NAME and
                PM_PATCH_PKG.REGION_ID = SD_PACKAGES.REGION_ID)
        LEFT OUTER JOIN SD_INST ON 
                (SD_INST.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID and 
                    SD_INST.SWARE_NAME = PM_PATCH_PKG.SWARE_NAME and
                    SD_INST.REGION_ID = PM_PATCH_PKG.REGION_ID)
;

insert into SCHEMA_VERS values ('CM 4.2.3', SYSDATE, 'PATCH',
            'inv_ora_schema_423_FP01.sql', 'FP01 applied to existing installation')
;

commit;

spool off;

exit;

