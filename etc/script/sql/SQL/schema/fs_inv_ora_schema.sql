--
-- Licensed Materials - Property of IBM
--
-- 5724C06-INV
--
-- (C) Copyright IBM Corp. 2004 All Rights Reserved
--
-- US Government Users Restricted Rights - Use, duplication or
-- disclosure restricted by GSA ADP Schedule Contract with
-- IBM Corp
--
--
-- inv_ora_schema.sql
--
-- This script is for a new CM 4.3.1 installation only.
-- Use inv_ora_upgrade_421_423.sql script to
-- upgrade from 4.2.1, or inv_ora_upgrade_422_423.sql
-- script to upgrade from 4.2.2.
--

spool fs_inv_ora_schema.log;

DROP TABLE COMPUTER CASCADE CONSTRAINTS;
CREATE TABLE COMPUTER (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       COMPUTER_SCANTIME    DATE,
       TME_OBJECT_ID        VARCHAR2(128),
       TME_OBJECT_LABEL     VARCHAR2(254),
       COMPUTER_MODEL       VARCHAR2(128),
       COMPUTER_BOOT_TIME   DATE,
       COMPUTER_ALIAS       VARCHAR2(32),
       SYS_SER_NUM          VARCHAR2(64),
       OS_NAME              VARCHAR2(128),
       OS_KERNEL_MODE       VARCHAR2(32),
       OS_TYPE              VARCHAR2(32),
       OS_MAJOR_VERS        INTEGER,
       OS_MINOR_VERS        INTEGER,
       OS_SUB_VERS          VARCHAR2(32),
       OS_INST_DATE         VARCHAR2(32),
       REGISTERED_OWNER     VARCHAR2(64),
       REGISTERED_ORG       VARCHAR2(64),
       KEYBOARD_TYPE        VARCHAR2(128),
       FUNCTION_KEYS        INTEGER,
       TZ_LOCALE            VARCHAR2(32),
       TZ_NAME              VARCHAR2(64),
       TZ_DAYLIGHT_NAME     VARCHAR2(64),
       ON_SAVINGS_TIME      CHAR(1),
       TZ_SECONDS           INTEGER,
       TIME_DIRECTION       CHAR(1),
       OS_LANG_VERS         VARCHAR2(64), 
       OS_LCID              VARCHAR2(64), 
       CURRENT_LCID         VARCHAR2(64), 
       OS_ARCH              VARCHAR2(24), 
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT COMPUTER_PK PRIMARY KEY(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER COMPUTER_TR
       BEFORE UPDATE ON COMPUTER
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE USER_TABLE;
CREATE TABLE USER_TABLE (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       COMPUTER_USER        VARCHAR2(128) NOT NULL,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT USERTABLE_PK PRIMARY KEY(COMPUTER_SYS_ID, COMPUTER_USER))
;
CREATE OR REPLACE TRIGGER USERTABLE_TR
       BEFORE UPDATE ON USER_TABLE
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE COMPUTER_SYS_MEM;
CREATE TABLE COMPUTER_SYS_MEM (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PHYSICAL_TOTAL_KB    INTEGER,
       PHYSICAL_FREE_KB     INTEGER,
       TOTAL_PAGES          INTEGER,
       FREE_PAGES           INTEGER,
       PAGE_SIZE            INTEGER,
       VIRT_TOTAL_KB        INTEGER,
       VIRT_FREE_KB         INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT COMPUTERSYSMEM_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT COMPUTERSYSMEM_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER COMPUTERSYSMEM_TR
       BEFORE UPDATE ON COMPUTER_SYS_MEM
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE PC_SYS_PARAMS;
CREATE TABLE PC_SYS_PARAMS (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       USER_NAME            VARCHAR2(32),
       DOMAIN_NAME          VARCHAR2(32),
       WORKGROUP_NAME       VARCHAR2(32),
       BIOS_ID              VARCHAR2(128),
       BIOS_ID_BYTES        VARCHAR2(16),
       BIOS_DATE            VARCHAR2(32),
       BIOS_STRING          VARCHAR2(128),
       BIOS_MANUFACTURER    VARCHAR2(64),
       MANUFACTURER_ID      VARCHAR2(64),
       BIOS_MODEL           VARCHAR2(32),
       BIOS_SER_NUM         VARCHAR2(32),
       UPTIME               INTEGER,
       IE_VERS              VARCHAR2(64),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT PCSYSPARAMS_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT PCSYSPARAMS_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER PCSYSPARAMS_TR
       BEFORE UPDATE ON PC_SYS_PARAMS
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE UNIX_SYS_PARAMS;
CREATE TABLE UNIX_SYS_PARAMS (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       BOOT_TIME            DATE,
       UPTIME               INTEGER,
       RUN_LEVEL            INTEGER,
       HOST_NAME            VARCHAR2(64),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT UNIXSYSPARAMS_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT UNIXSYSPARAMS_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER UNIXSYSPARAMS_TR
       BEFORE UPDATE ON UNIX_SYS_PARAMS
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE SMBIOS_SYS_DATA CASCADE CONSTRAINTS;
CREATE TABLE SMBIOS_SYS_DATA (
       SMBIOS_ID            VARCHAR2(32)  NOT NULL,
       BIOS_VENDOR          VARCHAR2(64),
       BIOS_VERS            VARCHAR2(64),
       BIOS_SIZE            CHAR(8),
       SYS_MANUFACTURER     VARCHAR2(64),
       SYS_PRODUCT_NAME     VARCHAR2(64),
       SYS_VERS             VARCHAR2(64),
       BOARD_MANUFACTURER   VARCHAR2(64),
       BOARD_PRODUCT        VARCHAR2(64),
       BOARD_VERS           VARCHAR2(64),
       CASE_MANUFACTURER    VARCHAR2(64),
       CASE_TYPE            VARCHAR2(64),
       CASE_VERS            VARCHAR2(64),
         CONSTRAINT SMBIOSSYSDATA_PK PRIMARY KEY(SMBIOS_ID))
;

DROP TABLE INST_SMBIOS_DATA;
CREATE TABLE INST_SMBIOS_DATA (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       SMBIOS_ID            VARCHAR2(32)  NOT NULL,
       BIOS_DATE            VARCHAR2(16),
       SYS_SER_NUM          VARCHAR2(64),
       SYS_UUID             VARCHAR2(36),
       BOARD_SER_NUM        VARCHAR2(64),
       CASE_SER_NUM         VARCHAR2(64),
       CASE_ASSET_TAG       VARCHAR2(64),
       POWERON_PASSWORD     VARCHAR2(64),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTSMBIOSDATA_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT INSTSMBIOSDATA_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT SMBIOS_FK FOREIGN KEY(SMBIOS_ID)
           REFERENCES SMBIOS_SYS_DATA(SMBIOS_ID))
;
CREATE OR REPLACE TRIGGER INSTSMBIOSDATA_TR
       BEFORE UPDATE ON INST_SMBIOS_DATA
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE MEM_MODULES;
CREATE TABLE MEM_MODULES (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       INST_MEM_ID          INTEGER       NOT NULL,
       MODULE_SIZE_MB       INTEGER,
       MAX_MODULE_SIZE_MB   INTEGER,
       SOCKET_NAME          VARCHAR2(32),
       PACKAGING            VARCHAR2(16),
       MEM_TYPE             VARCHAR2(48),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT MEMMODULES_PK PRIMARY KEY(COMPUTER_SYS_ID,INST_MEM_ID),
         CONSTRAINT MEMMODULES_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER MEMMODULES_TR
       BEFORE UPDATE ON MEM_MODULES
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE PROCESSOR CASCADE CONSTRAINTS;
CREATE TABLE PROCESSOR (
       PROCESSOR_ID         VARCHAR2(32)  NOT NULL,
       MANUFACTURER         VARCHAR2(64),
       PROCESSOR_MODEL      VARCHAR2(32),
       PROCESSOR_FEATURES   INTEGER,
       MAX_SPEED            INTEGER,
       CURRENT_SPEED        INTEGER,
       BUS_SPEED            INTEGER,
       CPU_INTERFACE        VARCHAR2(32),
       ECACHE_MB            VARCHAR2(16),
       CPU_IMPL             VARCHAR2(16),
       CPU_MASK             VARCHAR2(16),
       CHIP_FAMILY          INTEGER,
       CHIP_MODEL           INTEGER,
       CHIP_STEPPING        INTEGER,
       VIRT_MODE_EXT        CHAR(1),
       PAGE_SIZE_EXT        CHAR(1),
       TIME_STAMP_COUNTER   CHAR(1),
       MODEL_SPECIFIC_REG   CHAR(1),
       PHYSICAL_ADDR_EXT    CHAR(1),
       MACHINECHECK_EXCPT   CHAR(1),
       CMPXCHG8B_SUPP       CHAR(1),
       ON_CHIP_APIC         CHAR(1),
       MEM_TYPE_RANGE_REG   CHAR(1),
       PAGE_GLOBAL_ENABLE   CHAR(1),
       MACHINECHECK_ARCH    CHAR(1),
       COND_MOVE_SUPP       CHAR(1),
       MMX_TECHNOLOGY       CHAR(1),
       ON_CHIP_FPU          CHAR(1),
       DEBUG_EXT_PRESENT    CHAR(1),
       FAST_SYS_CALL        CHAR(1),
       PAGE_ATTR_TABLE      CHAR(1),
       PAGE_SIZE_EXT36      CHAR(1),
       SER_NUM_ENABLED      CHAR(1),
       FAST_FLOAT_SAVE      CHAR(1),
       SIMD_EXT_SUPP        CHAR(1),
       NOW_3_D_ARCH         CHAR(1),
         CONSTRAINT PROCESSOR_PK PRIMARY KEY(PROCESSOR_ID))
;

DROP TABLE INST_PROCESSOR;
CREATE TABLE INST_PROCESSOR (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PROCESSOR_NUM        INTEGER       NOT NULL,
       PROCESSOR_ID         VARCHAR2(32)  NOT NULL,
       SER_NUM              VARCHAR2(32),
       PROCESSOR_BOARD      INTEGER,
       PROCESSOR_MODULE     INTEGER,
       IS_ENABLED           CHAR(1),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTPROCESSOR_PK PRIMARY KEY(COMPUTER_SYS_ID,PROCESSOR_ID,PROCESSOR_NUM),
         CONSTRAINT INSTPROCESSOR_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT PROCESSOR_FK FOREIGN KEY(PROCESSOR_ID)
           REFERENCES PROCESSOR(PROCESSOR_ID))
;
CREATE OR REPLACE TRIGGER INSTPROCESSOR_TR
       BEFORE UPDATE ON INST_PROCESSOR
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

-- DROP TABLE PHYSICAL_PROCESSOR;
CREATE TABLE PHYSICAL_PROCESSOR (
       COMPUTER_SYS_ID         VARCHAR(64)  NOT NULL,
       PROCESSOR_ID            VARCHAR(64)  NOT NULL,
       CORE_PER_PK_COUNT       INTEGER,
       LOG_PROC_PER_CORE       INTEGER,
       MANUFACTURER            VARCHAR(64),
       FAMILY                  VARCHAR(64),
       TYPE                    VARCHAR(64),
       CPU_FREQ                INTEGER,
       L2_CACHE_SIZE           INTEGER,
       L3_CACHE_SIZE           INTEGER,
       BRANDNAME               VARCHAR(128),
       SIGNATURE               VARCHAR(128), 
       RECORD_TIME             DATE    DEFAULT SYSDATE,
         CONSTRAINT PHYSPROCESSOR_PK PRIMARY KEY(COMPUTER_SYS_ID,PROCESSOR_ID),
         CONSTRAINT PHYSPROCESSOR_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;

CREATE OR REPLACE TRIGGER PHYSPROCESSOR_TR
       BEFORE UPDATE ON PHYSICAL_PROCESSOR
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/


DROP TABLE HDISK CASCADE CONSTRAINTS;
CREATE TABLE HDISK (
       HDISK_ID             VARCHAR2(32)  NOT NULL,
       HDISK_CYLINDERS      INTEGER,
       HDISK_SECTORS        INTEGER,
       HDISK_HEADS          INTEGER,
       HDISK_SIZE_MB        INTEGER,
         CONSTRAINT HDISK_PK PRIMARY KEY(HDISK_ID))
;

DROP TABLE STORAGE_DEV;
CREATE TABLE STORAGE_DEV (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       STORAGE_CLASS        CHAR(1)       NOT NULL,
       INST_STORAGE_ID      INTEGER       NOT NULL,
       STORAGE_TYPE         VARCHAR2(64),
       MANUFACTURER         VARCHAR2(128),
       MODEL                VARCHAR2(254),
       SER_NUM              VARCHAR2(64),
       HDISK_ID             VARCHAR2(32)  NOT NULL,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTHDISK_PK PRIMARY KEY(COMPUTER_SYS_ID,STORAGE_CLASS,INST_STORAGE_ID),
         CONSTRAINT INSTHDISK_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER STORAGEDEV_TR
       BEFORE UPDATE ON STORAGE_DEV
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE INST_PARTITION;
CREATE TABLE INST_PARTITION (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       FS_ACCESS_POINT      VARCHAR2(191) NOT NULL,
       DEV_NAME             VARCHAR2(64),
       PARTITION_TYPE       VARCHAR2(32),
       MEDIA_TYPE           VARCHAR2(32),
       PHYSICAL_SIZE_KB     INTEGER,
       FS_TYPE              VARCHAR2(32),
       FS_MOUNT_POINT       VARCHAR2(254),
       FS_TOTAL_SIZE_KB     INTEGER,
       FS_FREE_SIZE_KB      INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTPARTITION_PK PRIMARY KEY(COMPUTER_SYS_ID,FS_ACCESS_POINT),
         CONSTRAINT INSTPARTITION_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER INSTPARTITION_TR
       BEFORE UPDATE ON INST_PARTITION
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE INST_PARTITION_MB;
CREATE TABLE INST_PARTITION_MB (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       FS_ACCESS_POINT      VARCHAR2(191) NOT NULL,
       DEV_NAME             VARCHAR2(64),
       PARTITION_TYPE       VARCHAR2(32),
       MEDIA_TYPE           VARCHAR2(32),
       PHYSICAL_SIZE_MB     INTEGER,
       FS_TYPE              VARCHAR2(32),
       FS_MOUNT_POINT       VARCHAR2(254),
       FS_TOTAL_SIZE_MB     INTEGER,
       FS_FREE_SIZE_MB      INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTPARTITIONMB_PK PRIMARY KEY(COMPUTER_SYS_ID,FS_ACCESS_POINT),
         CONSTRAINT INSTPARTITIONMB_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER INSTPARTITIONMB_TR
       BEFORE UPDATE ON INST_PARTITION_MB
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/



DROP TABLE INST_MOUNT_POINT;
CREATE TABLE INST_MOUNT_POINT (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       FS_ACCESS_POINT      VARCHAR2(191) NOT NULL,
       DEV_NAME             VARCHAR2(64),
       PARTITION_TYPE       VARCHAR2(32),
       MEDIA_TYPE           VARCHAR2(32),
       PHYSICAL_SIZE_KB     INTEGER,
       FS_TYPE              VARCHAR2(32),
       FS_MOUNT_POINT       VARCHAR2(254) NOT NULL,
       FS_TOTAL_SIZE_KB     INTEGER,
       FS_FREE_SIZE_KB      INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTMOUNTPOINT_PK PRIMARY KEY(COMPUTER_SYS_ID,FS_ACCESS_POINT,FS_MOUNT_POINT),
         CONSTRAINT INSTMOUNTPOINT_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER INSTMOUNTPOINT_TR
       BEFORE UPDATE ON INST_MOUNT_POINT
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE MOUSE CASCADE CONSTRAINTS;
CREATE TABLE MOUSE (
       MOUSE_ID             VARCHAR2(32)  NOT NULL,
       MOUSE_MODEL          VARCHAR2(64),
       MOUSE_TYPE           VARCHAR2(32),
       BUTTONS              INTEGER,
         CONSTRAINT MOUSE_PK PRIMARY KEY(MOUSE_ID))
;

DROP TABLE INST_MOUSE;
CREATE TABLE INST_MOUSE (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       MOUSE_ID             VARCHAR2(32)  NOT NULL,
       INST_MOUSE_ID        INTEGER       NOT NULL,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTMOUSE_PK PRIMARY KEY(COMPUTER_SYS_ID,MOUSE_ID,INST_MOUSE_ID),
         CONSTRAINT INSTMOUSE_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT MOUSE_FK FOREIGN KEY(MOUSE_ID)
           REFERENCES MOUSE(MOUSE_ID))
;
CREATE OR REPLACE TRIGGER INSTMOUSE_TR
       BEFORE UPDATE ON INST_MOUSE
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE PRINTER CASCADE CONSTRAINTS;
CREATE TABLE PRINTER (
       PRINTER_ID           VARCHAR2(32)  NOT NULL,
       PRINTER_MODEL        VARCHAR2(128),
         CONSTRAINT PRINTER_PK PRIMARY KEY(PRINTER_ID))
;

DROP TABLE INST_PRINTER;
CREATE TABLE INST_PRINTER (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PRINTER_ID           VARCHAR2(32)  NOT NULL,
       INST_PRINTER_ID      INTEGER       NOT NULL,
       PRINTER_NAME         VARCHAR2(128),
       PRINTER_LOCATION     VARCHAR2(128),
       PRINTER_IS_LOCAL     CHAR(1),
       DRV_NAME             VARCHAR2(64),
       DRV_VERS             VARCHAR2(32),
       PORT_NAME            VARCHAR2(128),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTPRINTER_PK PRIMARY KEY(COMPUTER_SYS_ID,PRINTER_ID,INST_PRINTER_ID),
         CONSTRAINT INSTPRINTER_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT PRINTER_FK FOREIGN KEY(PRINTER_ID)
           REFERENCES PRINTER(PRINTER_ID))
;
CREATE OR REPLACE TRIGGER INSTPRINTER_TR
       BEFORE UPDATE ON INST_PRINTER
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE VID_CARD CASCADE CONSTRAINTS;
CREATE TABLE VID_CARD (
       VID_CARD_ID          VARCHAR2(32)  NOT NULL,
       VID_CARD_MODEL       VARCHAR2(32),
       VID_CARD_BIOS        VARCHAR2(64),
       VID_DAC_TYPE         VARCHAR2(32),
       VID_MEM              INTEGER,
       VID_BIOS_RELDATE     VARCHAR2(32),
       VID_CHIP_TYPE        VARCHAR2(32),
         CONSTRAINT VIDCARD_PK PRIMARY KEY(VID_CARD_ID))
;

DROP TABLE INST_VID_CARD;
CREATE TABLE INST_VID_CARD (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       VID_CARD_ID          VARCHAR2(32)  NOT NULL,
       INST_VID_CARD_ID     INTEGER       NOT NULL,
       VID_HORIZNTL_RES     INTEGER,
       VID_VERTICAL_RES     INTEGER,
       VID_COLORS           INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTVIDCARD_PK PRIMARY KEY(COMPUTER_SYS_ID,VID_CARD_ID,INST_VID_CARD_ID),
         CONSTRAINT INSTVIDCARD_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT VIDCARD_FK FOREIGN KEY(VID_CARD_ID)
           REFERENCES VID_CARD(VID_CARD_ID))
;
CREATE OR REPLACE TRIGGER INSTVIDCARD_TR
       BEFORE UPDATE ON INST_VID_CARD
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE MODEM CASCADE CONSTRAINTS;
CREATE TABLE MODEM (
       MODEM_ID             VARCHAR2(32)  NOT NULL,
       MODEM_DESC           VARCHAR2(64),
       MANUFACTURER         VARCHAR2(64),
       PROVIDER_NAME        VARCHAR2(32),
       MODEM_TYPE           VARCHAR2(32),
       INF_FILE             VARCHAR2(32),
       INF_SECTION          VARCHAR2(32),
         CONSTRAINT MODEM_PK PRIMARY KEY(MODEM_ID))
;

DROP TABLE INST_MODEM;
CREATE TABLE INST_MODEM (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       MODEM_ID             VARCHAR2(32)  NOT NULL,
       INST_MODEM_ID        INTEGER       NOT NULL,
       PORT                 VARCHAR2(16),
       PORT_SPEED           INTEGER,
       PORT_SETTINGS        VARCHAR2(16),
       USER_INIT            VARCHAR2(128),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTMODEM_PK PRIMARY KEY(COMPUTER_SYS_ID,MODEM_ID,INST_MODEM_ID),
         CONSTRAINT INSTMODEM_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT MODEM_FK FOREIGN KEY(MODEM_ID)
           REFERENCES MODEM(MODEM_ID))
;
CREATE OR REPLACE TRIGGER INSTMODEM_TR
       BEFORE UPDATE ON INST_MODEM
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE NET_ADAPTER;
CREATE TABLE NET_ADAPTER (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PERM_MAC_ADDR        VARCHAR2(64)  NOT NULL,
       CURRENT_ADDR         VARCHAR2(64),
       ADAPTER_TYPE         VARCHAR2(16),
       ADAPTER_MODEL        VARCHAR2(64),
       MANUFACTURER         VARCHAR2(64),
       INST_DATE            VARCHAR2(32),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT NETADAPTER_PK PRIMARY KEY(COMPUTER_SYS_ID,PERM_MAC_ADDR),
         CONSTRAINT NETADAPTER_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER NETADAPTER_TR
       BEFORE UPDATE ON NET_ADAPTER
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE ALL_NET_ADAPTER;
CREATE TABLE ALL_NET_ADAPTER (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       ADAPTER_ID           VARCHAR2(16)  NOT NULL,
       PERM_MAC_ADDR        VARCHAR2(64),
       CURRENT_ADDR         VARCHAR2(64),
       ADAPTER_TYPE         VARCHAR2(16),
       ADAPTER_MODEL        VARCHAR2(64),
       MANUFACTURER         VARCHAR2(64),
       INST_DATE            VARCHAR2(32),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT ALLNETAD_PK PRIMARY KEY(COMPUTER_SYS_ID,ADAPTER_ID),
         CONSTRAINT ALLNETAD_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER ALLNETAD_TR
       BEFORE UPDATE ON ALL_NET_ADAPTER
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE IP_ADDR;
CREATE TABLE IP_ADDR (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       IP_ADDR              VARCHAR2(40)  NOT NULL,
       IP_HOSTNAME          VARCHAR2(64),
       IP_DOMAIN            VARCHAR2(64),
       IP_SUBNET            VARCHAR2(40),
       IP_GATEWAY           VARCHAR2(254),
       IP_PRIMARY_DNS       VARCHAR2(40),
       IP_SECONDARY_DNS     VARCHAR2(40),
       IS_DHCP              CHAR(1),
       PERM_MAC_ADDRESS     VARCHAR2(64),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT IPADDR_PK PRIMARY KEY(COMPUTER_SYS_ID,IP_ADDR),
         CONSTRAINT IPADDR_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER IPADDR_TR
       BEFORE UPDATE ON IP_ADDR
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE IPX_ADDR;
CREATE TABLE IPX_ADDR (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       IPX_ADDR             VARCHAR2(40)  NOT NULL,
       NET_NUM              VARCHAR2(40),
       NODE_ADDR            VARCHAR2(40),
       LINK_SPEED           INTEGER,
       MAX_PACKET_SIZE      INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT IPXADDR_PK PRIMARY KEY(COMPUTER_SYS_ID,IPX_ADDR),
         CONSTRAINT IPXADDR_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER IPXADDR_TR
       BEFORE UPDATE ON IPX_ADDR
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE USB_DEV CASCADE CONSTRAINTS;
CREATE TABLE USB_DEV (
       USB_ID               VARCHAR2(32)  NOT NULL,
       USB_VERS             VARCHAR2(32),
       DEV_CLASS            VARCHAR2(32),
       DEV_SUBCLASS         INTEGER,
       VENDOR_ID            INTEGER,
       PRODUCT_ID           INTEGER,
       MANUFACTURER         VARCHAR2(64),
       PRODUCT              VARCHAR2(32),
       NUM_OF_PORTS         INTEGER,
       DEV_IS_HUB           CHAR(6),
         CONSTRAINT USBDEV_PK PRIMARY KEY(USB_ID))
;

DROP TABLE INST_USB_DEV;
CREATE TABLE INST_USB_DEV (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       USB_ID               VARCHAR2(32)  NOT NULL,
       HOST_CNTRL           VARCHAR2(64),
       DEV_ADDR             VARCHAR2(16),
       SER_NUM              VARCHAR2(16),
       PORT_NUM             VARCHAR2(16),
       PARENT_ADDR          VARCHAR2(16),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTUSBDEV_PK PRIMARY KEY(COMPUTER_SYS_ID,USB_ID),
         CONSTRAINT INSTUSBDEV_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT USBDEV_FK FOREIGN KEY(USB_ID)
           REFERENCES USB_DEV(USB_ID))
;
CREATE OR REPLACE TRIGGER INSTUSBDEV_TR
       BEFORE UPDATE ON INST_USB_DEV
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;

/

DROP TABLE PCI_DEV;
CREATE TABLE PCI_DEV (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       INST_PCI_ID          INTEGER       NOT NULL,
       PCI_DEV_NAME         VARCHAR2(180) NOT NULL,
       PCI_REVISION         CHAR(8),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT PCIDEV_PK PRIMARY KEY(COMPUTER_SYS_ID,INST_PCI_ID,PCI_DEV_NAME),
         CONSTRAINT CIDEV_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER INSTPCIDEV_TR
       BEFORE UPDATE ON PCI_DEV
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE NW_VOLS;
CREATE TABLE NW_VOLS (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       NWVOL_NAME           VARCHAR2(32)  NOT NULL,
       NWVOL_TOTAL_BLKS     INTEGER,
       NWVOL_BLK_SECTORS    INTEGER,
       NWVOL_AVAIL_BLKS     INTEGER,
       NWVOL_DIR_SLOTS      INTEGER,
       NWVOL_AVAIL_SLOTS    INTEGER,
       NWVOL_IS_REMOVABLE   VARCHAR2(16),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT NWVOLS_PK PRIMARY KEY(COMPUTER_SYS_ID,NWVOL_NAME),
         CONSTRAINT NWVOLS_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER NWVOLS_TR
       BEFORE UPDATE ON NW_VOLS
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE NW_SERVER;
CREATE TABLE NW_SERVER (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       NW_DEV_NAME          VARCHAR2(32),
       NW_VERS              INTEGER,
       NW_SUB_VERS          INTEGER,
       NW_MAX_CONNS         INTEGER,
       NW_MAX_VOLS          INTEGER,
       NW_REVISION_LEVEL    INTEGER,
       NW_SFT_LEVEL         INTEGER,
       NW_TTS_LEVEL         INTEGER,
       NW_MAX_CONNS_USED    INTEGER,
       NW_ACCOUNTING_VERS   INTEGER,
       NW_VAP_VERS          INTEGER,
       NW_QUEING_VERS       INTEGER,
       NW_PRINTSERVR_VERS   INTEGER,
       NW_VIRT_CONS         INTEGER,
       NW_SEC_LEVEL         INTEGER,
       NW_INET_BRG_SUPP     INTEGER,
       NW_CLIB_MAJOR_VERS   INTEGER,
       NW_CLIB_MINOR_VERS   INTEGER,
       NW_CLIB_REVISION     INTEGER,
       NW_SER_NUM           CHAR(12),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT NWSERVER_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT NWSERVER_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER NWSERVER_TR
       BEFORE UPDATE ON NW_SERVER
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE FILE_PATH CASCADE CONSTRAINTS;
CREATE TABLE FILE_PATH (
       FILE_PATH_ID         VARCHAR2(32)  NOT NULL,
       PATH                 VARCHAR2(254),
         CONSTRAINT FILEPATH_PK PRIMARY KEY(FILE_PATH_ID))
;

DROP TABLE T_FILE_PATH;
CREATE GLOBAL TEMPORARY TABLE T_FILE_PATH (
       FILE_PATH_ID         VARCHAR2(32)  NOT NULL,
       PATH                 VARCHAR2(254))
       ON COMMIT DELETE ROWS
;

DROP TABLE FILE_DESC CASCADE CONSTRAINTS;
CREATE TABLE FILE_DESC (
       FILE_DESC_ID         VARCHAR2(32)  NOT NULL,
       FILE_NAME            VARCHAR2(254),
       FILE_SIZE            INTEGER,
       FILE_SIZE_KB         INTEGER,
       FILE_COMMENTS        VARCHAR2(254),
       FILE_INTERNAL_NAME     VARCHAR2(128),
       FILE_PRODUCT_NAME      VARCHAR2(128),
       FILE_COMPANY_NAME      VARCHAR2(128),
       FILE_LEG_COPYRIGHT   VARCHAR2(254),
       FILE_PROD_VERSION   VARCHAR2(128),
       FILE_DESCRIPTION       VARCHAR2(254),
       FILE_LEG_TRADEMARK  VARCHAR2(128),
       FILE_PRIVATE_BUILD     VARCHAR2(128),
       FILE_VERSION           VARCHAR2(128),
       FILE_ORIG_FILENAME VARCHAR2(128),
       FILE_SPECIAL_BUILD     VARCHAR2(128),
         CONSTRAINT FILEDESC_PK PRIMARY KEY(FILE_DESC_ID))
;

DROP TABLE T_FILE_DESC;
CREATE GLOBAL TEMPORARY TABLE T_FILE_DESC (
       FILE_DESC_ID         VARCHAR2(32)  NOT NULL,
       FILE_NAME            VARCHAR2(254),
       FILE_SIZE            INTEGER,
       FILE_SIZE_KB         INTEGER,
       FILE_COMMENTS        VARCHAR2(254),
       FILE_INTERNAL_NAME     VARCHAR2(128),
       FILE_PRODUCT_NAME      VARCHAR2(128),
       FILE_COMPANY_NAME      VARCHAR2(128),
       FILE_LEG_COPYRIGHT   VARCHAR2(254),
       FILE_PROD_VERSION   VARCHAR2(128),
       FILE_DESCRIPTION       VARCHAR2(254),
       FILE_LEG_TRADEMARK  VARCHAR2(128),
       FILE_PRIVATE_BUILD     VARCHAR2(128),
       FILE_VERSION           VARCHAR2(128),
       FILE_ORIG_FILENAME VARCHAR2(128),
       FILE_SPECIAL_BUILD     VARCHAR2(128),
         CONSTRAINT FILEDESC_T_PK PRIMARY KEY (FILE_DESC_ID))
       ON COMMIT DELETE ROWS
;

DROP TABLE UNMATCHED_FILES;
CREATE TABLE UNMATCHED_FILES (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       FILE_DESC_ID         VARCHAR2(32)  NOT NULL,
       INST_PATH_ID         VARCHAR2(32)  NOT NULL,
       FILE_NAME            VARCHAR2(254),
       FILE_SIZE            INTEGER,
       FILE_PATH            VARCHAR2(254),
       CREATED_TIME         DATE,
       MODIFIED_TIME        DATE,
       ACCESSED_TIME        DATE,
       FILE_PERMISSIONS     CHAR(9),
       FILE_OWNER           VARCHAR2(32),
       FILE_GROUP           VARCHAR2(32),
       CHECKSUM_QUICK       CHAR(8),
       CHECKSUM_CRC32       CHAR(8),
       CHECKSUM_MD5         VARCHAR2(32),
       MEM_LOCATION         VARCHAR2(32),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT UNMATCHEDFILES_PK PRIMARY KEY(COMPUTER_SYS_ID,FILE_DESC_ID,INST_PATH_ID),
         CONSTRAINT UNMATCHEDFILES_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT INSTPATH_FK FOREIGN KEY(INST_PATH_ID)
           REFERENCES FILE_PATH(FILE_PATH_ID),
         CONSTRAINT FILEDESC_FK FOREIGN KEY(FILE_DESC_ID)
           REFERENCES FILE_DESC(FILE_DESC_ID))
;
CREATE OR REPLACE TRIGGER UNMATCHEDFILES_TR
       BEFORE UPDATE ON UNMATCHED_FILES
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE NATIV_SWARE CASCADE CONSTRAINTS;
CREATE TABLE NATIV_SWARE (
       NATIV_ID             VARCHAR2(32)  NOT NULL,
       PACKAGE_NAME         VARCHAR2(128),
       PACKAGE_VERS         VARCHAR2(128),
       PUBLISHER            VARCHAR2(128),
       PACKAGE_ID           VARCHAR2(64),
         CONSTRAINT NATIVSWARE_PK PRIMARY KEY(NATIV_ID))
;

DROP TABLE T_NATIV_SWARE;
CREATE GLOBAL TEMPORARY TABLE T_NATIV_SWARE (
       NATIV_ID             VARCHAR2(32)  NOT NULL,
       PACKAGE_NAME         VARCHAR2(64),
       PACKAGE_VERS         VARCHAR2(128),
       PUBLISHER            VARCHAR2(128),
       PACKAGE_ID           VARCHAR2(64))
       ON COMMIT DELETE ROWS
;

DROP TABLE INST_NATIV_SWARE;
CREATE TABLE INST_NATIV_SWARE (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       NATIV_ID             VARCHAR2(32)  NOT NULL,
       FILE_PATH            VARCHAR2(254),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTNATIVSWARE_PK PRIMARY KEY(COMPUTER_SYS_ID,NATIV_ID),
         CONSTRAINT INSTNATIVSWARE_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT NATIVSWARE_FK FOREIGN KEY(NATIV_ID)
           REFERENCES NATIV_SWARE(NATIV_ID))
;
CREATE OR REPLACE TRIGGER INSTNATIVSWARE_TR
       BEFORE UPDATE ON INST_NATIV_SWARE
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE HEADER_INFO CASCADE CONSTRAINTS;
CREATE TABLE HEADER_INFO (
       HEADER_ID            VARCHAR2(32)  NOT NULL,
       HEADER_NAME          VARCHAR2(128),
       HEADER_VERS          VARCHAR2(128),
       HEADER_PUBLISHER     VARCHAR2(128),
         CONSTRAINT HEADERINFO_PK PRIMARY KEY(HEADER_ID))
;

DROP TABLE T_HEADER_INFO;
CREATE GLOBAL TEMPORARY TABLE T_HEADER_INFO (
       HEADER_ID            VARCHAR2(32)  NOT NULL,
       HEADER_NAME          VARCHAR2(128),
       HEADER_VERS          VARCHAR2(128),
       HEADER_PUBLISHER     VARCHAR2(128))
       ON COMMIT DELETE ROWS
;

DROP TABLE INST_HEADER_INFO;
CREATE TABLE INST_HEADER_INFO (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       HEADER_ID            VARCHAR2(32)  NOT NULL,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTHEADERINFO_PK PRIMARY KEY(COMPUTER_SYS_ID,HEADER_ID),
         CONSTRAINT INSTHEADERINFO_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT HEADERINFO_FK FOREIGN KEY(HEADER_ID)
           REFERENCES HEADER_INFO(HEADER_ID))
;
CREATE OR REPLACE TRIGGER INSTHEADERINFO_TR
       BEFORE UPDATE ON INST_HEADER_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE PTF_INFO;
CREATE TABLE PTF_INFO (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PRODUCT_ID           CHAR(7)       NOT NULL,
       PTF_ID               CHAR(7)       NOT NULL,
       PTF_STATUS           VARCHAR2(37),
       STATUS_DATE          CHAR(8),
       STATUS_TIME          CHAR(8),
       TYPE                 VARCHAR2(18),
       UNATTN_IPL_ACTION    VARCHAR2(34),
       LANG_FEATURE         CHAR(8),
       IPL_SOURCE           CHAR(8),
       SYS_NAME             VARCHAR2(8),
       ON_ORDER             CHAR(1),
       PTF_SAVE_FILE        CHAR(1),
       OPTIONAL_PART        CHAR(4),
       SUPERSEDING_PTF      CHAR(7),
       RELEASE              CHAR(6),
       TGT_OS400_RELEASE    CHAR(6),
       ACTION_PENDING       VARCHAR2(15),
       ACTION_REQUIRED      VARCHAR2(15),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT PTFINFO_PK PRIMARY KEY(COMPUTER_SYS_ID,PRODUCT_ID,PTF_ID),
         CONSTRAINT PTFINFO_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER PTFINFO_TR
       BEFORE UPDATE ON PTF_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/


DROP TABLE INST_SERVICE_INFO;
CREATE TABLE INST_SERVICE_INFO (
       COMPUTER_SYS_ID      VARCHAR(64)   NOT NULL,
       SNAME                VARCHAR(128)  NOT NULL,
       DNAME             VARCHAR(64),
       SDESC             VARCHAR(256),
       SPATH_NAME        VARCHAR(128),
       STYPE             VARCHAR(64),
       SSTARTED          VARCHAR(16),
       SSTART_MODE       VARCHAR(16),
       SDISPLAY_NAME     VARCHAR(64),
       SSTATE            VARCHAR(16),
       SSTATUS           VARCHAR(16),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTSERVICE_PK PRIMARY KEY(COMPUTER_SYS_ID,SNAME),
         CONSTRAINT INSTSERVICE_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;

CREATE OR REPLACE TRIGGER INST_SINFO_TR
       BEFORE UPDATE ON INST_SERVICE_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE LPAR;
CREATE TABLE LPAR (
       COMPUTER_SYS_ID        VARCHAR(64)  NOT NULL,
       LPARID                 VARCHAR(32),
       SHARED_POOL_ID         VARCHAR(16),
       NODE_CAPACITY          VARCHAR(64),
       NODECAP_IN_CORES       VARCHAR(64),
       LPAR_CAPACITY          VARCHAR(64),
       LPARCAP_IN_CORES       VARCHAR(64),
       SHARED_POOL_CAPACITY   VARCHAR(64),
       SHAREDPC_IN_CORES      VARCHAR(64),
       PHYS_SHAREDPC          VARCHAR(64),
       PHYS_SHAREDPC_CORES    VARCHAR(64),
       LPAR_ONLINE_VP_COUNT   VARCHAR(64),
       LPAR_IS_SHARED_TYPE    VARCHAR(1),
       LPAR_IS_CAPPED         VARCHAR(1),
       LPAR_ENTITLEMENT	      VARCHAR(64),
       LPAR_MIN_VP_COUNT      VARCHAR (64),
       LPAR_MAX_VP_COUNT      VARCHAR(64),
       LPAR_MIN_CAPACITY      VARCHAR(64),
       LPAR_MAX_CAPACITY      VARCHAR(64),
       LPAR_IDLE_CP_WEIGHT    VARCHAR(64),
       SMT_IS_ENABLED         VARCHAR(1),
       NODE_ACT_PROC_COUNT    VARCHAR(64),
       SERIAL_NUMBER          VARCHAR(64),
       RECORD_TIME            DATE          DEFAULT SYSDATE,
         CONSTRAINT LPAR_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT LPAR_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;


CREATE OR REPLACE TRIGGER LPAR_TR
       BEFORE UPDATE ON LPAR
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE FILE_FILTER;
CREATE TABLE FILE_FILTER (
       FILE_NAME            VARCHAR2(254) NOT NULL,
         CONSTRAINT FILEFILTER_PK PRIMARY KEY(FILE_NAME))
;

DROP TABLE QUERY_VIEWS;
CREATE TABLE QUERY_VIEWS (
       VIEW_NAME            VARCHAR2(64)  NOT NULL,
         CONSTRAINT QUERYVIEWS_PK PRIMARY KEY(VIEW_NAME))
;

DROP TABLE QUERY_DOMAINS;
CREATE TABLE QUERY_DOMAINS (
       TABLE_NAME           VARCHAR2(64)  NOT NULL,
       COLUMN_NAME          VARCHAR2(64)  NOT NULL,
       DOMAIN_VALUE         VARCHAR2(64)  NOT NULL,
         CONSTRAINT QUERYDOMAINS_PK PRIMARY KEY(TABLE_NAME,COLUMN_NAME,DOMAIN_VALUE))
;

DROP TABLE TAG;
CREATE TABLE TAG (
       TAG_NAME             VARCHAR2(64)  NOT NULL,
       TAG_TYPE             VARCHAR2(16)  NOT NULL,
       STATUS               VARCHAR2(16),
         CONSTRAINT TAG_PK PRIMARY KEY(TAG_NAME,TAG_TYPE))
;

-- drop table OID;
create table OID
(
    LAST_ID             integer             not null,
    TABLE_NAME          varchar2(40)        not null,
    BLOCK_SIZE          integer             not null,
         CONSTRAINT OID_PK PRIMARY KEY(TABLE_NAME)
);

-- drop table SIGNATURE;
-- drop table PLATFORM;

create table PLATFORM 
(
    ID                  integer             not null,
    NAME                varchar2(50)        not null,
    LAST_MODIFIED       date                default SYSDATE not null,
         CONSTRAINT PLATFORM_PK PRIMARY KEY(ID),
         CONSTRAINT PLATFORM_UK UNIQUE (NAME)
)
;

CREATE OR REPLACE TRIGGER PLATFORM_TR1
       BEFORE UPDATE ON PLATFORM
       FOR EACH ROW
       BEGIN
         :NEW.LAST_MODIFIED := SYS_EXTRACT_UTC(CURRENT_TIMESTAMP);
       END;
/

CREATE OR REPLACE TRIGGER PLATFORM_TR2
    BEFORE INSERT ON PLATFORM
    FOR EACH ROW
        BEGIN
         :NEW.LAST_MODIFIED := SYS_EXTRACT_UTC(CURRENT_TIMESTAMP);
        END;
/

create table SIGNATURE 
(
    ID                  integer             not null,
    NAME                varchar2(254)       not null,
    FILE_SIZE           integer             not null,
    PLATFORM            varchar2(50)        not null,
    SIG_VALUE           varchar2(254),   
    SIG_TYPE            integer             default 0 not null,
    SIG_SCOPE           integer             default 0 not null,
    ENABLED             integer             default 1 not null,
    DESCRIPTION         varchar2(254),
    VERSION             varchar2(64),
    IBM_SOURCE          integer             default 1  not null,
    LAST_MODIFIED       date                default sysdate not null,  
         CONSTRAINT SIG_PK PRIMARY KEY(ID),
         CONSTRAINT SIG_FK FOREIGN KEY(PLATFORM) REFERENCES PLATFORM(NAME)
);

create unique index SIG_UK on SIGNATURE
(
    NAME,
    FILE_SIZE,
    PLATFORM,
    SIG_VALUE
);

CREATE OR REPLACE TRIGGER SIGNATURE_TR1
       BEFORE UPDATE ON SIGNATURE
       FOR EACH ROW
       BEGIN
         :NEW.LAST_MODIFIED := SYS_EXTRACT_UTC(CURRENT_TIMESTAMP);
       END;
/

CREATE OR REPLACE TRIGGER SIGNATURE_TR2
    BEFORE INSERT ON SIGNATURE
    FOR EACH ROW
        BEGIN
         :NEW.LAST_MODIFIED := SYS_EXTRACT_UTC(CURRENT_TIMESTAMP);
        END;
/

-- drop table INVENTORY_SIG;
create table INVENTORY_SIG 
(
    ID                  integer             not null,
    BODY                clob                not null,
         CONSTRAINT INV_SIG_PK PRIMARY KEY(ID)
)
;

CREATE OR REPLACE TRIGGER INVENTORY_SIG_T1
       AFTER INSERT ON INVENTORY_SIG
       FOR EACH ROW
       BEGIN
         UPDATE SIGNATURE
         SET ID = ID 
         WHERE ID = :NEW.ID;
       END;
/

CREATE OR REPLACE TRIGGER INVENTORY_SIG_T2
       AFTER UPDATE ON INVENTORY_SIG
       FOR EACH ROW
       BEGIN
         UPDATE SIGNATURE
         SET ID = ID 
         WHERE ID = :NEW.ID;
       END;
/

CREATE OR REPLACE TRIGGER INVENTORY_SIG_T3
       AFTER DELETE ON INVENTORY_SIG
       FOR EACH ROW
       BEGIN
         UPDATE SIGNATURE
         SET ID = ID 
         WHERE ID = :OLD.ID;
       END;
/

-- drop table CONTROL;
create table CONTROL
(
    NAME                varchar(40)        not null,
    CTRL_VALUE          varchar(60)        not null,
        CONSTRAINT CONTROL_PK PRIMARY KEY(NAME)
)
;

insert into PLATFORM (ID, NAME) values (1, 'Windows');
insert into PLATFORM (ID, NAME) values (2, 'Linux');
insert into PLATFORM (ID, NAME) values (3, 'AIX');
insert into PLATFORM (ID, NAME) values (4, 'HPUX');
insert into PLATFORM (ID, NAME) values (5, 'Solaris');
insert into PLATFORM (ID, NAME) values (6, 'i5/OS');
insert into PLATFORM (ID, NAME) values (7, 'Unix');
insert into PLATFORM (ID, NAME) values (9, 'JVM');

INSERT INTO oid SELECT NVL (max(id),0), 'swcat.signature', 1 FROM signature;
INSERT INTO oid SELECT NVL (max(id),0), 'swcat.platform',  1 FROM platform;

INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('CATALOG_INSTALL', 
        TO_CHAR(SYS_EXTRACT_UTC(CURRENT_TIMESTAMP), 'YYYY-MM-DD HH24-MI-SS') || '.0');

INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('DATABASE_VERSION', '2.2');
INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('CATALOG_UPDATE', '2002-05-01 12:00:00.000000');
INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('CATALOG_ID', SUBSTR(TO_CHAR(SYSTIMESTAMP, 'SSMIFF'), 1, 6));
    
INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('CATALOG_LAST_MODIFIED', 
           TO_CHAR(SYS_EXTRACT_UTC(CURRENT_TIMESTAMP), 'YYYY-MM-DD HH24-MI-SS') || '.0');

INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('CAT_MGR_ERROR_CONTROL_FIELD', '0');

INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('ITLM_INSTALLED', '0');
INSERT INTO CONTROL (NAME, CTRL_VALUE) VALUES 
    ('ITCM_INSTALLED', '1');
    
-----------------------------------------------------------------------------------

-- drop table SWARE_SIG_MAP;
create table SWARE_SIG_MAP
(
    ID                  integer             not null,
    FILE_DESC_ID        varchar2(32)        not null,
    OS_NAME             varchar2(64)        not null,
         CONSTRAINT SWARESIGMAP_PK PRIMARY KEY(FILE_DESC_ID, OS_NAME)
);

-- drop table MATCHED_SWARE; 
CREATE TABLE MATCHED_SWARE (
       COMPUTER_SYS_ID      VARCHAR2(64)    NOT NULL,
       SWARE_SIG_ID         integer         NOT NULL,
       MD5_ID               VARCHAR2(128)   NOT NULL,
       RECORD_TIME          DATE            DEFAULT SYSDATE,
         CONSTRAINT MATCHEDSWARE_PK PRIMARY KEY(COMPUTER_SYS_ID,SWARE_SIG_ID,MD5_ID),
         CONSTRAINT MATCHEDSWARE_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;

CREATE OR REPLACE TRIGGER MATCHEDSWARE_TR
       BEFORE UPDATE ON MATCHED_SWARE
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

-- drop table MSWARE_DESC;
CREATE TABLE MSWARE_DESC (
       COMPUTER_SYS_ID      VARCHAR(64)   NOT NULL,
       SWARE_SIG_ID         INTEGER       NOT NULL,
       MD5_ID               VARCHAR(128)  NOT NULL,    
       SWARE_SIG_PATH       VARCHAR(1024) NOT NULL,    
         CONSTRAINT MSWDESC_PK PRIMARY KEY(COMPUTER_SYS_ID, SWARE_SIG_ID, MD5_ID),
         CONSTRAINT MSWDESC_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;

-- drop table SIG_PACKAGE;
CREATE TABLE SIG_PACKAGE (
       SIG_PACKAGE_ID       VARCHAR2(32)    NOT NULL,
       SWARE_SIG_ID         integer         NOT NULL,
       SWARE_DESC           VARCHAR2(128),
       SWARE_VERS           VARCHAR2(64),
       RECORD_TIME          DATE            DEFAULT SYSDATE,
         CONSTRAINT SIGPACKAGE_PK PRIMARY KEY(SIG_PACKAGE_ID,SWARE_SIG_ID))
;

CREATE OR REPLACE TRIGGER SIGPACKAGE_TR
       BEFORE UPDATE ON SIG_PACKAGE
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

-- drop table SIG_SP_MAP;
CREATE TABLE SIG_SP_MAP(
       SWARE_SIG_ID         integer         NOT NULL,
       SWARE_NAME           VARCHAR2(128)   NOT NULL,
       SWARE_VERS           VARCHAR2(64)    NOT NULL,
       MAP_STATUS           CHAR(1),
         CONSTRAINT SIGSPMAP_PK PRIMARY KEY(SWARE_SIG_ID,SWARE_NAME,SWARE_VERS))
;

commit;

-----------------------------------------------------------------------------------

create or replace view MATCH_SWARE_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SIGNATURE.DESCRIPTION as SWARE_DESC,
    SIGNATURE.VERSION as SWARE_VERS,
    SIGNATURE.NAME as SWARE_NAME,
    SIGNATURE.FILE_SIZE as SWARE_SIZE,
    to_char(UNMATCHED_FILES.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    SIGNATURE, UNMATCHED_FILES, COMPUTER, SWARE_SIG_MAP
where
    UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    SIGNATURE.ID = SWARE_SIG_MAP.ID
and
    SWARE_SIG_MAP.FILE_DESC_ID = UNMATCHED_FILES.FILE_DESC_ID
and
    SIGNATURE.ENABLED = 1
;

create or replace view INST_SWARE_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SIGNATURE.DESCRIPTION as SWARE_DESC,
    SIGNATURE.VERSION as SWARE_VERS,
    SIGNATURE.NAME as SWARE_NAME,
    SIGNATURE.FILE_SIZE as SWARE_SIZE,
    MSWARE_DESC.SWARE_SIG_PATH,
    to_char(MATCHED_SWARE.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    MATCHED_SWARE
        JOIN COMPUTER ON
          MATCHED_SWARE.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
        JOIN SIGNATURE ON
          MATCHED_SWARE.SWARE_SIG_ID = SIGNATURE.ID
        LEFT JOIN MSWARE_DESC ON
          MATCHED_SWARE.COMPUTER_SYS_ID = MSWARE_DESC.COMPUTER_SYS_ID and
          MATCHED_SWARE.SWARE_SIG_ID = MSWARE_DESC.SWARE_SIG_ID and
          MATCHED_SWARE.MD5_ID = MSWARE_DESC.MD5_ID
where
    SIGNATURE.ENABLED = 1
;

create or replace view PACKAGE_FILE_VIEW
as
select
    SIG_PACKAGE.SIG_PACKAGE_ID,
    SIG_PACKAGE.SWARE_SIG_ID,
    SIG_PACKAGE.SWARE_DESC,
    SIG_PACKAGE.SWARE_VERS,
    SIGNATURE.NAME as SWARE_NAME,
    SIGNATURE.FILE_SIZE as SWARE_SIZE,
    SIGNATURE.PLATFORM,    
    to_char(SIG_PACKAGE.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    SIG_PACKAGE,SIGNATURE
where
    SIG_PACKAGE.SWARE_SIG_ID = SIGNATURE.ID
and
    SIGNATURE.ENABLED = 1
;

create or replace view SIG_PACKAGE_COUNT
as
select
    SIG_PACKAGE.SIG_PACKAGE_ID,
    count(*) as NUM
from
    SIG_PACKAGE,SIGNATURE
where
    SIG_PACKAGE.SWARE_SIG_ID = SIGNATURE.ID
and
    SIGNATURE.ENABLED = 1
group by
    SIG_PACKAGE.SIG_PACKAGE_ID
;

create or replace view MATCHED_SIG_COUNT
as
select distinct
    MATCHED_SWARE.COMPUTER_SYS_ID,
    SIG_PACKAGE.SIG_PACKAGE_ID,
    SIG_PACKAGE.SWARE_DESC,
    SIG_PACKAGE.SWARE_VERS,
    count(*) as NUM
from
    SIG_PACKAGE,MATCHED_SWARE
where
    SIG_PACKAGE.SWARE_SIG_ID = MATCHED_SWARE.SWARE_SIG_ID
group by
    MATCHED_SWARE.COMPUTER_SYS_ID, 
    SIG_PACKAGE.SIG_PACKAGE_ID, 
    SIG_PACKAGE.SWARE_DESC, 
    SIG_PACKAGE.SWARE_VERS
;

create or replace view SIG_PACKAGE_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    MATCHED_SIG_COUNT.SWARE_DESC,
    MATCHED_SIG_COUNT.SWARE_VERS
from
    COMPUTER,SIG_PACKAGE_COUNT,MATCHED_SIG_COUNT
where
    COMPUTER.COMPUTER_SYS_ID = MATCHED_SIG_COUNT.COMPUTER_SYS_ID
and
    SIG_PACKAGE_COUNT.SIG_PACKAGE_ID=MATCHED_SIG_COUNT.SIG_PACKAGE_ID
and
    SIG_PACKAGE_COUNT.NUM = MATCHED_SIG_COUNT.NUM
;

create or replace view CHECK_PACKAGES
as
select
    SIG_PACKAGE.SIG_PACKAGE_ID,
    SIG_PACKAGE.SWARE_SIG_ID,
    SIG_PACKAGE.SWARE_DESC,
    SIG_PACKAGE.SWARE_VERS,
    SIGNATURE.PLATFORM
from
    SIG_PACKAGE, SIGNATURE
where
    SIG_PACKAGE.SWARE_SIG_ID = SIGNATURE.ID and
    not exists
    (select 'X'
    from SIGNATURE
    where SIG_PACKAGE.SWARE_SIG_ID = SIGNATURE.ID
    and SIGNATURE.ENABLED = 1)
;

create or replace view CHECK_SIG
as
select
    SIGNATURE.ID,   
    SWARE_SIG_MAP.FILE_DESC_ID,
    SWARE_SIG_MAP.OS_NAME,
    PLATFORM,
    SIG_VALUE, 
    SIG_TYPE, 
    SIG_SCOPE, 
    ENABLED,   
    DESCRIPTION,
    VERSION,  
    IBM_SOURCE,
    NAME
from
    SWARE_SIG_MAP, SIGNATURE
where
    SWARE_SIG_MAP.ID = SIGNATURE.ID
;

create or replace view NOSIG_FILES_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    FILE_DESC.FILE_NAME,
    FILE_DESC.FILE_SIZE
from
    UNMATCHED_FILES,FILE_DESC,COMPUTER
where
    UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    UNMATCHED_FILES.FILE_DESC_ID = FILE_DESC.FILE_DESC_ID
and
    not exists
    (select 'X'
    from SIGNATURE, SWARE_SIG_MAP, COMPUTER
    where 
        UNMATCHED_FILES.FILE_DESC_ID = SWARE_SIG_MAP.FILE_DESC_ID
    and
        SIGNATURE.ID = SWARE_SIG_MAP.ID
    and
        COMPUTER.OS_NAME = SWARE_SIG_MAP.OS_NAME
    and
        UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
    and 
        SIGNATURE.ENABLED = 1)
;    

create or replace view SWARE_MATCH_QUICK
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SIGNATURE.DESCRIPTION as SWARE_DESC,
    SIGNATURE.VERSION as SWARE_VERS,
    SIGNATURE.NAME as SWARE_NAME,
    SIGNATURE.FILE_SIZE as SWARE_SIZE,
    UNMATCHED_FILES.CHECKSUM_QUICK,
    UNMATCHED_FILES.RECORD_TIME
from
    COMPUTER, SIGNATURE,UNMATCHED_FILES, SWARE_SIG_MAP
where
    SIGNATURE.ENABLED = 1
and
    SIGNATURE.ID = SWARE_SIG_MAP.ID
and
    COMPUTER.OS_NAME = SWARE_SIG_MAP.OS_NAME
and
    UNMATCHED_FILES.FILE_DESC_ID = SWARE_SIG_MAP.FILE_DESC_ID
and
    UNMATCHED_FILES.CHECKSUM_QUICK <> ''
and
    UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view SWARE_MATCH_CRC32
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SIGNATURE.DESCRIPTION as SWARE_DESC,
    SIGNATURE.VERSION as SWARE_VERS,
    SIGNATURE.NAME as SWARE_NAME,
    SIGNATURE.FILE_SIZE as SWARE_SIZE,
    UNMATCHED_FILES.CHECKSUM_CRC32,
    UNMATCHED_FILES.RECORD_TIME
from
    COMPUTER, SIGNATURE,UNMATCHED_FILES, SWARE_SIG_MAP
where
    SIGNATURE.ENABLED = 1
and
    SIGNATURE.ID = SWARE_SIG_MAP.ID
and
    COMPUTER.OS_NAME = SWARE_SIG_MAP.OS_NAME
and
    UNMATCHED_FILES.FILE_DESC_ID = SWARE_SIG_MAP.FILE_DESC_ID
and
    UNMATCHED_FILES.CHECKSUM_CRC32 <> ''
and
    UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view SWARE_MATCH_MD5
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SIGNATURE.DESCRIPTION as SWARE_DESC,
    SIGNATURE.VERSION as SWARE_VERS,
    SIGNATURE.NAME as SWARE_NAME,
    SIGNATURE.FILE_SIZE as SWARE_SIZE,
    UNMATCHED_FILES.CHECKSUM_MD5,
    UNMATCHED_FILES.RECORD_TIME
from
    COMPUTER, SIGNATURE,UNMATCHED_FILES, SWARE_SIG_MAP
where
    SIGNATURE.ENABLED = 1
and
    SIGNATURE.ID = SWARE_SIG_MAP.ID
and
    COMPUTER.OS_NAME = SWARE_SIG_MAP.OS_NAME
and
    UNMATCHED_FILES.FILE_DESC_ID = SWARE_SIG_MAP.FILE_DESC_ID
and
    UNMATCHED_FILES.CHECKSUM_MD5 <> ''
and
    UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view SP_SIG_VIEW
as
select
    SIG_SP_MAP.SWARE_NAME,
    SIG_SP_MAP.SWARE_VERS,
    SIG_SP_MAP.SWARE_SIG_ID,
    SIGNATURE.NAME as SWARE_FILENAME,
    SIGNATURE.FILE_SIZE as SWARE_FILESIZE,
    SIG_SP_MAP.MAP_STATUS,
    SIGNATURE.ENABLED as SIG_STATUS
from
    SIG_SP_MAP, SIGNATURE
where
    SIG_SP_MAP.SWARE_SIG_ID = SIGNATURE.ID
;

commit;

DROP TABLE LAST_SIG_UPDATE;
CREATE TABLE LAST_SIG_UPDATE (
       UPDATE_TABLE         CHAR(1)       NOT NULL,
       LAST_UPDATE          INTEGER,
         CONSTRAINT LASTSIGUPDATE_PK PRIMARY KEY(UPDATE_TABLE))
;
-- last update to LAST_SIG_UPDATE
insert into LAST_SIG_UPDATE (UPDATE_TABLE,LAST_UPDATE) values ('0',0)
;
-- last update to FILE_FILTER
insert into LAST_SIG_UPDATE (UPDATE_TABLE,LAST_UPDATE) values ('1',0)
;
-- endpoint record matching flag
insert into LAST_SIG_UPDATE (UPDATE_TABLE,LAST_UPDATE) values ('3',0)
;
-- last update to SIG_PACKAGE
insert into LAST_SIG_UPDATE (UPDATE_TABLE,LAST_UPDATE) values ('4',0)
;
-- last update to SIG_PACKAGE
insert into LAST_SIG_UPDATE (UPDATE_TABLE,LAST_UPDATE) values ('t',0)
;
-- no mvs db vendor flag
insert into LAST_SIG_UPDATE (UPDATE_TABLE,LAST_UPDATE) values ('d',1)
;

DROP TABLE SCHEMA_VERS;
CREATE TABLE SCHEMA_VERS (
       DATABASE_VERS        VARCHAR2(32)  NOT NULL,
       SCHEMA_CHG_TIME      DATE          NOT NULL,
       SCHEMA_CHG_TYPE      VARCHAR2(32)  NOT NULL,
       CHG_FILE_NAME        VARCHAR2(64),
       CHG_DESC             VARCHAR2(64),
         CONSTRAINT SCHEMAVERS_PK PRIMARY KEY(DATABASE_VERS,SCHEMA_CHG_TIME,SCHEMA_CHG_TYPE))
;

DROP TABLE PRISTINE_H_INSTALL;
CREATE TABLE PRISTINE_H_INSTALL (
       MACHINE              VARCHAR2 (254)NOT NULL,
       OS_NAME              VARCHAR2 (32) NOT NULL,
       OS_VERS              VARCHAR2 (32) NOT NULL,
       STATE                INTEGER       NOT NULL,
       START_TIME           DATE          NOT NULL,
       END_TIME             DATE          NOT NULL)
;

DROP TABLE PUBLISHED_PROFILES ;
CREATE TABLE PUBLISHED_PROFILES (
    COMPUTER_SYS_ID   VARCHAR2(64) NOT NULL,
    WEB_INV_NAME        VARCHAR2(128) NOT NULL,
    WEB_INV_VERS        VARCHAR2(64) NOT NULL,
    INV_NAME                VARCHAR2(255), 
         CONSTRAINT PUBPROFINV_PK PRIMARY KEY(COMPUTER_SYS_ID, WEB_INV_NAME, WEB_INV_VERS))
;

DROP TABLE HISTORY_COLUMNS;
CREATE TABLE HISTORY_COLUMNS (
       HISTORY_TABLE      VARCHAR(64)  NOT NULL,
       IS_FOR_UPDATE      INTEGER  NOT NULL,
         CONSTRAINT HISTORYCOLUMNS_PK PRIMARY KEY(HISTORY_TABLE))
;

----------------------
-- PERVASIVE TABLES --
----------------------
DROP TABLE WINCE_CFG;
CREATE TABLE WINCE_CFG (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PPP_ACCESS_PT        VARCHAR2(128),
       PRIMARY_DNS          VARCHAR2(128),
       SECONDARY_DNS        VARCHAR2(128),
       POP3_SERVER          VARCHAR2(128),
       SMTP_SERVER          VARCHAR2(128),
       ST_PAGE              VARCHAR2(128),
       BROWSER_PROXY_ADDR   VARCHAR2(128),
       BROWSER_PROXY_PORT   INTEGER,
       PCT_ENABLE           CHAR(8),
       SSL2_ENABLE          CHAR(8),
       SSL3_ENABLE          CHAR(8),
       PPP_USERID           VARCHAR2(128),
       POP3_USERID          VARCHAR2(128),
       MAIL_ADDR            VARCHAR2(128),
       SSL_ENABLE           VARCHAR2(8),
       MGMT_SERVER_ADDR     VARCHAR2(128),
       POLLING_TIMER        INTEGER,
       AGENT_RUN_MODE       CHAR(8),
       AGENT_PROXY_ENABLE   CHAR(8),
       AGENT_PROXY_PORT     INTEGER,
       AGENT_PROXY_ADDR     VARCHAR2(128),
       SUB_USERID           VARCHAR2(128),
       POLLING_SCHEDULE     VARCHAR2(255),
       SCHED_OFFSET_MAX     INTEGER,
       SAVE_PASSWORD        VARCHAR2(8),
       AUTH_SERVER          VARCHAR2(8),
       MAX_LOG_SIZE         INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT WINCECFG_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT WINCECFG_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER WINCECFG_TR
       BEFORE UPDATE ON WINCE_CFG
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE PALM_CFG;
CREATE TABLE PALM_CFG (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       PRESET_COUNTRY_ID    INTEGER,
       TIME_FORMAT          INTEGER,
       DATE_FORMAT          INTEGER,
       LONG_DATE_FORMAT     INTEGER,
       WEEK_ST_DAY          INTEGER,
       NUM_FORMAT           INTEGER,
       SYS_SOUND            INTEGER,
       ALARM_SOUND          INTEGER,
       GAME_SOUND           INTEGER,
       PPP_USER_NAME        VARCHAR2(128),
       PPP_QUERY_DNS        INTEGER,
       PRIMARY_DNS          VARCHAR2(128),
       SECONDARY_DNS        VARCHAR2(128),
       MODEM_PHONE_NUM      VARCHAR2(32),
       SSL_ON               INTEGER,
       PALM_USER_ID         VARCHAR2(128),
       DMS_SERVER_ADDR      VARCHAR2(254),
       DMS_SERVER_PORT      INTEGER,
       PALM_SERVLET_NAME    VARCHAR2(254),
       NET_SVC_NAME         VARCHAR2(128),
       BUFFER_SIZE          INTEGER,
       PROXY_ENABLE         INTEGER,
       PROXY_ADDR           VARCHAR2(128),
       PROXY_PORT           INTEGER,
       SET_DATE_TIME        DATE,
       AUTO_OFF_TIMER       INTEGER,
       ATTACHMENT_OPTION    INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT PALMCFG_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT PALMCFG_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER PALMCFG_TR
       BEFORE UPDATE ON PALM_CFG
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE DEV_INFO;
CREATE TABLE DEV_INFO (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       LAST_SYNC_TIME       DATE,
       LAST_SYNC_STATUS     VARCHAR2(32),
       SYNC_USER_NAME       VARCHAR2(128),
       PROCESSOR_MODEL      VARCHAR2(64),
       NUM_MEM_CARD_SLOT    INTEGER,
       NUM_EXPAND_SLOT      INTEGER,
       CHARACTER_ENCODING   VARCHAR2(64),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT DEVINFO_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT DEVINFO_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER DEVINFO_TR
       BEFORE UPDATE ON DEV_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE BATTERY;
CREATE TABLE BATTERY (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       BATTERY_TYPE         VARCHAR2(32),
       BATTERY_VOLTAGE      INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT BATTERY_PK PRIMARY KEY(COMPUTER_SYS_ID),
         CONSTRAINT BATTERY_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER BATTERY_TR
       BEFORE UPDATE ON BATTERY
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE DEV_CARD CASCADE CONSTRAINTS;
CREATE TABLE DEV_CARD (
       CARD_ID              VARCHAR2(32)  NOT NULL,
       MANUFACTURER         VARCHAR2(128),
       CAPABILITY           VARCHAR2(254),
       CARD_NAME            VARCHAR2(128),
       CARD_VERS            INTEGER,
       ROM_SIZE             INTEGER,
       RAM_SIZE             INTEGER,
       CARD_CLASS           CHAR(1),
    CONSTRAINT DEVCARD_PK PRIMARY KEY(CARD_ID))
;

DROP TABLE INST_DEV_CARD;
CREATE TABLE INST_DEV_CARD (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       CARD_ID              VARCHAR2(32)  NOT NULL,
       CARD_NUM             INTEGER       NOT NULL,
       SER_NUM              VARCHAR2(64),
       CARD_TYPE            VARCHAR2(64),
       FREE_MEM             INTEGER,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTDEVCARD_PK PRIMARY KEY(COMPUTER_SYS_ID,CARD_NUM,CARD_ID),
         CONSTRAINT INSTDEVCARD_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT DEVCARD_FK FOREIGN KEY(CARD_ID)
           REFERENCES DEV_CARD(CARD_ID))
;
CREATE OR REPLACE TRIGGER INSTDEVCARD_TR
       BEFORE UPDATE ON INST_DEV_CARD
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE DB_INFO CASCADE CONSTRAINTS;
CREATE TABLE DB_INFO (
       DB_ID                VARCHAR2(32)  NOT NULL,
       APP_NAME             VARCHAR2(254),
       DB_TYPE              VARCHAR2(18),
       CREATOR_ID           CHAR(8),
       DB_NAME              VARCHAR2(254),
       DB_VERS              CHAR(8),
         CONSTRAINT DBINFO_PK PRIMARY KEY (DB_ID))
;

DROP TABLE INST_DB_INFO;
CREATE TABLE INST_DB_INFO (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       DB_ID                VARCHAR2(32)  NOT NULL,
       DB_PATH              VARCHAR2(128) NOT NULL,
       NUM_RECORD           INTEGER,
       DB_SIZE              INTEGER,
       MEM_LOCATION         VARCHAR2(32),
       CREATED_TIME         DATE,
       MODIFIED_TIME        DATE,
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT INSTDBINFO_PK PRIMARY KEY(COMPUTER_SYS_ID,DB_ID,DB_PATH),
         CONSTRAINT INSTDBINFO_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID),
         CONSTRAINT DBINFO_FK FOREIGN KEY(DB_ID)
           REFERENCES DB_INFO(DB_ID))
;
CREATE OR REPLACE TRIGGER INSTDBINFO_TR
       BEFORE UPDATE ON INST_DB_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE DEVICE;
CREATE TABLE DEVICE (
	COMPUTER_SYS_ID               VARCHAR2(64),
	DEVICE_NAME                   VARCHAR2(255),
	FRIENDLY_NAME                 VARCHAR2(255),
	DEVICE_CLASS_ID               VARCHAR2(18),
	LABEL                         VARCHAR2(255),
	SERIAL_NUMBER                 VARCHAR2(128),
	MAKE                          VARCHAR2(128),	
	MODEL                         VARCHAR2(128),
	DEV_DESCRIPTION               VARCHAR2(255),
	DEVICE_STATUS                 CHAR(1),
	BOOTSTRAPPED                  CHAR(1),
	NEW_DEVICE                    CHAR(1),
	LAST_EVALUATED_TIMESTAMP      DATE,
        JOB_PROFILE_IGNORED           CHAR(1),
  	NOTIFICATION_TYPE             VARCHAR2(32),
	DEVICE_NAME_INUSE             CHAR(1),
        ENROLLED_TIMESTAMP            DATE,
        CREATION_TIMESTAMP            DATE,
	LAST_MODIFIED                 DATE)
;
	
----------------
-- TRM TABLES --
----------------
DROP TABLE TRM_TYPES;
CREATE TABLE TRM_TYPES (
       TYPE                 VARCHAR2(18)  NOT NULL,
       UIMANAGER            VARCHAR2(64)  NOT NULL,
       APPMANAGER           VARCHAR2(64)  NOT NULL,
       EVENTMASK            INTEGER       NOT NULL,
       FLAGS                INTEGER       NOT NULL,
         CONSTRAINT TRMTYPES_PK PRIMARY KEY(TYPE))
;

DROP TABLE TRM_RESOURCES;
CREATE TABLE TRM_RESOURCES (
      ID                    INTEGER       NOT NULL,
      LABEL                 VARCHAR2(128) NOT NULL,
      ADDR                  VARCHAR2(180) NOT NULL,
      MANAGER               VARCHAR2(64)  NOT NULL,
      FLAGS                 INTEGER       NOT NULL,
      TYPE                    VARCHAR2(18)  NOT NULL,
         CONSTRAINT TRMRESOURCES_PK PRIMARY KEY(ID),
         CONSTRAINT label_constr UNIQUE (LABEL,TYPE))
;
CREATE INDEX TRM_RESOURCES_IDX2 ON TRM_RESOURCES (MANAGER);
insert into QUERY_VIEWS (VIEW_NAME) values ('TRM_RESOURCES')
;

DROP TABLE TRM_GROUPS;
CREATE TABLE TRM_GROUPS (
       GROUPID              VARCHAR2(125) NOT NULL,
       RESOURCEID           INTEGER       NOT NULL,
       TYPE                 VARCHAR2(18)  NOT NULL,
         CONSTRAINT TRMGROUPS_PK PRIMARY KEY(GROUPID,RESOURCEID))
;
CREATE INDEX TRM_GROUPS_IDX1 ON TRM_GROUPS (GROUPID);
CREATE INDEX TRM_GROUPS_IDX2 ON TRM_GROUPS (TYPE,RESOURCEID);

DROP TABLE TRM_DISTRIBUTIONS;
CREATE TABLE TRM_DISTRIBUTIONS (
       ID                   INTEGER       NOT NULL,
       RESOURCEID           INTEGER       NOT NULL,
       TYPE                 VARCHAR2(18)  NOT NULL)
;
CREATE INDEX TRM_DIST_IDX1 ON TRM_DISTRIBUTIONS (ID);
CREATE INDEX TRM_DIST_IDX2 ON TRM_DISTRIBUTIONS (TYPE,RESOURCEID);

---------------
-- VIEWS     --
---------------
create or replace view INVENTORYDATA
as
select distinct
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    COMPUTER.COMPUTER_MODEL,
    COMPUTER.COMPUTER_ALIAS,
    COMPUTER.SYS_SER_NUM,
    COMPUTER_SYS_MEM.PHYSICAL_TOTAL_KB,
    COMPUTER_SYS_MEM.PHYSICAL_FREE_KB,
    COMPUTER_SYS_MEM.TOTAL_PAGES,
    COMPUTER_SYS_MEM.FREE_PAGES,
    COMPUTER_SYS_MEM.PAGE_SIZE,
    COMPUTER_SYS_MEM.VIRT_TOTAL_KB,
    COMPUTER_SYS_MEM.VIRT_FREE_KB,
    PROCESSOR.PROCESSOR_MODEL,
    PROCESSOR.CURRENT_SPEED as PROCESSOR_SPEED,
    COMPUTER.OS_NAME,
    COMPUTER.OS_TYPE,
    to_char(COMPUTER.COMPUTER_SCANTIME,'YYYY.MM.DD HH24:MI:SS') as COMPUTER_SCANTIME
from
    COMPUTER,COMPUTER_SYS_MEM,PROCESSOR,INST_PROCESSOR
where
    COMPUTER_SYS_MEM.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_PROCESSOR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_PROCESSOR.PROCESSOR_ID = PROCESSOR.PROCESSOR_ID
;

create or replace view COMPUTER_VIEW
as
select
    COMPUTER.COMPUTER_SYS_ID,
    to_char(COMPUTER.COMPUTER_SCANTIME,'YYYY.MM.DD HH24:MI:SS') as COMPUTER_SCANTIME,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.COMPUTER_MODEL,
    COMPUTER.COMPUTER_BOOT_TIME,
    COMPUTER.COMPUTER_ALIAS,
    COMPUTER.SYS_SER_NUM,
    COMPUTER.OS_NAME,
    COMPUTER.OS_TYPE,
    COMPUTER.OS_MAJOR_VERS,
    COMPUTER.OS_MINOR_VERS,
    COMPUTER.OS_SUB_VERS,
    COMPUTER.OS_INST_DATE,
    COMPUTER.REGISTERED_OWNER,
    COMPUTER.REGISTERED_ORG,
    COMPUTER.KEYBOARD_TYPE,
    COMPUTER.FUNCTION_KEYS,
    COMPUTER.TZ_LOCALE,
    COMPUTER.TZ_NAME,
    COMPUTER.TZ_DAYLIGHT_NAME,
    COMPUTER.ON_SAVINGS_TIME,
    COMPUTER.TZ_SECONDS,
    COMPUTER.TIME_DIRECTION,
    COMPUTER.OS_LANG_VERS,
    COMPUTER.OS_LCID,
    COMPUTER.OS_ARCH,
    COMPUTER.CURRENT_LCID,
    to_char(COMPUTER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    COMPUTER
;

create or replace view OS_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    COMPUTER.OS_NAME,
    COMPUTER.OS_TYPE,
    COMPUTER.OS_MAJOR_VERS,
    COMPUTER.OS_MINOR_VERS,
    COMPUTER.OS_SUB_VERS,
    COMPUTER.OS_INST_DATE,
    COMPUTER.OS_LANG_VERS,
    COMPUTER.OS_LCID,
    COMPUTER.OS_ARCH
from
    COMPUTER
;

create or replace view COMPUTER_MEM_VIEW as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER_SYS_MEM.COMPUTER_SYS_ID,
    COMPUTER_SYS_MEM.PHYSICAL_TOTAL_KB,
    COMPUTER_SYS_MEM.PHYSICAL_FREE_KB,
    COMPUTER_SYS_MEM.TOTAL_PAGES,
    COMPUTER_SYS_MEM.FREE_PAGES,
    COMPUTER_SYS_MEM.PAGE_SIZE,
    COMPUTER_SYS_MEM.VIRT_TOTAL_KB,
    COMPUTER_SYS_MEM.VIRT_FREE_KB,
    to_char(COMPUTER_SYS_MEM.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    COMPUTER_SYS_MEM,COMPUTER
where
    COMPUTER_SYS_MEM.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view PC_BIOS_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    PC_SYS_PARAMS.COMPUTER_SYS_ID,
    PC_SYS_PARAMS.USER_NAME,
    PC_SYS_PARAMS.DOMAIN_NAME,
    PC_SYS_PARAMS.WORKGROUP_NAME,
    PC_SYS_PARAMS.BIOS_ID,
    PC_SYS_PARAMS.BIOS_ID_BYTES,
    PC_SYS_PARAMS.BIOS_DATE,
    PC_SYS_PARAMS.BIOS_STRING,
    PC_SYS_PARAMS.BIOS_MANUFACTURER,
    PC_SYS_PARAMS.MANUFACTURER_ID,
    PC_SYS_PARAMS.BIOS_MODEL,
    PC_SYS_PARAMS.BIOS_SER_NUM,
    PC_SYS_PARAMS.UPTIME,
    PC_SYS_PARAMS.IE_VERS,
    to_char(PC_SYS_PARAMS.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PC_SYS_PARAMS,COMPUTER
where
    PC_SYS_PARAMS.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view UNIX_SYS_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    UNIX_SYS_PARAMS.COMPUTER_SYS_ID,
    to_char(UNIX_SYS_PARAMS.BOOT_TIME,'YYYY.MM.DD HH24:MI:SS') as BOOT_TIME,
    UNIX_SYS_PARAMS.UPTIME,
    UNIX_SYS_PARAMS.RUN_LEVEL,
    UNIX_SYS_PARAMS.HOST_NAME,
    to_char(UNIX_SYS_PARAMS.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    UNIX_SYS_PARAMS,COMPUTER
where
    UNIX_SYS_PARAMS.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view SMBIOS_DATA_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    SMBIOS_SYS_DATA.BIOS_VENDOR,
    SMBIOS_SYS_DATA.BIOS_VERS,
    SMBIOS_SYS_DATA.BIOS_SIZE,
    INST_SMBIOS_DATA.BIOS_DATE,
    SMBIOS_SYS_DATA.SYS_MANUFACTURER,
    SMBIOS_SYS_DATA.SYS_PRODUCT_NAME,
    SMBIOS_SYS_DATA.SYS_VERS,
    INST_SMBIOS_DATA.SYS_SER_NUM,
    INST_SMBIOS_DATA.SYS_UUID,
    SMBIOS_SYS_DATA.BOARD_MANUFACTURER,
    SMBIOS_SYS_DATA.BOARD_PRODUCT,
    SMBIOS_SYS_DATA.BOARD_VERS,
    INST_SMBIOS_DATA.POWERON_PASSWORD,
    INST_SMBIOS_DATA.BOARD_SER_NUM,
    SMBIOS_SYS_DATA.CASE_MANUFACTURER,
    SMBIOS_SYS_DATA.CASE_TYPE,
    SMBIOS_SYS_DATA.CASE_VERS,
    INST_SMBIOS_DATA.CASE_SER_NUM,
    INST_SMBIOS_DATA.CASE_ASSET_TAG,
    to_char(INST_SMBIOS_DATA.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_SMBIOS_DATA,SMBIOS_SYS_DATA,COMPUTER
where
    INST_SMBIOS_DATA.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_SMBIOS_DATA.SMBIOS_ID = SMBIOS_SYS_DATA.SMBIOS_ID
;

create or replace view MEM_MODULES_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    MEM_MODULES.INST_MEM_ID,
    MEM_MODULES.MODULE_SIZE_MB,
    MEM_MODULES.MAX_MODULE_SIZE_MB,
    MEM_MODULES.SOCKET_NAME,
    MEM_MODULES.PACKAGING,
    MEM_MODULES.MEM_TYPE,
    to_char(MEM_MODULES.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    MEM_MODULES,COMPUTER
where
    MEM_MODULES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view MEM_MODULES_TOTAL
as
select
    COMPUTER.COMPUTER_SYS_ID,
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.OS_NAME,
    count(*) as NUM_MEM_SLOTS,
    sum(MODULE_SIZE_MB) as TOTAL_INST_MEM,
    sum(MAX_MODULE_SIZE_MB) as MAX_SUPPORTED_MEM
from
    COMPUTER,MEM_MODULES
where
    COMPUTER.COMPUTER_SYS_ID = MEM_MODULES.COMPUTER_SYS_ID
group by
    COMPUTER.COMPUTER_SYS_ID,COMPUTER.TME_OBJECT_LABEL,COMPUTER.TME_OBJECT_ID,COMPUTER.OS_NAME
;

create or replace view PROCESSOR_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    PROCESSOR.MANUFACTURER,
    PROCESSOR.PROCESSOR_MODEL,
    PROCESSOR.CURRENT_SPEED as PROCESSOR_SPEED,
    INST_PROCESSOR.IS_ENABLED,
    INST_PROCESSOR.SER_NUM,
    to_char(INST_PROCESSOR.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PROCESSOR,INST_PROCESSOR,COMPUTER
where
    INST_PROCESSOR.PROCESSOR_ID = PROCESSOR.PROCESSOR_ID
and
    INST_PROCESSOR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view PC_PROCESSOR_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    PROCESSOR.MANUFACTURER,
    PROCESSOR.PROCESSOR_MODEL,
    PROCESSOR.CURRENT_SPEED as PROCESSOR_SPEED,
    PROCESSOR.BUS_SPEED,
    PROCESSOR.CPU_INTERFACE,
    PROCESSOR.CHIP_FAMILY,
    PROCESSOR.CHIP_MODEL,
    PROCESSOR.CHIP_STEPPING,
    PROCESSOR.VIRT_MODE_EXT,
    PROCESSOR.PAGE_SIZE_EXT,
    PROCESSOR.TIME_STAMP_COUNTER,
    PROCESSOR.MODEL_SPECIFIC_REG,
    PROCESSOR.PHYSICAL_ADDR_EXT,
    PROCESSOR.MACHINECHECK_EXCPT,
    PROCESSOR.CMPXCHG8B_SUPP,
    PROCESSOR.ON_CHIP_APIC,
    PROCESSOR.MEM_TYPE_RANGE_REG,
    PROCESSOR.PAGE_GLOBAL_ENABLE,
    PROCESSOR.MACHINECHECK_ARCH,
    PROCESSOR.COND_MOVE_SUPP,
    PROCESSOR.MMX_TECHNOLOGY,
    PROCESSOR.ON_CHIP_FPU,
    PROCESSOR.DEBUG_EXT_PRESENT,
    PROCESSOR.FAST_SYS_CALL,
    PROCESSOR.PAGE_ATTR_TABLE,
    PROCESSOR.PAGE_SIZE_EXT36,
    PROCESSOR.SER_NUM_ENABLED,
    PROCESSOR.FAST_FLOAT_SAVE,
    PROCESSOR.SIMD_EXT_SUPP,
    PROCESSOR.NOW_3_D_ARCH,
    INST_PROCESSOR.SER_NUM,
    to_char(INST_PROCESSOR.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PROCESSOR,INST_PROCESSOR,COMPUTER
where
    PROCESSOR.PROCESSOR_FEATURES <> -1
and
    INST_PROCESSOR.PROCESSOR_ID = PROCESSOR.PROCESSOR_ID
and
    INST_PROCESSOR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

-- drop view PHYSICAL_PROCESSOR_VIEW;
create or replace view PHYSICAL_PROCESSOR_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    PHYSICAL_PROCESSOR.BRANDNAME,
    PHYSICAL_PROCESSOR.CORE_PER_PK_COUNT,
    PHYSICAL_PROCESSOR.LOG_PROC_PER_CORE,
    PHYSICAL_PROCESSOR.MANUFACTURER,
    PHYSICAL_PROCESSOR.FAMILY,
    PHYSICAL_PROCESSOR.TYPE,
    PHYSICAL_PROCESSOR.CPU_FREQ,
    PHYSICAL_PROCESSOR.L2_CACHE_SIZE,
    PHYSICAL_PROCESSOR.L3_CACHE_SIZE,
    PHYSICAL_PROCESSOR.SIGNATURE,
    PHYSICAL_PROCESSOR.RECORD_TIME
from
    PHYSICAL_PROCESSOR,COMPUTER
where
    PHYSICAL_PROCESSOR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

-- drop view TOT_LOGIC_PROC_VIEW;
create or replace view TOT_LOGIC_PROC_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    PHYSICAL_PROCESSOR.BRANDNAME,
    PHYSICAL_PROCESSOR.CORE_PER_PK_COUNT,
    PHYSICAL_PROCESSOR.LOG_PROC_PER_CORE * PHYSICAL_PROCESSOR.CORE_PER_PK_COUNT AS LOGICAL_PROC,
    PHYSICAL_PROCESSOR.RECORD_TIME
from
    PHYSICAL_PROCESSOR,COMPUTER
where
    PHYSICAL_PROCESSOR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;


create or replace view PROCESSOR_NUM_VIEW
as
select distinct
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    count(*) as NUM_PROCESSOR,
    SUM(CORE_PER_PK_COUNT) as NUM_CORE,
    SUM(TOT_LOGIC_PROC_VIEW.LOGICAL_PROC) as NUM_THREAD
from
    COMPUTER,TOT_LOGIC_PROC_VIEW
where
    COMPUTER.COMPUTER_SYS_ID = TOT_LOGIC_PROC_VIEW.COMPUTER_SYS_ID
group by
    COMPUTER.TME_OBJECT_LABEL,COMPUTER.TME_OBJECT_ID,COMPUTER.COMPUTER_SYS_ID
;

create or replace view SOLARIS_CPU_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    INST_PROCESSOR.PROCESSOR_BOARD,
    INST_PROCESSOR.PROCESSOR_NUM,
    INST_PROCESSOR.PROCESSOR_MODULE,
    PROCESSOR.MANUFACTURER,
    PROCESSOR.PROCESSOR_MODEL,
    PROCESSOR.CURRENT_SPEED as PROCESSOR_SPEED,
    PROCESSOR.ECACHE_MB,
    PROCESSOR.CPU_IMPL,
    PROCESSOR.CPU_MASK,
    INST_PROCESSOR.IS_ENABLED,
    to_char(INST_PROCESSOR.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PROCESSOR,INST_PROCESSOR,COMPUTER
where
    COMPUTER.OS_TYPE = 'SunOS'
and
    INST_PROCESSOR.PROCESSOR_ID = PROCESSOR.PROCESSOR_ID
and
    INST_PROCESSOR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view HDISK_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    STORAGE_DEV.MANUFACTURER,
    STORAGE_DEV.MODEL,
    STORAGE_DEV.STORAGE_TYPE,
    STORAGE_DEV.SER_NUM,
    HDISK.HDISK_CYLINDERS,
    HDISK.HDISK_SECTORS,
    HDISK.HDISK_HEADS,
    HDISK.HDISK_SIZE_MB,
    to_char(STORAGE_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    STORAGE_DEV,HDISK,COMPUTER
where
    STORAGE_DEV.STORAGE_CLASS in ('h','H')
and
    STORAGE_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    STORAGE_DEV.HDISK_ID = HDISK.HDISK_ID
;

create or replace view STORAGE_DEV_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    STORAGE_DEV.MANUFACTURER,
    STORAGE_DEV.MODEL,
    STORAGE_DEV.STORAGE_TYPE,
    STORAGE_DEV.SER_NUM,
    to_char(STORAGE_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    STORAGE_DEV,COMPUTER
where
    STORAGE_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view FLPY_DRV_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    STORAGE_DEV.MANUFACTURER,
    STORAGE_DEV.MODEL,
    STORAGE_DEV.STORAGE_TYPE,
    to_char(STORAGE_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    STORAGE_DEV,COMPUTER
where
    STORAGE_DEV.STORAGE_CLASS in ('f','F')
and
    STORAGE_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view CDROM_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    STORAGE_DEV.MANUFACTURER,
    STORAGE_DEV.MODEL,
    STORAGE_DEV.STORAGE_TYPE,
    STORAGE_DEV.SER_NUM,
    to_char(STORAGE_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    STORAGE_DEV,COMPUTER
where
    STORAGE_DEV.STORAGE_CLASS in ('c','C')
and
    STORAGE_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view TAPEDRV_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    STORAGE_DEV.MANUFACTURER,
    STORAGE_DEV.MODEL,
    STORAGE_DEV.STORAGE_TYPE,
    STORAGE_DEV.SER_NUM,
    to_char(STORAGE_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    STORAGE_DEV,COMPUTER
where
    STORAGE_DEV.STORAGE_CLASS in ('t','T')
and
    STORAGE_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view PARTITION_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    INST_PARTITION.COMPUTER_SYS_ID,
    INST_PARTITION.FS_ACCESS_POINT,
    INST_PARTITION.DEV_NAME,
    INST_PARTITION.PARTITION_TYPE,
    INST_PARTITION.MEDIA_TYPE,
    INST_PARTITION.PHYSICAL_SIZE_KB,
    INST_PARTITION.FS_TYPE,
    INST_PARTITION.FS_MOUNT_POINT,
    INST_PARTITION.FS_TOTAL_SIZE_KB,
    INST_PARTITION.FS_FREE_SIZE_KB,
    to_char(INST_PARTITION.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_PARTITION,COMPUTER
where
    INST_PARTITION.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;


create or replace view PARTITION_MB_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    INST_PARTITION_MB.COMPUTER_SYS_ID,
    INST_PARTITION_MB.FS_ACCESS_POINT,
    INST_PARTITION_MB.DEV_NAME,
    INST_PARTITION_MB.PARTITION_TYPE,
    INST_PARTITION_MB.MEDIA_TYPE,
    INST_PARTITION_MB.PHYSICAL_SIZE_MB,
    INST_PARTITION_MB.FS_TYPE,
    INST_PARTITION_MB.FS_MOUNT_POINT,
    INST_PARTITION_MB.FS_TOTAL_SIZE_MB,
    INST_PARTITION_MB.FS_FREE_SIZE_MB,
    to_char(INST_PARTITION_MB.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_PARTITION_MB,COMPUTER
where
    INST_PARTITION_MB.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;


create or replace view MOUNT_POINT_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    INST_MOUNT_POINT.COMPUTER_SYS_ID,
    INST_MOUNT_POINT.FS_ACCESS_POINT,
    INST_MOUNT_POINT.DEV_NAME,
    INST_MOUNT_POINT.PARTITION_TYPE,
    INST_MOUNT_POINT.MEDIA_TYPE,
    INST_MOUNT_POINT.PHYSICAL_SIZE_KB,
    INST_MOUNT_POINT.FS_TYPE,
    INST_MOUNT_POINT.FS_MOUNT_POINT,
    INST_MOUNT_POINT.FS_TOTAL_SIZE_KB,
    INST_MOUNT_POINT.FS_FREE_SIZE_KB,
    to_char(INST_MOUNT_POINT.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_MOUNT_POINT,COMPUTER
where
    INST_MOUNT_POINT.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view MOUSE_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    MOUSE.MOUSE_MODEL,
    MOUSE.MOUSE_TYPE,
    MOUSE.BUTTONS,
    to_char(INST_MOUSE.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_MOUSE,MOUSE,COMPUTER
where
    INST_MOUSE.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_MOUSE.MOUSE_ID = MOUSE.MOUSE_ID
;

create or replace view KEYBOARD_VIEW
as
select
    TME_OBJECT_LABEL,
    TME_OBJECT_ID,
    COMPUTER_SYS_ID,
    KEYBOARD_TYPE,
    FUNCTION_KEYS
from
    COMPUTER
;

create or replace view PRINTER_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    PRINTER.PRINTER_MODEL,
    INST_PRINTER.PRINTER_NAME,
    INST_PRINTER.PRINTER_LOCATION,
    INST_PRINTER.PRINTER_IS_LOCAL,
    INST_PRINTER.DRV_NAME,
    INST_PRINTER.DRV_VERS,
    INST_PRINTER.PORT_NAME,
    to_char(INST_PRINTER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_PRINTER,PRINTER,COMPUTER
where
    INST_PRINTER.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_PRINTER.PRINTER_ID = PRINTER.PRINTER_ID
;

create or replace view VID_CARD_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    VID_CARD.VID_CARD_MODEL,
    VID_CARD.VID_CARD_BIOS,
    VID_CARD.VID_DAC_TYPE,
    VID_CARD.VID_MEM,
    VID_CARD.VID_BIOS_RELDATE,
    VID_CARD.VID_CHIP_TYPE,
    INST_VID_CARD.VID_HORIZNTL_RES,
    INST_VID_CARD.VID_VERTICAL_RES,
    INST_VID_CARD.VID_COLORS,
    to_char(INST_VID_CARD.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_VID_CARD,VID_CARD,COMPUTER
where
    INST_VID_CARD.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_VID_CARD.VID_CARD_ID = VID_CARD.VID_CARD_ID
;

create or replace view MODEM_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    MODEM.MODEM_DESC,
    MODEM.MANUFACTURER,
    MODEM.PROVIDER_NAME,
    MODEM.MODEM_TYPE,
    MODEM.INF_FILE,
    MODEM.INF_SECTION,
    INST_MODEM.INST_MODEM_ID,
    INST_MODEM.PORT,
    INST_MODEM.PORT_SPEED,
    INST_MODEM.PORT_SETTINGS,
    INST_MODEM.USER_INIT,
    to_char(INST_MODEM.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_MODEM,MODEM,COMPUTER
where
    INST_MODEM.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_MODEM.MODEM_ID = MODEM.MODEM_ID
;

create or replace view NET_CARD_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    NET_ADAPTER.COMPUTER_SYS_ID,
    NET_ADAPTER.PERM_MAC_ADDR,
    NET_ADAPTER.CURRENT_ADDR,
    NET_ADAPTER.ADAPTER_TYPE,
    NET_ADAPTER.ADAPTER_MODEL,
    NET_ADAPTER.MANUFACTURER,
    NET_ADAPTER.INST_DATE,
    to_char(NET_ADAPTER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    NET_ADAPTER,COMPUTER
where
    COMPUTER.COMPUTER_SYS_ID = NET_ADAPTER.COMPUTER_SYS_ID
;

create or replace view ALL_NET_CARD_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    ALL_NET_ADAPTER.COMPUTER_SYS_ID,
    ALL_NET_ADAPTER.ADAPTER_ID,
    ALL_NET_ADAPTER.PERM_MAC_ADDR,
    ALL_NET_ADAPTER.CURRENT_ADDR,
    ALL_NET_ADAPTER.ADAPTER_TYPE,
    ALL_NET_ADAPTER.ADAPTER_MODEL,
    ALL_NET_ADAPTER.MANUFACTURER,
    ALL_NET_ADAPTER.INST_DATE,
    to_char(ALL_NET_ADAPTER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    ALL_NET_ADAPTER,COMPUTER
where
    COMPUTER.COMPUTER_SYS_ID = ALL_NET_ADAPTER.COMPUTER_SYS_ID
;

create or replace view IP_ADDR_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    IP_ADDR.COMPUTER_SYS_ID,
    IP_ADDR.IP_ADDR,
    IP_ADDR.IP_HOSTNAME,
    IP_ADDR.IP_DOMAIN,
    IP_ADDR.IP_SUBNET,
    IP_ADDR.IP_GATEWAY,
    IP_ADDR.IP_PRIMARY_DNS,
    IP_ADDR.IP_SECONDARY_DNS,
    IP_ADDR.IS_DHCP,
    IP_ADDR.PERM_MAC_ADDRESS,
    to_char(IP_ADDR.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    IP_ADDR,COMPUTER
where
    IP_ADDR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view IPX_ADDR_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    IPX_ADDR.COMPUTER_SYS_ID,
    IPX_ADDR.IPX_ADDR,
    IPX_ADDR.NET_NUM,
    IPX_ADDR.NODE_ADDR,
    IPX_ADDR.LINK_SPEED,
    IPX_ADDR.MAX_PACKET_SIZE,
    to_char(IPX_ADDR.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    IPX_ADDR,COMPUTER
where
    IPX_ADDR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view USB_DEV_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    INST_USB_DEV.HOST_CNTRL,
    INST_USB_DEV.DEV_ADDR,
    INST_USB_DEV.SER_NUM,
    INST_USB_DEV.PORT_NUM,
    INST_USB_DEV.PARENT_ADDR,
    USB_DEV.USB_VERS,
    USB_DEV.DEV_CLASS,
    USB_DEV.DEV_SUBCLASS,
    USB_DEV.VENDOR_ID,
    USB_DEV.PRODUCT_ID,
    USB_DEV.MANUFACTURER,
    USB_DEV.PRODUCT,
    USB_DEV.NUM_OF_PORTS,
    USB_DEV.DEV_IS_HUB,
    to_char(INST_USB_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    USB_DEV,INST_USB_DEV,COMPUTER
where
    INST_USB_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_USB_DEV.USB_ID = USB_DEV.USB_ID
;

create or replace view PCI_DEV_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    PCI_DEV.INST_PCI_ID,
    PCI_DEV.PCI_DEV_NAME,
    PCI_DEV.PCI_REVISION,
    to_char(PCI_DEV.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PCI_DEV,COMPUTER
where
    PCI_DEV.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view NW_VOLS_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    NW_VOLS.COMPUTER_SYS_ID,
    NW_VOLS.NWVOL_NAME,
    NW_VOLS.NWVOL_TOTAL_BLKS,
    NW_VOLS.NWVOL_BLK_SECTORS,
    NW_VOLS.NWVOL_AVAIL_BLKS,
    NW_VOLS.NWVOL_DIR_SLOTS,
    NW_VOLS.NWVOL_AVAIL_SLOTS,
    NW_VOLS.NWVOL_IS_REMOVABLE,
    to_char(NW_VOLS.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    NW_VOLS,COMPUTER
where
    NW_VOLS.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view NW_SERVER_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    NW_SERVER.COMPUTER_SYS_ID,
    NW_SERVER.NW_DEV_NAME,
    NW_SERVER.NW_VERS,
    NW_SERVER.NW_SUB_VERS,
    NW_SERVER.NW_MAX_CONNS,
    NW_SERVER.NW_MAX_VOLS,
    NW_SERVER.NW_REVISION_LEVEL,
    NW_SERVER.NW_SFT_LEVEL,
    NW_SERVER.NW_TTS_LEVEL,
    NW_SERVER.NW_MAX_CONNS_USED,
    NW_SERVER.NW_ACCOUNTING_VERS,
    NW_SERVER.NW_VAP_VERS,
    NW_SERVER.NW_QUEING_VERS,
    NW_SERVER.NW_PRINTSERVR_VERS,
    NW_SERVER.NW_VIRT_CONS,
    NW_SERVER.NW_SEC_LEVEL,
    NW_SERVER.NW_INET_BRG_SUPP,
    NW_SERVER.NW_CLIB_MAJOR_VERS,
    NW_SERVER.NW_CLIB_MINOR_VERS,
    NW_SERVER.NW_CLIB_REVISION,
    NW_SERVER.NW_SER_NUM,
    to_char(NW_SERVER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    NW_SERVER,COMPUTER
where
    NW_SERVER.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view INST_FILE_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    FILE_DESC.FILE_NAME,
    FILE_DESC.FILE_SIZE,
    FILE_DESC.FILE_SIZE_KB,
    FILE_PATH.PATH,
    to_char(UNMATCHED_FILES.CREATED_TIME,'YYYY.MM.DD HH24:MI:SS') as CREATED_TIME,
    to_char(UNMATCHED_FILES.MODIFIED_TIME,'YYYY.MM.DD HH24:MI:SS') as MODIFIED_TIME,
    to_char(UNMATCHED_FILES.ACCESSED_TIME,'YYYY.MM.DD HH24:MI:SS') as ACCESSED_TIME,
    UNMATCHED_FILES.FILE_PERMISSIONS,
    UNMATCHED_FILES.FILE_OWNER,
    UNMATCHED_FILES.FILE_GROUP,
    UNMATCHED_FILES.CHECKSUM_QUICK,
    UNMATCHED_FILES.CHECKSUM_CRC32,
    UNMATCHED_FILES.CHECKSUM_MD5,
    to_char(UNMATCHED_FILES.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    UNMATCHED_FILES,COMPUTER,FILE_PATH,FILE_DESC
where
    UNMATCHED_FILES.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    FILE_PATH.FILE_PATH_ID = UNMATCHED_FILES.INST_PATH_ID
and
    FILE_DESC.FILE_DESC_ID = UNMATCHED_FILES.FILE_DESC_ID
;

create or replace view NATIV_SWARE_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    NATIV_SWARE.PACKAGE_NAME,
    NATIV_SWARE.PACKAGE_VERS,
    NATIV_SWARE.PUBLISHER,
    NATIV_SWARE.PACKAGE_ID,
    INST_NATIV_SWARE.FILE_PATH,
    to_char(INST_NATIV_SWARE.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    NATIV_SWARE,INST_NATIV_SWARE,COMPUTER
where
    INST_NATIV_SWARE.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    NATIV_SWARE.NATIV_ID = INST_NATIV_SWARE.NATIV_ID
;

create or replace view HEADER_INFO_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    HEADER_INFO.HEADER_NAME,
    HEADER_INFO.HEADER_VERS,
    HEADER_INFO.HEADER_PUBLISHER,
    to_char(INST_HEADER_INFO.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    HEADER_INFO,INST_HEADER_INFO,COMPUTER
where
    INST_HEADER_INFO.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    INST_HEADER_INFO.HEADER_ID = HEADER_INFO.HEADER_ID
;

create or replace view PTF_INFO_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    PTF_INFO.COMPUTER_SYS_ID,
    PTF_INFO.PRODUCT_ID,
    PTF_INFO.PTF_ID,
    PTF_INFO.PTF_STATUS,
    PTF_INFO.STATUS_DATE,
    PTF_INFO.STATUS_TIME,
    PTF_INFO.TYPE,
    PTF_INFO.UNATTN_IPL_ACTION,
    PTF_INFO.LANG_FEATURE,
    PTF_INFO.IPL_SOURCE,
    PTF_INFO.SYS_NAME,
    PTF_INFO.ON_ORDER,
    PTF_INFO.PTF_SAVE_FILE,
    PTF_INFO.OPTIONAL_PART,
    PTF_INFO.SUPERSEDING_PTF,
    PTF_INFO.RELEASE,
    PTF_INFO.TGT_OS400_RELEASE,
    PTF_INFO.ACTION_PENDING,
    PTF_INFO.ACTION_REQUIRED,
    to_char(PTF_INFO.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    COMPUTER,PTF_INFO
where
    COMPUTER.COMPUTER_SYS_ID = PTF_INFO.COMPUTER_SYS_ID
;

create or replace view SERVICE_INFO_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    INST_SERVICE_INFO.SNAME,                      
    INST_SERVICE_INFO.DNAME,                       
    INST_SERVICE_INFO.SDESC,                       
    INST_SERVICE_INFO.STYPE,                      
    INST_SERVICE_INFO.SSTART_MODE,                
    INST_SERVICE_INFO.SDISPLAY_NAME,              
    INST_SERVICE_INFO.SSTATE,                     
    INST_SERVICE_INFO.SSTATUS,                    
    to_char(INST_SERVICE_INFO.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    INST_SERVICE_INFO,COMPUTER
where
    INST_SERVICE_INFO.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view LPAR_VIEW
as
select
    COMPUTER.TME_OBJECT_LABEL,
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.COMPUTER_SYS_ID,
    COMPUTER.COMPUTER_ALIAS AS COMPUTER_NAME,
    LPAR.LPARID,
    LPAR.SHARED_POOL_ID,
    LPAR.NODE_CAPACITY,
    LPAR.NODECAP_IN_CORES,
    LPAR.LPAR_CAPACITY,
    LPAR.LPARCAP_IN_CORES,
    LPAR.SHARED_POOL_CAPACITY,
    LPAR.SHAREDPC_IN_CORES,
    LPAR.PHYS_SHAREDPC,
    LPAR.PHYS_SHAREDPC_CORES,
    LPAR.LPAR_ONLINE_VP_COUNT,
    LPAR.LPAR_IS_SHARED_TYPE,
    LPAR.LPAR_IS_CAPPED,
    LPAR.LPAR_ENTITLEMENT,
    LPAR.LPAR_MIN_VP_COUNT,
    LPAR.LPAR_MAX_VP_COUNT,
    LPAR.LPAR_MIN_CAPACITY,
    LPAR.LPAR_MAX_CAPACITY,
    LPAR.LPAR_IDLE_CP_WEIGHT,
    LPAR.SMT_IS_ENABLED,
    LPAR.NODE_ACT_PROC_COUNT,
    LPAR.SERIAL_NUMBER,
    to_char(LPAR.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    LPAR, COMPUTER
where
    LPAR.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
;

create or replace view LPAR_SYSTEMS_VIEW
as
select
    SERIAL_NUMBER,
    NODE_CAPACITY,
    NODECAP_IN_CORES
from
    LPAR_VIEW
where
    LPAR_CAPACITY NOT LIKE '-1%'
GROUP BY 
    SERIAL_NUMBER,
    NODE_CAPACITY,
    NODECAP_IN_CORES
;

create or replace view LOGICAL_PARTITIONS_VIEW
as
select
    COMPUTER_NAME,
    SERIAL_NUMBER,
    COMPUTER_SYS_ID,
    LPARID,
    LPAR_CAPACITY,
    LPARCAP_IN_CORES,
    NODE_CAPACITY,
    NODECAP_IN_CORES,
    SHARED_POOL_ID,
    SHARED_POOL_CAPACITY,
    SHAREDPC_IN_CORES,
    PHYS_SHAREDPC,
    PHYS_SHAREDPC_CORES,
    LPAR_ONLINE_VP_COUNT,
    LPAR_IS_SHARED_TYPE,
    LPAR_IS_CAPPED,
    LPAR_ENTITLEMENT,
    LPAR_MIN_VP_COUNT,
    LPAR_MAX_VP_COUNT,
    LPAR_MIN_CAPACITY,
    LPAR_MAX_CAPACITY,
    LPAR_IDLE_CP_WEIGHT,
    SMT_IS_ENABLED,
    NODE_ACT_PROC_COUNT,
    RECORD_TIME
from
    LPAR_VIEW
where
    LPAR_CAPACITY NOT LIKE '-1%'
;

create or replace view ASP_VIEW
as
select
    COMPUTER_SYS_ID,
    TME_OBJECT_LABEL,
    TME_OBJECT_ID, 
    substr(DEV_NAME,1,4) as ASP_NAME,
    count(*) as NUM_ASP_DISKS,
    sum(FS_TOTAL_SIZE_KB) as ASP_SIZE_TOTAL_KB,
    sum(FS_FREE_SIZE_KB) as ASP_FREE_TOTAL_KB
from
    PARTITION_VIEW
where
    DEV_NAME like 'ASP%'
group by
    COMPUTER_SYS_ID,TME_OBJECT_LABEL,TME_OBJECT_ID,substr(DEV_NAME,1,4)
;

---------------------
-- PERVASIVE VIEWS --
---------------------
create or replace view PERVASIVE_VIEW
as
select
    TRM_RESOURCES.LABEL,
    COMPUTER.COMPUTER_SYS_ID,
    to_char(COMPUTER.COMPUTER_SCANTIME,'YYYY.MM.DD HH24:MI:SS') as COMPUTER_SCANTIME,
    COMPUTER.COMPUTER_MODEL,
    COMPUTER.SYS_SER_NUM,
    COMPUTER.OS_NAME,
    COMPUTER.OS_MAJOR_VERS,
    COMPUTER.OS_MINOR_VERS,
    COMPUTER.OS_SUB_VERS,
    COMPUTER.REGISTERED_OWNER,
    COMPUTER.TZ_LOCALE,
    to_char(COMPUTER.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    COMPUTER, TRM_RESOURCES
where
    COMPUTER.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view WINCE_NET_VIEW
as
select
    TRM_RESOURCES.LABEL,
    WINCE_CFG.COMPUTER_SYS_ID,
    WINCE_CFG.PPP_ACCESS_PT,
    WINCE_CFG.PRIMARY_DNS,
    WINCE_CFG.SECONDARY_DNS,
    WINCE_CFG.POP3_SERVER,
    WINCE_CFG.SMTP_SERVER,
    WINCE_CFG.PPP_USERID,
    WINCE_CFG.POP3_USERID,
    WINCE_CFG.MAIL_ADDR,
    to_char(WINCE_CFG.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    WINCE_CFG, TRM_RESOURCES
where
    WINCE_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view WINCE_CFG_VIEW
as
select
    TRM_RESOURCES.LABEL,
    WINCE_CFG.COMPUTER_SYS_ID,
    WINCE_CFG.ST_PAGE,
    WINCE_CFG.BROWSER_PROXY_ADDR,
    WINCE_CFG.BROWSER_PROXY_PORT,
    WINCE_CFG.PCT_ENABLE,
    WINCE_CFG.SSL2_ENABLE,
    WINCE_CFG.SSL3_ENABLE,
    to_char(WINCE_CFG.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    WINCE_CFG, TRM_RESOURCES
where
    WINCE_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view WINCE_AGENT_VIEW
as
select
    TRM_RESOURCES.LABEL,
    WINCE_CFG.COMPUTER_SYS_ID,
    WINCE_CFG.SSL_ENABLE,
    WINCE_CFG.MGMT_SERVER_ADDR,
    WINCE_CFG.POLLING_TIMER,
    WINCE_CFG.POLLING_SCHEDULE,
    WINCE_CFG.SCHED_OFFSET_MAX,
    WINCE_CFG.AGENT_RUN_MODE,
    WINCE_CFG.AGENT_PROXY_ENABLE,
    WINCE_CFG.AGENT_PROXY_PORT,
    WINCE_CFG.AGENT_PROXY_ADDR,
    WINCE_CFG.SUB_USERID,
    WINCE_CFG.SAVE_PASSWORD,
    WINCE_CFG.AUTH_SERVER,
    WINCE_CFG.MAX_LOG_SIZE,
    to_char(WINCE_CFG.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    WINCE_CFG, TRM_RESOURCES
where
    WINCE_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view WINCE_NATIV_VIEW
as
select
    TRM_RESOURCES.LABEL,
    INST_NATIV_SWARE.COMPUTER_SYS_ID,
    NATIV_SWARE.PACKAGE_NAME,
    NATIV_SWARE.PACKAGE_VERS,
    NATIV_SWARE.PUBLISHER,
    INST_NATIV_SWARE.FILE_PATH,
    to_char(INST_NATIV_SWARE.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    NATIV_SWARE,INST_NATIV_SWARE,WINCE_CFG, TRM_RESOURCES
where
    INST_NATIV_SWARE.COMPUTER_SYS_ID = WINCE_CFG.COMPUTER_SYS_ID
and
    WINCE_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
and
    NATIV_SWARE.NATIV_ID = INST_NATIV_SWARE.NATIV_ID
;

create or replace view PALM_CFG_VIEW
as
select
    TRM_RESOURCES.LABEL,
    PALM_CFG.COMPUTER_SYS_ID,
    PALM_CFG.PRESET_COUNTRY_ID,
    PALM_CFG.TIME_FORMAT,
    PALM_CFG.DATE_FORMAT,
    PALM_CFG.LONG_DATE_FORMAT,
    PALM_CFG.WEEK_ST_DAY,
    PALM_CFG.NUM_FORMAT,
    PALM_CFG.SET_DATE_TIME,
    PALM_CFG.AUTO_OFF_TIMER,
    PALM_CFG.SYS_SOUND,
    PALM_CFG.ALARM_SOUND,
    PALM_CFG.GAME_SOUND,
    PALM_CFG.ATTACHMENT_OPTION,
    to_char(PALM_CFG.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PALM_CFG, TRM_RESOURCES
where
    PALM_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view PALM_NET_VIEW
as
select
    TRM_RESOURCES.LABEL,
    PALM_CFG.COMPUTER_SYS_ID,
    PALM_CFG.PPP_USER_NAME,
    PALM_CFG.PPP_QUERY_DNS,
    PALM_CFG.PRIMARY_DNS,
    PALM_CFG.SECONDARY_DNS,
    PALM_CFG.MODEM_PHONE_NUM,
    to_char(PALM_CFG.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PALM_CFG, TRM_RESOURCES
where
    PALM_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view PALM_AGENT_VIEW
as
select
    TRM_RESOURCES.LABEL,
    PALM_CFG.COMPUTER_SYS_ID,
    PALM_CFG.SSL_ON,
    PALM_CFG.PALM_USER_ID,
    PALM_CFG.DMS_SERVER_ADDR,
    PALM_CFG.DMS_SERVER_PORT,
    PALM_CFG.PALM_SERVLET_NAME,
    PALM_CFG.NET_SVC_NAME,
    PALM_CFG.BUFFER_SIZE,
    PALM_CFG.PROXY_ENABLE,
    PALM_CFG.PROXY_ADDR,
    PALM_CFG.PROXY_PORT,
    to_char(PALM_CFG.RECORD_TIME,'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    PALM_CFG, TRM_RESOURCES
where
    PALM_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view DEV_INFO_VIEW
as
select
    TRM_RESOURCES.LABEL,
    DEV_INFO.COMPUTER_SYS_ID,
    DEV_INFO.LAST_SYNC_TIME,
    DEV_INFO.LAST_SYNC_STATUS,
    DEV_INFO.SYNC_USER_NAME,
    DEV_INFO.PROCESSOR_MODEL,
    DEV_INFO.NUM_MEM_CARD_SLOT,
    DEV_INFO.NUM_EXPAND_SLOT,
    DEV_INFO.CHARACTER_ENCODING,
    to_char(DEV_INFO.RECORD_TIME, 'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    DEV_INFO, TRM_RESOURCES
where
    DEV_INFO.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view BATTERY_VIEW
as
select
    TRM_RESOURCES.LABEL,
    BATTERY.COMPUTER_SYS_ID,
    BATTERY.BATTERY_TYPE,
    BATTERY.BATTERY_VOLTAGE,
    to_char(BATTERY.RECORD_TIME, 'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    BATTERY, TRM_RESOURCES
where
    BATTERY.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view DEV_CARD_VIEW
as
select
    TRM_RESOURCES.LABEL,
    INST_DEV_CARD.COMPUTER_SYS_ID,
    INST_DEV_CARD.FREE_MEM,
    INST_DEV_CARD.SER_NUM,
    INST_DEV_CARD.CARD_TYPE,
    INST_DEV_CARD.CARD_NUM,
    DEV_CARD.MANUFACTURER,
    DEV_CARD.CAPABILITY,
    DEV_CARD.CARD_NAME,
    DEV_CARD.CARD_VERS,
    DEV_CARD.ROM_SIZE,
    DEV_CARD.RAM_SIZE,
    to_char(INST_DEV_CARD.RECORD_TIME, 'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    DEV_CARD,INST_DEV_CARD, TRM_RESOURCES
where
    INST_DEV_CARD.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
and
    DEV_CARD.CARD_ID = INST_DEV_CARD.CARD_ID
;

create or replace view DEV_VIEW
(LABEL, COMPUTER_SYS_ID, BATTERY_TYPE, BATTERY_PERCENT, LAST_SYNC_TIME, LAST_SYNC_STATUS, SYNC_USER_NAME, PROCESSOR_MODEL, MEM_CARD_SLOTS, EXPANSION_SLOTS, CHARACTER_ENCODING, RAM_SIZE, FREE_MEM)
as
select
    TRM_RESOURCES.LABEL,
    DEV_INFO.COMPUTER_SYS_ID,
    BATTERY.BATTERY_TYPE,
    BATTERY.BATTERY_VOLTAGE,
    DEV_INFO.LAST_SYNC_TIME,
    DEV_INFO.LAST_SYNC_STATUS,
    DEV_INFO.SYNC_USER_NAME,
    DEV_INFO.PROCESSOR_MODEL,
    DEV_INFO.NUM_MEM_CARD_SLOT,
    DEV_INFO.NUM_EXPAND_SLOT,
    DEV_INFO.CHARACTER_ENCODING,
    (select sum(RAM_SIZE) from DEV_CARD_VIEW where CARD_TYPE = 'SYSTEM_MEMORY'
        and COMPUTER_SYS_ID = DEV_INFO.COMPUTER_SYS_ID),
    (select sum(FREE_MEM) from DEV_CARD_VIEW where CARD_TYPE = 'SYSTEM_MEMORY'
        and COMPUTER_SYS_ID = DEV_INFO.COMPUTER_SYS_ID)
from
    BATTERY, DEV_INFO, TRM_RESOURCES
where
    DEV_INFO.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
and
    DEV_INFO.COMPUTER_SYS_ID = BATTERY.COMPUTER_SYS_ID
;

create or replace view DB_INFO_VIEW
as
select
    TRM_RESOURCES.LABEL,
    INST_DB_INFO.COMPUTER_SYS_ID,
    DB_INFO.APP_NAME,
    DB_INFO.DB_TYPE,
    DB_INFO.CREATOR_ID,
    DB_INFO.DB_NAME,
    DB_INFO.DB_VERS,
    INST_DB_INFO.DB_PATH,
    INST_DB_INFO.NUM_RECORD,
    INST_DB_INFO.DB_SIZE,
    INST_DB_INFO.MEM_LOCATION,
    INST_DB_INFO.CREATED_TIME,
    INST_DB_INFO.MODIFIED_TIME,
    to_char(INST_DB_INFO.RECORD_TIME, 'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    DB_INFO,INST_DB_INFO, TRM_RESOURCES
where
    INST_DB_INFO.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
and
    DB_INFO.DB_ID = INST_DB_INFO.DB_ID
;

create or replace view WINCE_FILE_VIEW
as
select
    TRM_RESOURCES.LABEL,
    WINCE_CFG.COMPUTER_SYS_ID,
    FILE_DESC.FILE_NAME,
    FILE_DESC.FILE_SIZE,
    FILE_PATH.PATH,
    UNMATCHED_FILES.CREATED_TIME,
    UNMATCHED_FILES.MODIFIED_TIME,
    UNMATCHED_FILES.MEM_LOCATION,
    to_char(UNMATCHED_FILES.RECORD_TIME, 'YYYY.MM.DD HH24:MI:SS') as RECORD_TIME
from
    UNMATCHED_FILES,WINCE_CFG,FILE_PATH,FILE_DESC, TRM_RESOURCES
where
    UNMATCHED_FILES.COMPUTER_SYS_ID = WINCE_CFG.COMPUTER_SYS_ID
and
    WINCE_CFG.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
and
    FILE_PATH.FILE_PATH_ID = UNMATCHED_FILES.INST_PATH_ID
and
    FILE_DESC.FILE_DESC_ID = UNMATCHED_FILES.FILE_DESC_ID
;

commit;

insert into QUERY_VIEWS (VIEW_NAME) values ('INVENTORYDATA')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('COMPUTER_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('OS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('COMPUTER_MEM_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PC_BIOS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('UNIX_SYS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SMBIOS_DATA_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('MEM_MODULES_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('MEM_MODULES_TOTAL')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PROCESSOR_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PC_PROCESSOR_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PROCESSOR_NUM_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PHYSICAL_PROCESSOR_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SOLARIS_CPU_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('HDISK_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('STORAGE_DEV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('FLPY_DRV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('CDROM_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('TAPEDRV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PARTITION_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PARTITION_MB_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('MOUNT_POINT_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('MOUSE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('KEYBOARD_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PRINTER_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('VID_CARD_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('NET_CARD_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('ALL_NET_CARD_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('MODEM_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('IP_ADDR_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('IPX_ADDR_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('USB_DEV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PCI_DEV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('NW_SERVER_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('NW_VOLS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('INST_FILE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('MATCH_SWARE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('INST_SWARE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PACKAGE_FILE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SIG_PACKAGE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('CHECK_PACKAGES')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('NATIV_SWARE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('HEADER_INFO_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('NOSIG_FILES_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SWARE_MATCH_QUICK')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SWARE_MATCH_CRC32')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SWARE_MATCH_MD5')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PTF_INFO_VIEW')
;
insert into QUERY_VIEWS(VIEW_NAME) values ('SERVICE_INFO_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('LPAR_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('LPAR_SYSTEMS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('LOGICAL_PARTITIONS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('ASP_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PERVASIVE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('WINCE_NET_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('WINCE_CFG_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('WINCE_AGENT_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('WINCE_NATIV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PALM_CFG_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PALM_NET_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('PALM_AGENT_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_INFO_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('BATTERY_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_CARD_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('DB_INFO_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('WINCE_FILE_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('CAT_SIG_V')
;
commit;

-- This table is a part if a rewrite to winvrmnode.
-- winvrmnode will read all table names from this table and delete specified information
-- for a given COMPUTER_SYS_ID from them. This allows for deletion of information from
-- custom tables even if cascading deletes are not supported,as well as deletion from
-- history tables. All the user needs to do is insert the custom table names in the INVENTORY_TABLES table.

DROP TABLE INVENTORY_TABLES CASCADE CONSTRAINTS;
CREATE TABLE INVENTORY_TABLES (
       TABLE_NAME           VARCHAR2(64)  NOT NULL,
         CONSTRAINT INVENTORYTABLES_PK PRIMARY KEY(TABLE_NAME))
;

insert into INVENTORY_TABLES(TABLE_NAME) values ('COMPUTER')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('USER_TABLE')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('COMPUTER_SYS_MEM')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('PC_SYS_PARAMS')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('UNIX_SYS_PARAMS')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_SMBIOS_DATA')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('MEM_MODULES')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_PROCESSOR')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('PHYSICAL_PROCESSOR')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('STORAGE_DEV')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_PARTITION')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_PARTITION_MB')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_MOUNT_POINT')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_MOUSE')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_PRINTER')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_VID_CARD')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_MODEM')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('NET_ADAPTER')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('ALL_NET_ADAPTER')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('IP_ADDR')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('IPX_ADDR')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_USB_DEV')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('PCI_DEV')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('NW_VOLS')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('NW_SERVER')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('UNMATCHED_FILES')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('MATCHED_SWARE')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('MSWARE_DESC')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_NATIV_SWARE')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_HEADER_INFO')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('PTF_INFO')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_SERVICE_INFO')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('LPAR')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('WINCE_CFG')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('PALM_CFG')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('DEV_INFO')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('BATTERY')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_DEV_CARD')
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('INST_DB_INFO')
;
-- insert into INVENTORY_TABLES(TABLE_NAME) values ('PRISTINE_H_INSTALL')
-- ;
insert into INVENTORY_TABLES(TABLE_NAME) values ('PUBLISHED_PROFILES')
;
commit;

----------------------------------
-- SOFTWARE DISTRIBUTION TABLES --
----------------------------------
DROP TABLE SD_PACKAGES;
CREATE TABLE SD_PACKAGES(
       SWARE_NAME           VARCHAR2(128) NOT NULL,
       SWARE_VERS           VARCHAR2(64)  NOT NULL,
       SWARE_LANG           VARCHAR2(16),
       SWARE_TYPE           VARCHAR2(32),
       TME_SWARE_OID        VARCHAR2(64),
       SWARE_SRC_HOST       VARCHAR2(64),
       SWARE_SRC_PATH       VARCHAR2(254),
       SWARE_VERS_TYPE      INTEGER,
       SWARE_PACKAGE_TYPE   INTEGER,
       SWARE_BUILT          INTEGER,
       REGION_ID            VARCHAR2(20)   DEFAULT 'UNKNOWN' NOT NULL,              
       RECORD_TIME          DATE          DEFAULT SYSDATE,
         CONSTRAINT SDPACKAGES_PK PRIMARY KEY(SWARE_NAME,SWARE_VERS,REGION_ID))
;

CREATE OR REPLACE TRIGGER SDPACKAGES_TR
       BEFORE UPDATE ON SD_PACKAGES
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/

DROP TABLE SD_INST;
CREATE TABLE SD_INST(
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       SWARE_NAME           VARCHAR2(128) NOT NULL,
       SWARE_VERS           VARCHAR2(64)  NOT NULL,
       TME_ADMIN_ID         VARCHAR2(64),
       SD_ACTION            VARCHAR2(64),
       EXEC_TIME            VARCHAR2(32),
       STATE                VARCHAR2(32),
       RECORD_TIME          DATE          DEFAULT SYSDATE,
       REGION_ID            VARCHAR2(20)  DEFAULT 'UNKNOWN',
         CONSTRAINT SDINST_PK PRIMARY KEY (COMPUTER_SYS_ID,SWARE_NAME,SWARE_VERS),
         CONSTRAINT SDINST_FK FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID))
;
CREATE OR REPLACE TRIGGER SDINST_TR
       BEFORE UPDATE ON SD_INST
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/
insert into INVENTORY_TABLES(TABLE_NAME) values ('SD_INST')
;

DROP TABLE SD_H_INST;
CREATE TABLE SD_H_INST(
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       SWARE_NAME           VARCHAR2(128) NOT NULL,
       SWARE_VERS           VARCHAR2(64)  NOT NULL,
       EXEC_TIME            VARCHAR2(32),
       TME_SWARE_OID        VARCHAR2(64),
       SWARE_SRC_HOST       VARCHAR2(64),
       SWARE_SRC_PATH       VARCHAR2(254),
       SWARE_ACTIVATED      INTEGER,
       SWARE_ATIME          VARCHAR2(32),
       TME_ADMIN_ID         VARCHAR2(64),
       SD_ACTION            VARCHAR2(64),
       STATE                VARCHAR2(32),
       MD2_DIST_ID          VARCHAR2(32),
       MESSAGES             VARCHAR2(254),
       RECORD_TIME          DATE          DEFAULT SYSDATE NOT NULL,
       REGION_ID            VARCHAR2(20)  DEFAULT 'UNKNOWN',
         CONSTRAINT SDHINST_PK PRIMARY KEY (COMPUTER_SYS_ID,SWARE_NAME,SWARE_VERS,RECORD_TIME))
;
CREATE OR REPLACE TRIGGER SDHINST_TR
       BEFORE UPDATE ON SD_H_INST
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/
insert into INVENTORY_TABLES(TABLE_NAME) values ('SD_H_INST')
;

DROP TABLE SD_LOADED;
CREATE TABLE SD_LOADED(
       DEPOT                VARCHAR2(64),
       TME_DEPOT_OID        VARCHAR2(64)  NOT NULL,
       SWARE_NAME           VARCHAR2(128),
       SWARE_VERS           VARCHAR2(64),
       TME_SWARE_OID        VARCHAR2(64)  NOT NULL,
       TYPE                 VARCHAR2(12),
       BASE_SWARE_NAME      VARCHAR2(128),
       BASE_SWARE_VERS      VARCHAR2(64),
       TME_BASE_SWARE_OID   VARCHAR2(64)  NOT NULL,
       TME_ADMIN_ID         VARCHAR2(64),
       EXEC_TIME            VARCHAR2(32),
         CONSTRAINT SDLOADED_PK PRIMARY KEY (TME_DEPOT_OID,TME_SWARE_OID,TME_BASE_SWARE_OID))
;

DROP TABLE MOD_SUBSCRIPTS;
CREATE TABLE MOD_SUBSCRIPTS (
       TME_OBJECT_ID        VARCHAR2(128) NOT NULL,
       MOD_NAME             VARCHAR2(64)  NOT NULL,
       MOD_VERS             VARCHAR2(16)  NOT NULL,
       SUB_TIME             DATE,
       SIN_TIME             DATE,
         CONSTRAINT MODSUBSCRIPS_PK PRIMARY KEY(TME_OBJECT_ID,MOD_NAME,MOD_VERS))
;

DROP TABLE SWARE_SUBSCRIPTS;
CREATE TABLE SWARE_SUBSCRIPTS (
       TME_OBJECT_ID        VARCHAR2(128) NOT NULL,
       SWARE_NAME           VARCHAR2(128) NOT NULL,
       SWARE_VERS           VARCHAR2(64)  NULL,
       SUB_TIME             DATE,
         CONSTRAINT SWARESUBSCRIPS_PK PRIMARY KEY (TME_OBJECT_ID,SWARE_NAME))
;

DROP TABLE SD_WEBUI_PACKAGES;
CREATE TABLE SD_WEBUI_PACKAGES (
       COMPUTER_SYS_ID      VARCHAR2(64)  NOT NULL,
       SWARE_NAME           VARCHAR2(128) NOT NULL,
       SWARE_VERS           VARCHAR2(64)  NOT NULL,
       TME_ADMIN_ID         VARCHAR2(64),
       EXEC_TIME            VARCHAR2(32),
       WEB_PACKAGE_NAME     VARCHAR2(254),
       WEB_PACKAGE_VERS     VARCHAR2(32),
         CONSTRAINT SDWEBUIPACKAGES_PK PRIMARY KEY (COMPUTER_SYS_ID,SWARE_NAME,SWARE_VERS))
;
insert into INVENTORY_TABLES(TABLE_NAME) values ('SD_WEBUI_PACKAGES')
;

----------------------------------
-- SOFTWARE DISTRIBUTION VIEWS  --
----------------------------------
create or replace view SWDISTDATA_VIEW
as
select
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.TME_OBJECT_LABEL,
    SD_PACKAGES.SWARE_NAME,
    SD_PACKAGES.SWARE_VERS,
    SD_PACKAGES.TME_SWARE_OID,
    SD_PACKAGES.SWARE_TYPE,
    SD_PACKAGES.SWARE_SRC_HOST,
    SD_H_INST.EXEC_TIME,
    SD_H_INST.SWARE_SRC_PATH,
    SD_H_INST.SWARE_ACTIVATED,
    SD_H_INST.SWARE_ATIME,
    SD_H_INST.TME_ADMIN_ID,
    SD_H_INST.SD_ACTION,
    SD_H_INST.STATE,
    SD_H_INST.MD2_DIST_ID,
    SD_H_INST.MESSAGES
from
    SD_PACKAGES, SD_H_INST, COMPUTER
where
    SD_H_INST.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
and
    SD_H_INST.SWARE_NAME = SD_PACKAGES.SWARE_NAME
and
   SD_H_INST.SWARE_VERS = SD_PACKAGES.SWARE_VERS
;

create or replace view SD_CMSTATUS_VIEW
as
select
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.TME_OBJECT_LABEL,
    SD_INST.SWARE_NAME,
    SD_INST.SWARE_VERS,
    SD_INST.EXEC_TIME,
    SD_INST.STATE
from
    SD_INST, COMPUTER
where
    COMPUTER.COMPUTER_SYS_ID = SD_INST.COMPUTER_SYS_ID
;

create or replace view DEV_CMSTATUS_VIEW
as
select
    TRM_RESOURCES.LABEL,
    SD_INST.SWARE_NAME,
    SD_INST.SWARE_VERS,
    SD_INST.EXEC_TIME,
    SD_INST.STATE
from
    SD_INST, TRM_RESOURCES
where
    SD_INST.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR
;

create or replace view SD_LOADED_VIEW
as
select
    *
from
    SD_LOADED
;

create or replace view SD_WEBUI_VIEW
as
select
    COMPUTER.TME_OBJECT_ID,
    COMPUTER.TME_OBJECT_LABEL,
    SD_INST.SWARE_NAME,
    SD_INST.SWARE_VERS,
    SD_INST.EXEC_TIME,
    SD_INST.STATE
from
    SD_INST, COMPUTER
where
    COMPUTER.COMPUTER_SYS_ID = SD_INST.COMPUTER_SYS_ID
;

create or replace view WEBUI_SUB_VIEW
as
select
    COMPUTER.COMPUTER_SYS_ID,
    SWARE_SUBSCRIPTS.TME_OBJECT_ID,
    SWARE_SUBSCRIPTS.SWARE_NAME,
    SD_INST.SWARE_VERS,
    SD_INST.STATE
from
    COMPUTER, SD_INST, SWARE_SUBSCRIPTS
where
    COMPUTER.COMPUTER_SYS_ID = SD_INST.COMPUTER_SYS_ID
and
    SD_INST.SWARE_NAME = SWARE_SUBSCRIPTS.SWARE_NAME
;

insert into QUERY_VIEWS (VIEW_NAME) values ('SWDISTDATA_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SD_CMSTATUS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SD_LOADED_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_CMSTATUS_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SD_WEBUI_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('WEBUI_SUB_VIEW')
;
insert into QUERY_VIEWS (VIEW_NAME) values ('SP_SIG_VIEW')
;
commit;

----------------------------------
-- PATCH MANAGEMENT TABLES --
----------------------------------

drop table PM_PRODUCT_INFO CASCADE CONSTRAINTS;
delete from INVENTORY_TABLES where TABLE_NAME = 'PM_PRODUCT_INFO';
create table PM_PRODUCT_INFO (
  COMPUTER_SYS_ID   varchar2(64)  not null,
  PRODUCT_CODE      varchar2(4)   not null,
  PROD_MAJOR_VER    varchar2(4)   not null,
  PROD_MINOR_VER    varchar2(4)   not null,
  PROD_LANG         varchar2(16)  not null,
  OS_BASE_NAME      varchar2(16)  not null,
  OS_ARCHITECTURE   varchar2(16)  not null,
  OS_TYPE           varchar2(16),
  OS_SUBTYPE        varchar2(16),
  OS_SP_MAJOR_VER   varchar2(4),
  OS_SP_MINOR_VER   varchar2(4),
  RECORD_TIME       DATE          DEFAULT SYSDATE,
  constraint PMPROD_PK primary key(COMPUTER_SYS_ID, PRODUCT_CODE, PROD_LANG),
  constraint PMPROD_FK foreign key(COMPUTER_SYS_ID) references COMPUTER(COMPUTER_SYS_ID)
);

CREATE OR REPLACE TRIGGER PMPROD_TR
       BEFORE UPDATE ON PM_PRODUCT_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/     

drop table PM_PATCH_INFO CASCADE CONSTRAINTS;
delete from INVENTORY_TABLES where TABLE_NAME = 'PM_PATCH_INFO';
create table PM_PATCH_INFO (
  COMPUTER_SYS_ID   varchar2(64)  not null,
  ID                varchar2(128),
  PRODUCT           varchar2(255) not null,
  BULLETIN          varchar2(32)  not null,
  QNUM              varchar2(32)  not null,
  GUID              varchar2(64)  not null,
  UPDATEID          varchar2(64)  not null,
  REBOOTBEHAVIOR    varchar2(20)  not null,
  REASON            varchar2(255) not null,
  STATUS            varchar2(64)  not null,
  PRODUCT_CODE      varchar2(4)   not null,
  RECORD_TIME       DATE          DEFAULT SYSDATE,
  constraint PMPATCH_PK primary key(COMPUTER_SYS_ID, GUID),
  constraint PMPATCH_FK foreign key(COMPUTER_SYS_ID) references COMPUTER(COMPUTER_SYS_ID)
);

CREATE OR REPLACE TRIGGER PMPATCH_TR
       BEFORE UPDATE ON PM_PATCH_INFO
       FOR EACH ROW
       BEGIN
         :NEW.RECORD_TIME := SYSDATE;
       END;
/       

DROP TABLE PM_PATCH_PKG CASCADE CONSTRAINTS;
-- delete from INVENTORY_TABLES where TABLE_NAME = 'PM_PATCH_PKG';
CREATE TABLE PM_PATCH_PKG(
  SWARE_NAME           varchar2(128)  not null,
  SWARE_VERS           varchar2(64)   not null,
  REGION_ID            varchar2(20)   not null,
  PRODUCT_CODE         varchar2(4)    not null,
  QNUM                 varchar2(32)   not null,
  GUID                 varchar2(64)   not null,
  CONSTRAINT PMPATCHPKG_PK PRIMARY KEY(GUID, SWARE_NAME, REGION_ID))
;

CREATE OR REPLACE TRIGGER PATCHPKG_TR
    AFTER DELETE ON SD_PACKAGES
    FOR EACH ROW
    BEGIN
        DELETE FROM PM_PATCH_PKG WHERE 
        :OLD.SWARE_NAME = PM_PATCH_PKG.SWARE_NAME and
        :OLD.REGION_ID = PM_PATCH_PKG.REGION_ID and
        not exists (SELECT 1 FROM 
            SD_INST WHERE SD_INST.SWARE_NAME = PM_PATCH_PKG.SWARE_NAME and
            SD_INST.REGION_ID = PM_PATCH_PKG.REGION_ID and
                SD_INST.STATE != '-----');
    END;
/

insert into INVENTORY_TABLES(TABLE_NAME) values ('PM_PRODUCT_INFO');
insert into INVENTORY_TABLES(TABLE_NAME) values ('PM_PATCH_INFO');
-- insert into INVENTORY_TABLES(TABLE_NAME) values ('PM_PATCH_PKG');

----------------------------------
-- PATCH MANAGEMENT VIEWS --
----------------------------------

-- delete from QUERY_VIEWS where VIEW_NAME = 'PM_PATCHES_VIEW';
create or replace view
  PM_PATCHES_VIEW
as
select 
  PM_PATCH_INFO.COMPUTER_SYS_ID,
  PM_PATCH_INFO.QNUM,
  PM_PATCH_INFO.GUID,
  PM_PATCH_INFO.UPDATEID,
  PM_PATCH_INFO.REBOOTBEHAVIOR,
  PM_PATCH_INFO.BULLETIN,
  PM_PATCH_INFO.PRODUCT,
  PM_PATCH_INFO.STATUS,
  PM_PATCH_INFO.REASON,
  PM_PRODUCT_INFO.PRODUCT_CODE,
  PM_PRODUCT_INFO.PROD_MAJOR_VER,
  PM_PRODUCT_INFO.PROD_MINOR_VER,
  PM_PRODUCT_INFO.PROD_LANG,
  PM_PRODUCT_INFO.OS_BASE_NAME,
  PM_PRODUCT_INFO.OS_ARCHITECTURE,
  PM_PRODUCT_INFO.OS_TYPE,
  PM_PRODUCT_INFO.OS_SUBTYPE,
  PM_PRODUCT_INFO.OS_SP_MAJOR_VER,
  PM_PRODUCT_INFO.OS_SP_MINOR_VER
from
  PM_PATCH_INFO,
  PM_PRODUCT_INFO
where
  (
    (
      PM_PATCH_INFO.COMPUTER_SYS_ID = PM_PRODUCT_INFO.COMPUTER_SYS_ID
    )
  and
    (
      PM_PATCH_INFO.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE
    )
  );

-- delete from QUERY_VIEWS where VIEW_NAME = 'SP_PATCHES_VIEW';
create or replace view SP_PATCHES_VIEW
as
select
  PM_PATCH_INFO.COMPUTER_SYS_ID,
  PM_PATCH_INFO.QNUM,
  PM_PATCH_INFO.GUID,
  PM_PATCH_INFO.UPDATEID,
  PM_PATCH_INFO.REBOOTBEHAVIOR,
  PM_PATCH_INFO.BULLETIN,
  PM_PATCH_INFO.PRODUCT,
  PM_PATCH_INFO.STATUS,
  PM_PATCH_INFO.REASON,
  SD_PACKAGES.SWARE_NAME,
  SD_PACKAGES.SWARE_VERS,
  SD_PACKAGES.TME_SWARE_OID,
  SD_PACKAGES.SWARE_SRC_HOST,
  SD_PACKAGES.SWARE_SRC_PATH,
  SD_PACKAGES.REGION_ID,
  PM_PRODUCT_INFO.PRODUCT_CODE,
  PM_PRODUCT_INFO.PROD_MAJOR_VER,
  PM_PRODUCT_INFO.PROD_MINOR_VER,
  PM_PRODUCT_INFO.PROD_LANG,
  PM_PRODUCT_INFO.OS_BASE_NAME,
  PM_PRODUCT_INFO.OS_ARCHITECTURE,
  PM_PRODUCT_INFO.OS_TYPE,
  PM_PRODUCT_INFO.OS_SUBTYPE,
  PM_PRODUCT_INFO.OS_SP_MAJOR_VER,
  PM_PRODUCT_INFO.OS_SP_MINOR_VER
from
  PM_PATCH_INFO
     JOIN PM_PRODUCT_INFO ON
        PM_PATCH_INFO.COMPUTER_SYS_ID = PM_PRODUCT_INFO.COMPUTER_SYS_ID and
        PM_PATCH_INFO.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE
      LEFT OUTER JOIN PM_PATCH_PKG ON
            PM_PATCH_PKG.GUID = PM_PATCH_INFO.GUID and
            PM_PATCH_PKG.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE 
        LEFT OUTER JOIN SD_PACKAGES ON
            PM_PATCH_PKG.SWARE_NAME = SD_PACKAGES.SWARE_NAME AND
                PM_PATCH_PKG.REGION_ID = SD_PACKAGES.REGION_ID
;

-- delete from QUERY_VIEWS where VIEW_NAME = 'EP_PATCHES_VIEW';
create or replace view EP_PATCHES_VIEW
as
select 
  PM_PATCH_INFO.COMPUTER_SYS_ID,
  PM_PATCH_INFO.QNUM,
  PM_PATCH_INFO.GUID,
  PM_PATCH_INFO.UPDATEID,
  PM_PATCH_INFO.REBOOTBEHAVIOR,
  PM_PATCH_INFO.BULLETIN,
  PM_PATCH_INFO.PRODUCT,
  PM_PATCH_INFO.STATUS,
  PM_PATCH_INFO.REASON,
  COMPUTER.TME_OBJECT_ID,
  COMPUTER.TME_OBJECT_LABEL,
  SD_PACKAGES.SWARE_NAME,
  SD_PACKAGES.SWARE_VERS,
  SD_PACKAGES.REGION_ID,
  SD_INST.STATE,
  PM_PRODUCT_INFO.PRODUCT_CODE,
  PM_PRODUCT_INFO.PROD_MAJOR_VER,
  PM_PRODUCT_INFO.PROD_MINOR_VER,
  PM_PRODUCT_INFO.PROD_LANG,
  PM_PRODUCT_INFO.OS_BASE_NAME,
  PM_PRODUCT_INFO.OS_ARCHITECTURE,
  PM_PRODUCT_INFO.OS_TYPE,
  PM_PRODUCT_INFO.OS_SUBTYPE,
  PM_PRODUCT_INFO.OS_SP_MAJOR_VER,
  PM_PRODUCT_INFO.OS_SP_MINOR_VER
from
  PM_PATCH_INFO 
      JOIN PM_PRODUCT_INFO ON
        PM_PATCH_INFO.COMPUTER_SYS_ID = PM_PRODUCT_INFO.COMPUTER_SYS_ID and
        PM_PATCH_INFO.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE
      JOIN COMPUTER ON
        PM_PRODUCT_INFO.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID
      LEFT OUTER JOIN PM_PATCH_PKG ON
            PM_PATCH_PKG.GUID = PM_PATCH_INFO.GUID and
            PM_PATCH_PKG.PRODUCT_CODE = PM_PRODUCT_INFO.PRODUCT_CODE 
        LEFT OUTER JOIN SD_PACKAGES ON 
            (PM_PATCH_PKG.SWARE_NAME = SD_PACKAGES.SWARE_NAME and
                PM_PATCH_PKG.REGION_ID = SD_PACKAGES.REGION_ID)
        LEFT OUTER JOIN SD_INST ON 
                (SD_INST.COMPUTER_SYS_ID = COMPUTER.COMPUTER_SYS_ID and 
                    SD_INST.SWARE_NAME = PM_PATCH_PKG.SWARE_NAME and
                    SD_INST.REGION_ID = PM_PATCH_PKG.REGION_ID)
;

insert into QUERY_VIEWS (VIEW_NAME) values ('PM_PATCHES_VIEW');
insert into QUERY_VIEWS(VIEW_NAME) values ('SP_PATCHES_VIEW');
insert into QUERY_VIEWS(VIEW_NAME) values ('EP_PATCHES_VIEW');

commit;

-------------------
-- OMA DM TABLES --
-------------------

DROP TABLE SYNCDM_DEVINFO CASCADE CONSTRAINTS;
CREATE TABLE SYNCDM_DEVINFO (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    MANUFACTURER                  VARCHAR2(254),
    MODEL                         VARCHAR2(254),
    DEVID                         VARCHAR2(64),
    LANG                          VARCHAR2(32),
    DMV                           VARCHAR2(128),
    RECORD_TIME                   DATE,
    CONSTRAINT SMLM_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID),
    CONSTRAINT SMLM_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER syncdm_dev_lmd_trg
    BEFORE UPDATE ON SYNCDM_DEVINFO
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER syncdm_dev_lmd_def
    BEFORE INSERT ON SYNCDM_DEVINFO
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE SYNCDM_DEVDETAIL CASCADE CONSTRAINTS;
CREATE TABLE SYNCDM_DEVDETAIL 
(
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    URI_MAXDEPTH                  VARCHAR2(32), 
    URI_MAXTOTLEN                 VARCHAR2(32), 
    URI_MAXSEGLEN                 VARCHAR2(32), 
    DEVTYP                        VARCHAR2(32),
    OEM                           VARCHAR2(254),
    FWV                           VARCHAR2(32),
    SWV                           VARCHAR2(32),
    HWV                           VARCHAR2(32),
    LRGOBJ                        VARCHAR2(32),
    RECORD_TIME                   DATE,
    CONSTRAINT SMLM_DEV_PK 
        PRIMARY KEY (COMPUTER_SYS_ID),
    CONSTRAINT SMLM_DEV_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER syncdm_dvi_lmd_trg
    BEFORE UPDATE ON SYNCDM_DEVDETAIL
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER syncdm_dvi_lmd_def
    BEFORE INSERT ON SYNCDM_DEVDETAIL
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE SYNCDM_DMACC CASCADE CONSTRAINTS;
CREATE TABLE SYNCDM_DMACC 
(
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    DMACCNAME                     VARCHAR2(64)  NOT NULL,
    ADDR                          VARCHAR2(254),
    ADDRTYPE                      VARCHAR2(254),
    PORTNBR                       VARCHAR2(64),
    CONREF                        VARCHAR2(64),
    SERVERID                      VARCHAR2(64),
    SERVERPW                      VARCHAR2(64),
    SERVERNONCE                   VARCHAR2(64),
    USERNAME                      VARCHAR2(64),
    CLIENTPW                      VARCHAR2(64),
    CLIENTNONCE                   VARCHAR2(64),
    NAME                          VARCHAR2(64),
    CONSTRAINT DMACC_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,DMACCNAME),
    CONSTRAINT DMACC_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));



DROP TABLE SYNCDM_CON_NAP CASCADE CONSTRAINTS;
CREATE TABLE SYNCDM_CON_NAP 
(
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    CONNAME                       VARCHAR2(64)  NOT NULL,
    BEARER                        VARCHAR2(254),
    ADDRTYPE                      VARCHAR2(254),
    ADDR                          VARCHAR2(254),
    AUTHNAME                      VARCHAR2(64),
    ID                            VARCHAR2(64),
    SECRET                        VARCHAR2(64),
    CONSTRAINT CON_NAP_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,CONNAME),
    CONSTRAINT CON_NAP_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


DROP TABLE SYNCDM_CON_PX CASCADE CONSTRAINTS;
CREATE TABLE SYNCDM_CON_PX 
(
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    CONNAME                       VARCHAR2(64)  NOT NULL,
    PORTNBR                       VARCHAR2(254),
    ADDRTYPE                      VARCHAR2(254),
    ADDR                          VARCHAR2(254),
    AUTHNAME                      VARCHAR2(64),
    ID                            VARCHAR2(64),
    SECRET                        VARCHAR2(64),
    CONSTRAINT CON_PX_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,CONNAME),
    CONSTRAINT CON_PX_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));



DROP TABLE SYNCDM_TREE CASCADE CONSTRAINTS;
CREATE TABLE SYNCDM_TREE 
(
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    URI                           VARCHAR2(254) NOT NULL, 
    META_FORMAT                   VARCHAR2(32), 
    META_TYPE                     VARCHAR2(64), 
    DATA                          VARCHAR2(4000), 
    RECORD_TIME                   DATE,
    CONSTRAINT SMLM_TRE_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, URI),
    CONSTRAINT SMLM_TRE_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER syncdm_tre_lmd_trg
    BEFORE UPDATE ON SYNCDM_TREE
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER syncdm_tre_lmd_def
    BEFORE INSERT ON SYNCDM_TREE
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_EMAIL CASCADE CONSTRAINTS;
CREATE TABLE MO_EMAIL (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    INSTANCE                      VARCHAR2(64)  NOT NULL,
    NAME                          VARCHAR2(64),
    USER_ID                       VARCHAR2(64),
    PW                            VARCHAR2(64),
    UADDR                         VARCHAR2(64),
    UNAME                         VARCHAR2(64),
    MRCV                          VARCHAR2(64),
    MSND                          VARCHAR2(64),
    MPRO                          VARCHAR2(64),
    USESECCON                     VARCHAR2(64),
    USESAUTH                      VARCHAR2(64),
    SAUTHUID                      VARCHAR2(64),
    SAUTHPW                       VARCHAR2(64),
    PTXTSAUTH                     VARCHAR2(64),
    TONAPID                       VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_EMAIL_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_EMAIL_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_email_lmd_trg
    BEFORE UPDATE ON MO_EMAIL
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_email_lmd_def
    BEFORE INSERT ON MO_EMAIL
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_MMS CASCADE CONSTRAINTS;
CREATE TABLE MO_MMS (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    INSTANCE                      VARCHAR2(64)  NOT NULL,
    NAME                          VARCHAR2(64),
    MMRECEP                       VARCHAR2(64),
    ONRCVMSG                      VARCHAR2(64),
    AMSG                          VARCHAR2(64),
    RCVADS                        VARCHAR2(64),
    IMGSIZE                       VARCHAR2(64),
    DREPSND                       VARCHAR2(64),
    RCVREP                        VARCHAR2(64),
    MSGVAL                        VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_MMS_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_MMS_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_mms_lmd_trg
    BEFORE UPDATE ON MO_MMS
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_mms_lmd_def
    BEFORE INSERT ON MO_MMS
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_MMS_CON CASCADE CONSTRAINTS;
CREATE TABLE MO_MMS_CON (
    COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
    INSTANCE                      VARCHAR2(64) NOT NULL,
    MMSSADDR                      VARCHAR2(128),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_MMS_CON_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_MMS_CON_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));   

CREATE OR REPLACE TRIGGER mo_mms_con_lmd_trg
    BEFORE UPDATE ON MO_MMS_CON
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_mms_con_lmd_def
    BEFORE INSERT ON MO_MMS_CON
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_MMS_NAP CASCADE CONSTRAINTS;
CREATE TABLE MO_MMS_NAP (
    COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
    INSTANCE                      VARCHAR2(64) NOT NULL,
    CONINSTANCE                   VARCHAR2(64) NOT NULL,
    NAPINSTANCE                   VARCHAR2(64) NOT NULL,
    MTONAPIDL                     VARCHAR2(64),
    RANK                          VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_MMS_NAP_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE,CONINSTANCE,NAPINSTANCE),
    CONSTRAINT MO_MMS_NAP_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));   


CREATE OR REPLACE TRIGGER mo_mms_nap_lmd_trg
    BEFORE UPDATE ON MO_MMS_NAP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_mms_nap_lmd_def
    BEFORE INSERT ON MO_MMS_NAP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_NAP CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_NAP 
(
   COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   NAME                          VARCHAR2(254), 
   NAPID                         VARCHAR2(64), 
   NAPADDR                       VARCHAR2(64), 
   NAPADDRTY                     VARCHAR2(64), 
   CALLTY                        VARCHAR2(64), 
   LNKSPEED                      VARCHAR2(64), 
   DEFGW                         VARCHAR2(64), 
   NETWORKMASK                   VARCHAR2(64), 
   USECB                         VARCHAR2(64), 
   CBTY                          VARCHAR2(64), 
   CBNBR                         VARCHAR2(64), 
   PPPCOMP                       VARCHAR2(64), 
   LOGINTY                       VARCHAR2(64), 
   USEPTXTLOG                    VARCHAR2(64), 
   GPRSPDP                       VARCHAR2(64), 
   MODEMINIT                     VARCHAR2(64), 
   IPADDR                        VARCHAR2(64), 
   DNSADDR                       VARCHAR2(64), 
   IPV6DNSADDR                   VARCHAR2(64), 
   IP_ADDR                       VARCHAR2(64),    
   IFNET                         VARCHAR2(64), 
   IAPSERVICE                    VARCHAR2(64), 
   RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_NAP_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_NAP_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER apnaptrg
    BEFORE UPDATE ON MO_AP_NAP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER apnapdef
    BEFORE INSERT ON MO_AP_NAP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_NAPB CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_NAPB 
(
   COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   NAPINSTANCE                   VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   BEARERL                       VARCHAR2(32), 
   DIRECTION                     VARCHAR2(32), 
   RECORD_TIME                   DATE,
       CONSTRAINT MO_AP_NAPB_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, NAPINSTANCE, INSTANCE),
       CONSTRAINT MO_AP_NAPB_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER apnabtrg
    BEFORE UPDATE ON MO_AP_NAPB
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER apnabdef
    BEFORE INSERT ON MO_AP_NAPB
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_NAPD CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_NAPD 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   NAPINSTANCE                   VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   DNSADDRL                      VARCHAR2(32), 
   DNSADDRTY                     VARCHAR2(32), 
   DNSPRIORITY                   VARCHAR2(32),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_NAPD_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, NAPINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_NAPD_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER apnadtrg
    BEFORE UPDATE ON MO_AP_NAPD
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER apnaddef
    BEFORE INSERT ON MO_AP_NAPD
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_NAPN CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_NAPN 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   NAPINSTANCE                   VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   NAME                          VARCHAR2(32), 
   ID                            VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_NAPN_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, NAPINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_NAPN_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER apnantrg
    BEFORE UPDATE ON MO_AP_NAPN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER apnandef
    BEFORE INSERT ON MO_AP_NAPN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/



DROP TABLE MO_AP_NAPA CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_NAPA 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   NAPINSTANCE                   VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   AUTHNAME                      VARCHAR2(32), 
   AUTHSECR                      VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_NAPA_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, NAPINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_NAPA_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));

CREATE OR REPLACE TRIGGER apnaatrg
    BEFORE UPDATE ON MO_AP_NAPA
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER apnaadef
    BEFORE INSERT ON MO_AP_NAPA
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_PX CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_PX
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL,
   NAME                          VARCHAR2(254), 
   PXID                          VARCHAR2(64), 
   PXADDR                        VARCHAR2(64), 
   STARTPG                       VARCHAR2(254), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_PX_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_PX_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));

CREATE OR REPLACE TRIGGER appxtrg
    BEFORE UPDATE ON MO_AP_PX
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER appxdef
    BEFORE INSERT ON MO_AP_PX
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_PXD CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_PXD 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   PXINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   DOMAINL                       VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_PXD_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, PXINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_PXD_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));

CREATE OR REPLACE TRIGGER appxdtrg
    BEFORE UPDATE ON MO_AP_PXD
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER appxddef
    BEFORE INSERT ON MO_AP_PXD
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_PXN CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_PXN 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   PXINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   TONAPIDL                      VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_PXN_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, PXINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_PXN_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));

CREATE OR REPLACE TRIGGER appxntrg
    BEFORE UPDATE ON MO_AP_PXN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER appxndef
    BEFORE INSERT ON MO_AP_PXN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_PXA CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_PXA 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   PXINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL,
   PXAUTHID                      VARCHAR2(32), 
   PXAUTHPW                      VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_PXA_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, PXINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_PXA_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));              

CREATE OR REPLACE TRIGGER appxatrg
    BEFORE UPDATE ON MO_AP_PXA
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER appxadef
    BEFORE INSERT ON MO_AP_PXA
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_PXP CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_PXP 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   PXINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   PORTNBR                       VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_PXP_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, PXINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_PXP_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));

CREATE OR REPLACE TRIGGER appxptrg
    BEFORE UPDATE ON MO_AP_PXP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER appxpdef
    BEFORE INSERT ON MO_AP_PXP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_AP_PXNO CASCADE CONSTRAINTS;
CREATE TABLE MO_AP_PXNO 
(
   COMPUTER_SYS_ID               VARCHAR2(64)   NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   PXINSTANCE                    VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   NOPXFORL                      VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_AP_PXNO_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, PXINSTANCE, INSTANCE),
    CONSTRAINT MO_AP_PXNO_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));

CREATE OR REPLACE TRIGGER appxotrg
    BEFORE UPDATE ON MO_AP_PXNO
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/
    

CREATE OR REPLACE TRIGGER appxodef
    BEFORE INSERT ON MO_AP_PXNO
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_LOGIN CASCADE CONSTRAINTS;
CREATE TABLE MO_LOGIN (
    COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
    APINSTANCE                    VARCHAR2(32) NOT NULL, 
    INSTANCE                      VARCHAR2(32) NOT NULL, 
    NAME                          VARCHAR2(254), 
    TW                            VARCHAR2(16), 
        LOGINTY                       VARCHAR2(64),
    DATA                          VARCHAR2(1024),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_LOGIN_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, INSTANCE),
    CONSTRAINT MO_LOGIN_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_login_lmd_trg
    BEFORE UPDATE ON MO_LOGIN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_login_lmd_def
    BEFORE INSERT ON MO_LOGIN
        FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/

DROP TABLE MO_DS CASCADE CONSTRAINTS;
CREATE TABLE MO_DS (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    INSTANCE                      VARCHAR2(64)  NOT NULL,
    ADDR                          VARCHAR2(64),
    ADDRTYPE                      VARCHAR2(64),
    PORT                          VARCHAR2(64),
    NAME                          VARCHAR2(64),
    CLIENTNAME                    VARCHAR2(64),
    CLIENTPW                      VARCHAR2(64),
    TONAPID                       VARCHAR2(64),
    AUTHPREF                      VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_DS_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_DS_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_ds_lmd_trg
    BEFORE UPDATE ON MO_DS
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_ds_lmd_def
    BEFORE INSERT ON MO_DS
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_DS_DB CASCADE CONSTRAINTS;
CREATE TABLE MO_DS_DB (
    COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
    DSINSTANCE                    VARCHAR2(32) NOT NULL, 
    INSTANCE                      VARCHAR2(32) NOT NULL, 
    CTTYPE                        VARCHAR2(64),  
    LDBURI                        VARCHAR2(64),  
    RDBURI                        VARCHAR2(64),  
    RECORD_TIME                   DATE,
    CONSTRAINT MO_DS_DB_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, DSINSTANCE, INSTANCE),
    CONSTRAINT MO_DS_DB_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_ds_db_lmd_trg
    BEFORE UPDATE ON MO_DS_DB
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_ds_db_lmd_def
    BEFORE INSERT ON MO_DS_DB
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WLAN CASCADE CONSTRAINTS;
CREATE TABLE MO_WLAN (
    COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
    APINSTANCE                    VARCHAR2(32) NOT NULL, 
    NAPINSTANCE                   VARCHAR2(32) NOT NULL,
    INSTANCE                      VARCHAR2(32) NOT NULL, 
    SSID                          VARCHAR2(64), 
    NETWORK_MODE                  VARCHAR2(32), 
    SECURITY_MODE                 VARCHAR2(32), 
       USEWPAPSK                     VARCHAR2(32),  
    WPAPRESHAREDKEY               VARCHAR2(128), 
    WEP_KEY_INDEX                 VARCHAR2(32), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WLAN_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, NAPINSTANCE, INSTANCE),
    CONSTRAINT MO_WLAN_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wlan_lmd_trg
    BEFORE UPDATE ON MO_WLAN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_wlan_lmd_def
    BEFORE INSERT ON MO_WLAN
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WLAN_KEY;
CREATE TABLE MO_WLAN_KEY 
(
   COMPUTER_SYS_ID               VARCHAR2(64) NOT NULL,
   APINSTANCE                    VARCHAR2(32) NOT NULL, 
   NAPINSTANCE                   VARCHAR2(32) NOT NULL, 
   WAPINSTANCE                   VARCHAR2(32) NOT NULL, 
   INSTANCE                      VARCHAR2(32) NOT NULL, 
   KEYID                         VARCHAR2(64), 
   LENGTH                        VARCHAR2(32), 
   DATA                          VARCHAR2(255), 
   RECORD_TIME                   DATE,
    CONSTRAINT MO_WLAN_K_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID, APINSTANCE, NAPINSTANCE, WAPINSTANCE, INSTANCE),
    CONSTRAINT MO_WLAN_K_DID_FK 
        FOREIGN KEY (COMPUTER_SYS_ID)
        REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wlan_k_lmd_trg
    BEFORE UPDATE ON MO_WLAN_KEY
    FOR EACH ROW
        BEGIN
      :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_wlan_k_lmd_def
    BEFORE INSERT ON MO_WLAN_KEY
    FOR EACH ROW
        BEGIN
      :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_SAMETIME CASCADE CONSTRAINTS;
CREATE TABLE MO_SAMETIME (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    LOGGING                       VARCHAR2(16), 
    LOGMAXSIZE                    VARCHAR2(32), 
    TIMEOUT                       VARCHAR2(32), 
    USERID                        VARCHAR2(128), 
    PASSWORD                      VARCHAR2(32), 
    HOSTNAME                      VARCHAR2(128), 
    PORT                          VARCHAR2(16), 
    CONNECTION                    VARCHAR2(64), 
    RECORD_TIME                   DATE,
    CONSTRAINT MO_SAMET_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID),
    CONSTRAINT MO_SAMET_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_samet_lmd_trg
    BEFORE UPDATE ON MO_SAMETIME
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/



CREATE OR REPLACE TRIGGER mo_samet_lmd_def
    BEFORE INSERT ON MO_SAMETIME
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WEA CASCADE CONSTRAINTS;
CREATE TABLE MO_WEA (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    PROFILE                       VARCHAR2(64),
    NETPROFILES                   VARCHAR2(64),
    REFRESH                       VARCHAR2(64),
    THEME                         VARCHAR2(64),
    SELECTED                      VARCHAR2(64),
    CONNECTION                    VARCHAR2(64),
    LOG_MAX                       VARCHAR2(64),
    USERID                        VARCHAR2(64),
    PASSWORD                      VARCHAR2(64),
    LOG_LEVEL                     VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WEA_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID),
    CONSTRAINT MO_WEA_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wea_lmd_trg
    BEFORE UPDATE ON MO_WEA
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/



CREATE OR REPLACE TRIGGER mo_wea_lmd_def
    BEFORE INSERT ON MO_WEA
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WEA_CAT CASCADE CONSTRAINTS;
CREATE TABLE MO_WEA_CAT (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    INSTANCE                      VARCHAR2(64)  NOT NULL,
    AVAILAPPS                     VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WEA_CAT_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_WEA_CAT_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wea_cat_lmd_trg
    BEFORE UPDATE ON MO_WEA_CAT
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/



CREATE OR REPLACE TRIGGER mo_wea_cat_lmd_def
    BEFORE INSERT ON MO_WEA_CAT
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WEA_APP CASCADE CONSTRAINTS;
CREATE TABLE MO_WEA_APP (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    INSTANCE                      VARCHAR2(64)  NOT NULL,
    VALUE                         VARCHAR2(256),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WEA_APP_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_WEA_APP_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wea_app_lmd_trg
    BEFORE UPDATE ON MO_WEA_APP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_wea_app_lmd_def
    BEFORE INSERT ON MO_WEA_APP
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WEA_AGGR CASCADE CONSTRAINTS;
CREATE TABLE MO_WEA_AGGR (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    INSTANCE                      VARCHAR2(64)  NOT NULL,
    VALUE                         VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WEA_AGGR_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID,INSTANCE),
    CONSTRAINT MO_WEA_AGGR_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wea_agr_lmd_trg
    BEFORE UPDATE ON MO_WEA_AGGR
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_wea_agr_lmd_def
    BEFORE INSERT ON MO_WEA_AGGR
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WEA_DS CASCADE CONSTRAINTS;
CREATE TABLE MO_WEA_DS (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    URL                           VARCHAR2(64),
    PORT                          VARCHAR2(64),
    HTTP_AUTH                     VARCHAR2(64),
    LOCAL_CAL                     VARCHAR2(256),
    REMOTE_CAL                    VARCHAR2(256),
    LOCAL_CON                     VARCHAR2(256),
    REMOTE_CON                    VARCHAR2(256),
    REMOTE_MAIL                   VARCHAR2(256),
    LOCAL_MAIL                    VARCHAR2(256),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WEA_DS_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID),
    CONSTRAINT MO_WEA_DS_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wea_ds_lmd_trg
    BEFORE UPDATE ON MO_WEA_DS
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_wea_ds_lmd_def
    BEFORE INSERT ON MO_WEA_DS
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


DROP TABLE MO_WEA_PORTAL CASCADE CONSTRAINTS;
CREATE TABLE MO_WEA_PORTAL (
    COMPUTER_SYS_ID               VARCHAR2(64)  NOT NULL,
    URL                           VARCHAR2(64),
    NO_RFSH_APPS                  VARCHAR2(64),
    NO_SHOW_APPS                  VARCHAR2(64),
    NO_RPT_APPS                   VARCHAR2(64),
    RECORD_TIME                   DATE,
    CONSTRAINT MO_WEA_PRT_DID_PK 
        PRIMARY KEY (COMPUTER_SYS_ID),
    CONSTRAINT MO_WEA_PRT_DID_FK 
        FOREIGN KEY(COMPUTER_SYS_ID)
           REFERENCES COMPUTER(COMPUTER_SYS_ID));


CREATE OR REPLACE TRIGGER mo_wea_prt_lmd_trg
    BEFORE UPDATE ON MO_WEA_PORTAL
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/


CREATE OR REPLACE TRIGGER mo_wea_prt_lmd_def
    BEFORE INSERT ON MO_WEA_PORTAL
    FOR EACH ROW
        BEGIN
       :NEW.RECORD_TIME := SYSDATE;
        END;
/



insert into INVENTORY_TABLES(TABLE_NAME) values ('SYNCDM_DEVINFO');
insert into INVENTORY_TABLES(TABLE_NAME) values ('SYNCDM_DEVDETAIL');
insert into INVENTORY_TABLES(TABLE_NAME) values ('SYNCDM_DMACC');
insert into INVENTORY_TABLES(TABLE_NAME) values ('SYNCDM_CON_NAP');
insert into INVENTORY_TABLES(TABLE_NAME) values ('SYNCDM_CON_PX');
insert into INVENTORY_TABLES(TABLE_NAME) values ('SYNCDM_TREE');

insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_EMAIL');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_MMS');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_MMS_CON');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_MMS_NAP');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_NAP');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_NAPB');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_NAPD');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_NAPN');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_NAPA');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_PX');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_PXD');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_PXN');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_PXA');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_PXP');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_AP_PXNO');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_LOGIN');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_DS');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_DS_DB');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WLAN');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WLAN_KEY');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_SAMETIME');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WEA');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WEA_CAT');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WEA_APP');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WEA_AGGR');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WEA_DS');
insert into INVENTORY_TABLES(TABLE_NAME) values ('MO_WEA_PORTAL');


------------------
-- OMA DM VIEWS --
------------------


CREATE OR REPLACE VIEW DEV_INFO_EXT_VIEW(DEVICE_ID, URI, META_FORMAT, META_TYPE, DATA) 
AS
  SELECT i.COMPUTER_SYS_ID, i.URI, i.META_FORMAT, i.META_TYPE, i.DATA
  FROM SYNCDM_TREE i
  WHERE i.URI LIKE './DevInfo/Ext/%';


CREATE OR REPLACE VIEW DEV_INFO_BEA_VIEW(DEVICE_ID, URI, META_FORMAT, META_TYPE, DATA) 
AS
  SELECT i.COMPUTER_SYS_ID, i.URI, i.META_FORMAT, i.META_TYPE, i.DATA 
  FROM SYNCDM_TREE i
  WHERE i.URI LIKE './DevInfo/Bearer/%';


CREATE OR REPLACE VIEW DEV_DET_EXT_VIEW(DEVICE_ID, URI, META_FORMAT, META_TYPE, DATA) 
AS
  SELECT i.COMPUTER_SYS_ID, i.URI, i.META_FORMAT, i.META_TYPE, i.DATA 
  FROM SYNCDM_TREE i
  WHERE i.URI LIKE './DevDetail/Ext/%';


CREATE OR REPLACE VIEW DEV_DET_BEA_VIEW(DEVICE_ID, URI, META_FORMAT, META_TYPE, DATA) 
AS
  SELECT i.COMPUTER_SYS_ID, i.URI, i.META_FORMAT, i.META_TYPE, i.DATA 
  FROM SYNCDM_TREE i
  WHERE i.URI LIKE './DevDetail/Bearer/%';


CREATE OR REPLACE VIEW DMACC_CON_EXT_VIEW(DEVICE_ID, URI, META_FORMAT, META_TYPE, DATA) 
AS
  SELECT i.COMPUTER_SYS_ID, i.URI, i.META_FORMAT, i.META_TYPE, i.DATA 
  FROM SYNCDM_TREE i
  WHERE i.URI LIKE './SyncML/Con/%/Ext/%';


CREATE OR REPLACE VIEW MO_EMAIL_VIEW
AS
    SELECT
    TRM_RESOURCES.LABEL,
        MO_EMAIL.COMPUTER_SYS_ID,
    MO_EMAIL.INSTANCE,
    MO_EMAIL.NAME,
    MO_EMAIL.USER_ID,
    MO_EMAIL.PW,
    MO_EMAIL.UADDR,
    MO_EMAIL.UNAME,
    MO_EMAIL.MRCV,
    MO_EMAIL.MSND,
    MO_EMAIL.MPRO,
    MO_EMAIL.USESECCON,
    MO_EMAIL.USESAUTH,
    MO_EMAIL.SAUTHUID,
    MO_EMAIL.SAUTHPW,
    MO_EMAIL.PTXTSAUTH,
    MO_EMAIL.TONAPID,
    MO_EMAIL.RECORD_TIME
    FROM
    MO_EMAIL, TRM_RESOURCES
    WHERE
    MO_EMAIL.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_MMS_VIEW
AS
    SELECT
    TRM_RESOURCES.LABEL,
        MO_MMS.COMPUTER_SYS_ID,
    MO_MMS.INSTANCE,
    MO_MMS.NAME,
    MO_MMS.MMRECEP,
    MO_MMS.ONRCVMSG,
    MO_MMS.AMSG,
    MO_MMS.RCVADS,
    MO_MMS.IMGSIZE,
    MO_MMS.DREPSND,
    MO_MMS.RCVREP,
    MO_MMS.MSGVAL,
    MO_MMS.RECORD_TIME
    FROM
    MO_MMS, TRM_RESOURCES
    WHERE
    MO_MMS.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;

CREATE OR REPLACE VIEW MO_AP_NAP_VIEW
AS
  SELECT
    TRM_RESOURCES.LABEL,
    MO_AP_NAP.COMPUTER_SYS_ID,
    MO_AP_NAP.APINSTANCE, 
    MO_AP_NAP.INSTANCE, 
    MO_AP_NAP.NAME, 
    MO_AP_NAP.NAPID, 
    MO_AP_NAP.NAPADDR, 
    MO_AP_NAP.NAPADDRTY, 
    MO_AP_NAP.LNKSPEED, 
    MO_AP_NAP.DEFGW, 
    MO_AP_NAP.NETWORKMASK, 
    MO_AP_NAP.USECB, 
    MO_AP_NAP.CBTY, 
    MO_AP_NAP.CBNBR, 
    MO_AP_NAP.PPPCOMP, 
    MO_AP_NAP.LOGINTY, 
    MO_AP_NAP.USEPTXTLOG, 
    MO_AP_NAP.GPRSPDP,
    MO_AP_NAP.MODEMINIT, 
    MO_AP_NAP.IPADDR, 
    MO_AP_NAP.DNSADDR, 
    MO_AP_NAP.IPV6DNSADDR, 
    MO_AP_NAP.IFNET, 
    MO_AP_NAP.IAPSERVICE, 
    MO_AP_NAP.RECORD_TIME   
   FROM
    MO_AP_NAP, TRM_RESOURCES
    WHERE
    MO_AP_NAP.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_NAPB_VIEW
AS 
   SELECT
   TRM_RESOURCES.LABEL,
    MO_AP_NAPB.COMPUTER_SYS_ID,
    MO_AP_NAPB.APINSTANCE, 
    MO_AP_NAPB.NAPINSTANCE, 
    MO_AP_NAPB.INSTANCE, 
    MO_AP_NAPB.BEARERL, 
    MO_AP_NAPB.DIRECTION, 
    MO_AP_NAPB.RECORD_TIME
   FROM
    MO_AP_NAPB, TRM_RESOURCES
    WHERE
    MO_AP_NAPB.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_NAPD_VIEW
AS 
   SELECT
   TRM_RESOURCES.LABEL,
   MO_AP_NAPD.COMPUTER_SYS_ID,
   MO_AP_NAPD.APINSTANCE, 
   MO_AP_NAPD.NAPINSTANCE, 
   MO_AP_NAPD.INSTANCE, 
   MO_AP_NAPD.DNSADDRL, 
   MO_AP_NAPD.DNSADDRTY, 
   MO_AP_NAPD.DNSPRIORITY, 
   MO_AP_NAPD.RECORD_TIME
   FROM
    MO_AP_NAPD, TRM_RESOURCES
    WHERE
    MO_AP_NAPD.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_NAPN_VIEW
AS 
 SELECT
   TRM_RESOURCES.LABEL,
   MO_AP_NAPN.COMPUTER_SYS_ID,
   MO_AP_NAPN.APINSTANCE, 
   MO_AP_NAPN.NAPINSTANCE, 
   MO_AP_NAPN.INSTANCE, 
   MO_AP_NAPN.NAME, 
   MO_AP_NAPN.ID, 
   MO_AP_NAPN.RECORD_TIME
   FROM
    MO_AP_NAPN, TRM_RESOURCES
    WHERE
    MO_AP_NAPN.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_NAPA_VIEW
AS 
 SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_NAPA.COMPUTER_SYS_ID,
   MO_AP_NAPA.APINSTANCE, 
   MO_AP_NAPA.NAPINSTANCE, 
   MO_AP_NAPA.INSTANCE, 
   MO_AP_NAPA.AUTHNAME, 
   MO_AP_NAPA.AUTHSECR, 
   MO_AP_NAPA.RECORD_TIME
   FROM
    MO_AP_NAPA, TRM_RESOURCES
    WHERE
    MO_AP_NAPA.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_PX_VIEW
AS
   SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_PX.COMPUTER_SYS_ID,
   MO_AP_PX.APINSTANCE, 
   MO_AP_PX.INSTANCE, 
   MO_AP_PX.NAME, 
   MO_AP_PX.PXID, 
   MO_AP_PX.PXADDR, 
   MO_AP_PX.STARTPG, 
   MO_AP_PX.RECORD_TIME
   FROM
    MO_AP_PX, TRM_RESOURCES
    WHERE
    MO_AP_PX.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_PXD_VIEW
AS
   SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_PXD.COMPUTER_SYS_ID,
   MO_AP_PXD.APINSTANCE, 
   MO_AP_PXD.PXINSTANCE, 
   MO_AP_PXD.INSTANCE, 
   MO_AP_PXD.DOMAINL, 
   MO_AP_PXD.RECORD_TIME
   FROM
    MO_AP_PXD, TRM_RESOURCES
    WHERE
    MO_AP_PXD.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_PXN_VIEW
AS
   SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_PXN.COMPUTER_SYS_ID,
   MO_AP_PXN.APINSTANCE, 
   MO_AP_PXN.PXINSTANCE, 
   MO_AP_PXN.INSTANCE, 
   MO_AP_PXN.TONAPIDL, 
   MO_AP_PXN.RECORD_TIME
    FROM
    MO_AP_PXN, TRM_RESOURCES
    WHERE
    MO_AP_PXN.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_PXA_VIEW 
AS
   SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_PXA.COMPUTER_SYS_ID,
   MO_AP_PXA.APINSTANCE, 
   MO_AP_PXA.PXINSTANCE, 
   MO_AP_PXA.INSTANCE, 
   MO_AP_PXA.PXAUTHID, 
   MO_AP_PXA.PXAUTHPW, 
   MO_AP_PXA.RECORD_TIME
    FROM
    MO_AP_PXA, TRM_RESOURCES
    WHERE
    MO_AP_PXA.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_PXP_VIEW 
AS
   SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_PXP.COMPUTER_SYS_ID,
   MO_AP_PXP.APINSTANCE, 
   MO_AP_PXP.PXINSTANCE, 
   MO_AP_PXP.INSTANCE, 
   MO_AP_PXP.PORTNBR, 
   MO_AP_PXP.RECORD_TIME
   FROM
    MO_AP_PXP, TRM_RESOURCES
    WHERE
    MO_AP_PXP.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_AP_PXNO_VIEW
AS
   SELECT 
   TRM_RESOURCES.LABEL,
   MO_AP_PXNO.COMPUTER_SYS_ID,
   MO_AP_PXNO.APINSTANCE, 
   MO_AP_PXNO.PXINSTANCE, 
   MO_AP_PXNO.INSTANCE, 
   MO_AP_PXNO.NOPXFORL, 
   MO_AP_PXNO.RECORD_TIME
   FROM
    MO_AP_PXNO, TRM_RESOURCES
    WHERE
    MO_AP_PXNO.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_LOGIN_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
        MO_LOGIN.COMPUTER_SYS_ID,
    MO_LOGIN.APINSTANCE,
    MO_LOGIN.INSTANCE,
    MO_LOGIN.NAME,
    MO_LOGIN.TW,
    MO_LOGIN.LOGINTY,
    MO_LOGIN.DATA,
    MO_LOGIN.RECORD_TIME
    FROM
     MO_LOGIN, TRM_RESOURCES
    WHERE
     MO_LOGIN.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_DS_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
        MO_DS.COMPUTER_SYS_ID,
    MO_DS.INSTANCE,
    MO_DS.ADDR,
    MO_DS.ADDRTYPE,
    MO_DS.PORT,
    MO_DS.NAME,
    MO_DS.CLIENTNAME,
    MO_DS.CLIENTPW,
    MO_DS.TONAPID,
    MO_DS.AUTHPREF,
    MO_DS.RECORD_TIME
    FROM
     MO_DS, TRM_RESOURCES
    WHERE
     MO_DS.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;

     
CREATE OR REPLACE VIEW MO_DS_DB_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_DS_DB.COMPUTER_SYS_ID,
      MO_DS_DB.DSINSTANCE,
    MO_DS_DB.INSTANCE,
    MO_DS_DB.CTTYPE,
    MO_DS_DB.LDBURI,
    MO_DS_DB.RDBURI,
    MO_DS_DB.RECORD_TIME
    FROM
     MO_DS_DB, TRM_RESOURCES
    WHERE
     MO_DS_DB.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;
  

CREATE OR REPLACE VIEW MO_WLAN_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WLAN.COMPUTER_SYS_ID,
      MO_WLAN.APINSTANCE,
    MO_WLAN.NAPINSTANCE,
    MO_WLAN.INSTANCE,
    MO_WLAN.SSID,
    MO_WLAN.NETWORK_MODE,
    MO_WLAN.SECURITY_MODE,
      MO_WLAN.WPAPRESHAREDKEY,
      MO_WLAN.WEP_KEY_INDEX,
      MO_WLAN.RECORD_TIME
    FROM
     MO_WLAN, TRM_RESOURCES
    WHERE
     MO_WLAN.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WLAN_KEY_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
     MO_WLAN_KEY.COMPUTER_SYS_ID,
     MO_WLAN_KEY.APINSTANCE,
     MO_WLAN_KEY.NAPINSTANCE,
     MO_WLAN_KEY.WAPINSTANCE,
     MO_WLAN_KEY.INSTANCE,
     MO_WLAN_KEY.KEYID,
     MO_WLAN_KEY.LENGTH,
     MO_WLAN_KEY.DATA,
     MO_WLAN_KEY.RECORD_TIME
    FROM
     MO_WLAN_KEY, TRM_RESOURCES
    WHERE
     MO_WLAN_KEY.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_SAMETIME_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_SAMETIME.COMPUTER_SYS_ID,
      MO_SAMETIME.LOGGING,
    MO_SAMETIME.LOGMAXSIZE,
    MO_SAMETIME.TIMEOUT,
    MO_SAMETIME.USERID,
    MO_SAMETIME.PASSWORD,
    MO_SAMETIME.HOSTNAME,
      MO_SAMETIME.PORT,
      MO_SAMETIME.CONNECTION,
      MO_SAMETIME.RECORD_TIME
    FROM
     MO_SAMETIME, TRM_RESOURCES
    WHERE
     MO_SAMETIME.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WEA_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WEA.COMPUTER_SYS_ID,
      MO_WEA.PROFILE,
    MO_WEA.NETPROFILES,
    MO_WEA.REFRESH,
    MO_WEA.THEME,
    MO_WEA.SELECTED,
    MO_WEA.CONNECTION,
      MO_WEA.LOG_MAX,
      MO_WEA.USERID,
      MO_WEA.PASSWORD,
      MO_WEA.LOG_LEVEL,
      MO_WEA.RECORD_TIME
    FROM
     MO_WEA, TRM_RESOURCES
    WHERE
     MO_WEA.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WEA_CAT_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WEA_CAT.COMPUTER_SYS_ID,
      MO_WEA_CAT.INSTANCE,
      MO_WEA_CAT.AVAILAPPS,
      MO_WEA_CAT.RECORD_TIME
    FROM
     MO_WEA_CAT, TRM_RESOURCES
    WHERE
     MO_WEA_CAT.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WEA_APP_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WEA_APP.COMPUTER_SYS_ID,
      MO_WEA_APP.INSTANCE,
      MO_WEA_APP.VALUE,
      MO_WEA_APP.RECORD_TIME
    FROM
     MO_WEA_APP, TRM_RESOURCES
    WHERE
     MO_WEA_APP.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WEA_AGGR_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WEA_AGGR.COMPUTER_SYS_ID,
      MO_WEA_AGGR.INSTANCE,
      MO_WEA_AGGR.VALUE,
      MO_WEA_AGGR.RECORD_TIME
    FROM
     MO_WEA_AGGR, TRM_RESOURCES
    WHERE
     MO_WEA_AGGR.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WEA_DS_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WEA_DS.COMPUTER_SYS_ID,
      MO_WEA_DS.URL,
      MO_WEA_DS.PORT,
      MO_WEA_DS.HTTP_AUTH,
      MO_WEA_DS.LOCAL_CAL,
      MO_WEA_DS.REMOTE_CAL,
      MO_WEA_DS.LOCAL_CON,
      MO_WEA_DS.REMOTE_CON,
      MO_WEA_DS.LOCAL_MAIL,
      MO_WEA_DS.REMOTE_MAIL,
      MO_WEA_DS.RECORD_TIME
    FROM
     MO_WEA_DS, TRM_RESOURCES
    WHERE
     MO_WEA_DS.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;


CREATE OR REPLACE VIEW MO_WEA_PORTAL_VIEW
AS
     SELECT
     TRM_RESOURCES.LABEL,
      MO_WEA_PORTAL.COMPUTER_SYS_ID,
      MO_WEA_PORTAL.URL,
      MO_WEA_PORTAL.NO_RFSH_APPS,
      MO_WEA_PORTAL.NO_SHOW_APPS,
      MO_WEA_PORTAL.NO_RPT_APPS,
      MO_WEA_PORTAL.RECORD_TIME
    FROM
     MO_WEA_PORTAL, TRM_RESOURCES
    WHERE
     MO_WEA_PORTAL.COMPUTER_SYS_ID = TRM_RESOURCES.ADDR;

CREATE OR REPLACE VIEW CAT_SIG_V
AS
SELECT  SIGNATURE.ID as ID,
    SIGNATURE.NAME as NAME,
    SIGNATURE.FILE_SIZE as FILE_SIZE,
    SIGNATURE.SIG_TYPE as SIG_TYPE,
    SIGNATURE.SIG_VALUE as SIG_VALUE,
    nvl(DBMS_LOB.SUBSTR(INVENTORY_SIG.BODY,32767,1),'') as BODY,
    SIGNATURE.SIG_SCOPE as SIG_SCOPE,
    0 as COMPONENT_ID,
    SIGNATURE.PLATFORM as PLATFORM
FROM SIGNATURE
    LEFT OUTER JOIN INVENTORY_SIG ON
        SIGNATURE.ID=INVENTORY_SIG.ID WHERE
        SIGNATURE.ENABLED = 1
;

CREATE or REPLACE VIEW INV_PKG_VIEW
AS
SELECT SIG_PACKAGE.SIG_PACKAGE_ID AS SIG_PACKAGE_ID,
    SIG_PACKAGE.SWARE_SIG_ID AS SWARE_SIG_ID,
    SIG_PACKAGE.SWARE_DESC AS SWARE_DESC,
    SIG_PACKAGE.SWARE_VERS AS SWARE_VERS,
        SIGNATURE.ID as ID
FROM SIG_PACKAGE 
    JOIN SIGNATURE ON 
    SIG_PACKAGE.SWARE_SIG_ID = SIGNATURE.ID 
    AND SIGNATURE.ENABLED=2
;

insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_INFO_EXT_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_INFO_BEA_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_DET_EXT_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('DEV_DET_BEA_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('DMACC_CON_EXT_VIEW');

insert into QUERY_VIEWS (VIEW_NAME) values ('MO_EMAIL_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_MMS_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_NAP_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_NAPB_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_NAPD_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_NAPN_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_NAPA_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_PX_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_PXD_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_PXN_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_PXA_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_PXP_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_AP_PXNO_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_LOGIN_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_DS_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_DS_DB_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WLAN_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WLAN_KEY_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_SAMETIME_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WEA_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WEA_CAT_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WEA_APP_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WEA_AGGR_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WEA_DS_VIEW');
insert into QUERY_VIEWS (VIEW_NAME) values ('MO_WEA_PORTAL_VIEW');

insert into QUERY_VIEWS (VIEW_NAME) values ('DEVICE');
insert into INVENTORY_TABLES (TABLE_NAME) values ('DEVICE');

insert into SCHEMA_VERS values ('CM 4.3.1',SYSDATE,'INSTALL',
        'inv_ora_schema.sql','New 4.3.1 installation, GA level')
;

commit;

-------------------------------------
-- PATCH MANAGEMENT section        --
-------------------------------------


-- drop table INV_GROUP_EP CASCADE CONSTRAINTS;
-- delete from INVENTORY_TABLES
-- where TABLE_NAME = 'INV_GROUP_EP';

-- drop table INV_GROUP CASCADE CONSTRAINTS;
-- delete from INVENTORY_TABLES
-- where TABLE_NAME = 'INV_GROUP';


create table INV_GROUP (
  	GROUP_LABEL		varchar2(64)  not null,
  	GROUP_LABEL_ID		varchar2(128) not null,
constraint GROUP_PK primary key(GROUP_LABEL_ID)
);


create table INV_GROUP_EP (
  	GROUP_LABEL_ID          	varchar2(128) not null,
  	COMPUTER_SYS_ID          	varchar2(64) not null,
        GROUP_DESCR	                varchar2(255) not null,
constraint GROUP_EP_PK primary key(GROUP_LABEL_ID,COMPUTER_SYS_ID),
constraint GROUP_EP_CP_FK foreign key(COMPUTER_SYS_ID)
references COMPUTER(COMPUTER_SYS_ID),
constraint GROUP_EP_FK foreign key(GROUP_LABEL_ID)
references INV_GROUP(GROUP_LABEL_ID)
);

insert into INVENTORY_TABLES(TABLE_NAME) values('INV_GROUP_EP');
-- insert into INVENTORY_TABLES(TABLE_NAME) values('INV_GROUP');
commit
;


-- Views

-------------------------------------
-- View To query for EPs by GROUPS --
-------------------------------------
-- delete from QUERY_VIEWS where VIEW_NAME = 'INV_GRP_EP_VIEW';
create or replace view INV_GRP_EP_VIEW
as
select
  INV_GROUP.GROUP_LABEL,
  INV_GROUP.GROUP_LABEL_ID,
  INV_GROUP_EP.COMPUTER_SYS_ID
from
  INV_GROUP
JOIN
  INV_GROUP_EP
ON
  INV_GROUP.GROUP_LABEL_ID=
  INV_GROUP_EP.GROUP_LABEL_ID
;




insert into QUERY_VIEWS (VIEW_NAME) values ('INV_GRP_EP_VIEW');
commit
;

spool off;

exit

